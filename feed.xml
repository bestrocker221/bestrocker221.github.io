<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Carlo Alberto Scola</title>
    <description>My Personal Blog</description>
    <link>https://carloalbertoscola.it//</link>
    <atom:link href="https://carloalbertoscola.it//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 14 Mar 2020 13:06:19 +0100</pubDate>
    <lastBuildDate>Sat, 14 Mar 2020 13:06:19 +0100</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>A secure, easy and encrypted cloud backup</title>
        <description>&lt;h1 id=&quot;-how-to-configure-your-remote-encrypted-backup-&quot;&gt;&lt;center style=&quot;font-weight: bold&quot;&gt; How to configure your remote encrypted backup. &lt;/center&gt;&lt;/h1&gt;
&lt;h2 id=&quot;encfs-and-rsync&quot;&gt;&lt;center style=&quot;font-weight: bold&quot;&gt;EncFS and Rsync&lt;/center&gt;&lt;/h2&gt;

&lt;figure&gt;
&lt;img style=&quot;display: block; margin: auto;&quot; src=&quot;/assets/cloud-backup-enc.jpg&quot; /&gt;
&lt;figcaption&gt;EncFS and Rsync - the &quot;almost&quot; perfect match.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Last modified:&lt;/em&gt; 14 March 2020&lt;/p&gt;

&lt;h1 id=&quot;how-does-it-work&quot;&gt;How does it work&lt;/h1&gt;
&lt;p&gt;Firstly &lt;a href=&quot;https://github.com/vgough/encfs&quot;&gt;&lt;strong&gt;Encfs&lt;/strong&gt;&lt;/a&gt; is a &lt;a href=&quot;https://en.wikipedia.org/wiki/EncFS&quot;&gt;&lt;em&gt;FUSE-based cryptographic filesystem&lt;/em&gt;&lt;/a&gt; which will transparently encrypt files using an arbitrary directory as storage. This way you will have two directories, one with the encrypted files (the one to be synchronized remotely) and the other (virtual)
will be mounted (with password) and will show the cleartext files.&lt;/p&gt;

&lt;p&gt;Encfs is considered &lt;a href=&quot;https://wiki.archlinux.org/index.php/EncFS&quot;&gt;&lt;em&gt;the simplest software if you want to try disk encryption on Linux.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Secondly, &lt;strong&gt;rsync&lt;/strong&gt; will keep the encrypted folder synchronized so that only the already encrypted files will be stored on the remote cloud (Dropbox, Google Drive, OneDrive, etc. or your own).&lt;/p&gt;

&lt;figure&gt;
&lt;img style=&quot;display: block; margin: auto;&quot; src=&quot;/assets/encfs.png&quot; /&gt;
&lt;figcaption&gt;How does it work&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Let’s start.&lt;/p&gt;

&lt;p&gt;NOTE: a probably better version in term of performance (not personally tested yet) is &lt;strong&gt;&lt;a href=&quot;https://github.com/rfjakob/gocryptfs&quot;&gt;gocryptfs&lt;/a&gt;&lt;/strong&gt;. (aspiring successor).&lt;/p&gt;

&lt;h2 id=&quot;0-installation&quot;&gt;&lt;strong&gt;0. Installation&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;from source -&amp;gt; &lt;a href=&quot;https://github.com/vgough/encfs&quot;&gt;https://github.com/vgough/encfs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;apt install encfs&lt;/li&gt;
  &lt;li&gt;pacman -Syyu encfs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-initialize-your-local-encrypted-folder&quot;&gt;&lt;strong&gt;1. Initialize your local encrypted folder&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;encfs ~/encrypted ~/cleartext
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then it will ask for &lt;em&gt;defailt&lt;/em&gt; or &lt;em&gt;paranoia&lt;/em&gt; mode, with the latter you choose the security parameters you want. (AES 256)&lt;/p&gt;

&lt;p&gt;This will create a &lt;code class=&quot;highlighter-rouge&quot;&gt;.encfs6.xml&lt;/code&gt; file in the directory. That file must be kept secret. And you have to copy it over other devices you want to have cleartext synchronization too.&lt;/p&gt;

&lt;h2 id=&quot;2-use-the-cleartext-folder&quot;&gt;&lt;strong&gt;2. Use the cleartext folder&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Now you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;~/cleartext&lt;/code&gt; folder and files will appear encrypted in the &lt;code class=&quot;highlighter-rouge&quot;&gt;~/encrypted&lt;/code&gt; folder.&lt;/p&gt;

&lt;h2 id=&quot;3-rsync-to-the-cloud&quot;&gt;&lt;strong&gt;3. rsync TO the cloud&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Now you can rsync the &lt;code class=&quot;highlighter-rouge&quot;&gt;~/encrypted&lt;/code&gt; folder to your cloud of choice with &lt;strong&gt;rsync&lt;/strong&gt; :&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync &lt;span class=&quot;nt&quot;&gt;-arvz&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--whole-file&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--progress&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; ~/encrypted/ user@domain:/home/mycloud/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And it’s done! Now only the encrypted files will be on your remote storage.&lt;/p&gt;

&lt;p&gt;Let’s see how to have multiple setups.&lt;/p&gt;
&lt;h1 id=&quot;on-another-machine&quot;&gt;&lt;strong&gt;On another machine&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&quot;1-copy-the-encfs6xml&quot;&gt;&lt;strong&gt;1. Copy the .encfs6.xml&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;.encfs6.xml&lt;/code&gt; file from the previous &lt;code class=&quot;highlighter-rouge&quot;&gt;~/cleartext&lt;/code&gt; to this machine &lt;code class=&quot;highlighter-rouge&quot;&gt;~/encrypted&lt;/code&gt; folder. (recreate your two folders in this machine)&lt;/p&gt;

&lt;h2 id=&quot;2-initialize-your-local-encrypted-folder&quot;&gt;&lt;strong&gt;2. Initialize your local encrypted folder&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;encfs ~/encrypted ~/cleartext
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we are going to syncronize the local &lt;code class=&quot;highlighter-rouge&quot;&gt;~/encrypted&lt;/code&gt; folder with the files from the cloud.&lt;/p&gt;

&lt;h2 id=&quot;3-rsync-from-the-cloud&quot;&gt;&lt;strong&gt;3. rsync FROM the cloud&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync &lt;span class=&quot;nt&quot;&gt;-arvz&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--whole-file&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--progress&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; user@domain:/home/mycloud/ ~/encrypted/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;4-add-a-file-and-sync&quot;&gt;&lt;strong&gt;4. add a file and sync&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Now try to create a new file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;~/cleartext/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Push to cloud
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync &lt;span class=&quot;nt&quot;&gt;-arvz&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--whole-file&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--progress&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; ~/encrypted/ user@domain:/home/mycloud/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;back from the first machine
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync &lt;span class=&quot;nt&quot;&gt;-arvz&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--whole-file&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--progress&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; user@domain:/home/mycloud/ ~/encrypted/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All your files are synchronized between the two machines, leaving only the encrypted files over the server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please feel free to make any comment! If anything is unclear, just write in the comment and I will update the post!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Carlo Alberto&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Jan 2020 00:00:00 +0100</pubDate>
        <link>https://carloalbertoscola.it//2020/security/linux/network/Rsync-Encfs-remote-cloud-backup-how-to/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2020/security/linux/network/Rsync-Encfs-remote-cloud-backup-how-to/</guid>
        
        <category>network</category>
        
        <category>backup</category>
        
        <category>rsync</category>
        
        <category>encfs</category>
        
        <category>cloud</category>
        
        
        <category>security</category>
        
        <category>linux</category>
        
        <category>network</category>
        
      </item>
    
      <item>
        <title>Full and Responsible disclosure, the debate.</title>
        <description>&lt;h1 id=&quot;vulnerability-disclosure---ethical-hacking&quot;&gt;&lt;strong&gt;&lt;center&gt;Vulnerability disclosure - Ethical Hacking&lt;/center&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;responsible-vs-full-vulnerability-disclosure&quot;&gt;&lt;center&gt;Responsible vs Full vulnerability disclosure&lt;/center&gt;&lt;/h2&gt;
&lt;h3 id=&quot;the-never-ending-debate&quot;&gt;&lt;center&gt;The never ending debate&lt;/center&gt;&lt;/h3&gt;

&lt;div&gt;
&lt;span class=&quot;read-time-txt&quot;&gt;Reading time:&lt;/span&gt;
&lt;span class=&quot;read-time-val&quot;&gt;


  6 mins

&lt;/span&gt;
	 
&lt;p class=&quot;read-time-date&quot;&gt;
	&lt;script&gt;
	var today = new Date();
	weekday = [&quot;Sunday&quot;, &quot;Monday&quot;,&quot;Tuesday&quot;, &quot;Wednesday&quot;,&quot;Thursday&quot;, &quot;Friday&quot;,&quot;Saturday&quot;];
	mlist = [ &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot; ];
	var time = today.getHours() + &quot;:&quot; + today.getMinutes();
	var d = weekday[today.getDay()] + &quot; &quot; +today.getDate() + &quot; &quot; + mlist[today.getMonth()] + &quot; &quot; + today.getFullYear();
	document.write(d + &quot;  &quot; + time);
	&lt;/script&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;figure&gt;
&lt;img style=&quot;display: block; margin: auto;&quot; src=&quot;/assets/windows-zero-day-twitter.png&quot; /&gt;
&lt;figcaption&gt;&quot;Microsoft Windows zero-day disclosed on Twitter, again&quot; ZDnet &lt;a href=&quot;https://www.zdnet.com/article/microsoft-windows-zero-day-disclosed-on-twitter-again/&quot;&gt;here &lt;/a&gt;&lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;p&gt;Software and hardware vulnerabilities are found every day, this means that especially we, users, are under the constant risk of losing the most important asset we have today, &lt;strong&gt;information&lt;/strong&gt;. Cyber Security vulnerabilities are weaknesses and flaws in computer systems, they can be of many different types and can be exploited in many different ways, ultimately exposing the system to external, probably malicious, threats. Vulnerabilities can aim to take down systems availability, ex-filtrate credentials, user data, secrets documents and much more.&lt;/p&gt;

&lt;p&gt;Security has been underrated by a large number of companies and SW houses for quite a while, it is mainly thanks to the more sensitization that in the recent years more focus has started to been put into applying better security policies and best practices. Although the main problem is that &lt;strong&gt;absolute security is hard if not impossible to achieve&lt;/strong&gt;, it is costly, it is broad and it is complex to implement requiring deep technical knowledge.      &lt;br /&gt;
Security is also taught to be as a “&lt;strong&gt;&lt;em&gt;process&lt;/em&gt;&lt;/strong&gt;”, in fact, following a structured way, adopting the correct mindset, from the various stages of planning and design to the multiple stages of implementation and testing is one of the best ways to decrease risks for businesses and users.&lt;/p&gt;

&lt;p&gt;The Secure Software Development Life Cycle (SDLC) is an example of such a framework that “help discover and reduce vulnerabilities early, effectively building security in it” [1]. Unfortunately, it is very easy for programmers to make errors, and those commonly turn out as vulnerabilities, found by hackers and bug hunters for example. Bulletins, CERTs, forums, mailing lists and social media are the most used means for vulnerability reporting.&lt;/p&gt;

&lt;p&gt;When it comes to vulnerabilities disclosure the topic is controversial in many ways that a clear solution is not easily pointed out. First of all, what are the types of vulnerability disclosure?&lt;/p&gt;

&lt;p&gt;Mainly, who finds a vulnerability can usually go for three options: no disclosure, &lt;em&gt;responsible disclosure&lt;/em&gt; and &lt;em&gt;full disclosure&lt;/em&gt;. The last two are the most debated since they involve different course of action for the company who needs to fix the vulnerability. Every one of the two has different pros that are backed up by competent and respected people in the field.&lt;/p&gt;

&lt;h3 id=&quot;the-responsible-disclosure&quot;&gt;The Responsible Disclosure&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Responsible disclosure&lt;/strong&gt; is essentially a way to give companies a chance to patch the security issue before the vulnerability is disclosed to the public. This involves an agreement between the two parties, in which on one side an amount of time is given to the company to fix the problem and on the other, the finder of the vulnerability agrees on not disclosing any details about it. Often it may require collaboration between the two to explain the issue and find the correct way of fixing it.&lt;/p&gt;

&lt;p&gt;Responsible disclosure is often pointed out as the preferred “ethical way to go” because it avoids putting unexpectedly out into the wild the potential tools for attacking unpatched versions of the software. This involves that companies &lt;strong&gt;do want&lt;/strong&gt; to know if there exists actual vulnerabilities in their software and are ready to take action and develop security updates.&lt;/p&gt;

&lt;p&gt;Unfortunately that is not always the case, in fact, at times the “&lt;em&gt;desire by organizations to know about their vulnerabilities is not always matched by a willingness to act on the information. This is one of the issues at the heart of the disclosure debate.&lt;/em&gt;” [2]&lt;/p&gt;

&lt;p&gt;Sometimes companies can also threaten legal actions against researchers who find out vulnerabilities in their products, that is another aspect that leads to full disclosure, in fact, not every organization employs &lt;em&gt;Bug Bounty&lt;/em&gt; programs which legally allows and stimulates researchers to find out bugs in production environments.&lt;/p&gt;

&lt;p&gt;To let more researchers find vulnerabilities, organizations should establish &lt;strong&gt;easier responsible disclosure processes and create preferential channels for faster responses&lt;/strong&gt;. That could be quite hard since all the security aspects do not bring direct benefits and income to the company, thus they tend to delay such matters.&lt;/p&gt;

&lt;p&gt;On the other hand &lt;em&gt;Travis Ormandy&lt;/em&gt;, the Google &lt;em&gt;Project Zero&lt;/em&gt; researcher uncovered in September 2019 a security bug in the famous &lt;strong&gt;Lastpass&lt;/strong&gt; password manager [3]. The bug could allow an attacker to ex-filtrate user’s previously used password from their browser. The responsible disclosure allowed Lastpass to immediately recover, fix the bug and roll the update making people safer before they even knew could be at risk.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;BlueKeep&lt;/em&gt;&lt;/strong&gt; vulnerability reported by Microsoft on May 2019 is another case of responsible disclosure which helped the organization rolling out a security update before going public with all the details.&lt;/p&gt;

&lt;p&gt;These are a good example of how useful and safe could the responsible disclosure be, even if the major problem remains the amount of &lt;em&gt;outdated&lt;/em&gt; computers and applications still running.&lt;/p&gt;

&lt;h3 id=&quot;full-disclosure&quot;&gt;Full disclosure&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Full disclosure&lt;/strong&gt; is on the other hand when someone discovers a vulnerability and without reporting it first to the organization, he publishes it on the Internet through social networks or mailing lists. The main intent of the researcher is to &lt;strong&gt;spur companies to act immediately&lt;/strong&gt; and putting them in a potential disadvantageous situation helps to reach the goal. Furthermore, full disclosure will worsen the organization’s reputation and the only thing that can be done to get back is to fastly develop security updates.&lt;/p&gt;

&lt;p&gt;This has multiple side effects, &lt;strong&gt;the company must now address the issue as soon as possible&lt;/strong&gt; (is a good thing) but &lt;strong&gt;it is racing against attackers&lt;/strong&gt; who want to develop a working exploit to take advantage of the unpatched systems.&lt;/p&gt;

&lt;p&gt;This means the company is under bigger pressure but now is obliged to deal with it in the shortest time possible, which means there isn’t enough time to go thoroughly into the issue and a simpler workaround solution is the first thing to come up. That is a downside though, since quickest solutions are often the worse ones, and there is the risk to add other types of issues while trying to fix the previous one in the first place.&lt;/p&gt;

&lt;p&gt;In fact, &lt;em&gt;Mark Miller&lt;/em&gt;, director of &lt;em&gt;Microsoft Security Response Center&lt;/em&gt; is pro responsible disclosure and points out that “responsible disclosure, while not perfect, doesn’t increase risk as full disclosure can. Generally, responsible disclosure benefits everyone involved by providing the best possible protection for customers without forcing vendors into sacrificing quality or security or introducing additional risk.” [4]&lt;/p&gt;

&lt;p&gt;It is very common indeed that researchers alert the companies of actual vulnerabilities and that those companies do not answer at all, or even worse, as it happened to &lt;em&gt;Troy Hunt&lt;/em&gt;, the same company’s Twitter page has blocked the researcher along with his tweets about an &lt;em&gt;insecure direct object reference&lt;/em&gt; vulnerability discovery. The vulnerability allows an attacker to ex-filtrate data of each user registered on the website. [5] Troy also pointed out how difficult it has been to reach to organizations for vulnerabilities reporting. This aspect contributes to choose full disclosure.&lt;/p&gt;

&lt;p&gt;On the other hand, another big example, this time in favour of responsible disclosure, was the one in 2017 of &lt;strong&gt;&lt;em&gt;Meltdown and Spectre&lt;/em&gt;&lt;/strong&gt;, hardware vulnerabilities in central processing units (CPU) that exploit the “speculative execution”, a feature designed to improve performance of modern Intel, AMD, and ARM processors. The vulnerabilities (dated back to as far as 1995) were critical and allowed an attacker to read memory from the secure kernel space. The researchers behind it understood that the immediate future impact of this vulnerability was catastrophic with full disclosure, allowing attackers to impact almost every desktop, server, cloud, mobile device around the world. [6] Researchers used the responsible disclosure and worked with the organizations to help mitigate the issues. After the patches were rolled out, they released the PoC exploit code. This is an example of how impact less could be a responsible disclosure instead of a full disclosure since the main interest is protecting the users&lt;/p&gt;

&lt;p&gt;Although industry thought leaders like &lt;em&gt;Bruce Schneier&lt;/em&gt; argues that full disclosure provokes an immediate urgent response from organizations that otherwise, very probably, would have taken the issue very lightly. [7]&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It wasn’t until researchers published complete details of the vulnerabilities that the software companies started fixing them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And about responsible disclosure &lt;em&gt;Schneier&lt;/em&gt; says that “&lt;strong&gt;&lt;em&gt;it remains a good idea only as long as full disclosure is the threat.&lt;/em&gt;&lt;/strong&gt;” with which I agree with.&lt;/p&gt;

&lt;p&gt;I think that responsible disclosure could be the right starting point, both ethically and consequences-wise, as soon as the company cooperates and fulfills his duty to quickly patch the vulnerabilities. In any other case, if the organization refuses to cooperate, or if the organization takes too much unmotivated time, the threat to go full disclosure is more than justified. If an individual wants to help the society and be ethical, the goal is to improve the general awareness and security of users, not to let big companies grow their profit without even trying to protect their first income source.&lt;/p&gt;

&lt;p&gt;Another aspect to consider is that undisclosed vulnerabilities or &lt;em&gt;zero days&lt;/em&gt; are worth huge amounts of money on the black markets. That is another factor that, ethic aside, could change a researcher’s mind. Prices for zero-days can easily go from &lt;code class=&quot;highlighter-rouge&quot;&gt;$10'000&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;$2'500'000&lt;/code&gt; and more according to &lt;strong&gt;&lt;em&gt;Zerodium&lt;/em&gt;&lt;/strong&gt; [8] which is an exploit acquisition platform.&lt;/p&gt;

&lt;p&gt;A different example was the big windows hacking tools leak from the NSA by the &lt;em&gt;Shadow Brokers&lt;/em&gt; hacking group [9], in this case, ready and working exploits for zero-day vulnerabilities went directly public. This resulted in an important race in which hackers took advantage and developed different malware and ransomware based on the ready exploits. It is the example of the infamous &lt;strong&gt;&lt;em&gt;Wannacry&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Petya&lt;/em&gt;&lt;/strong&gt; ransomware which caused several important damages to businesses and public services around the world. These ransom exploited the &lt;em&gt;EthernalBlue&lt;/em&gt; vulnerability released in 2017 [10], Microsoft quickly developed security updates, but not every device gets updated immediately and so the ransomware campaign succeeded very well.&lt;/p&gt;

&lt;p&gt;There seems to be no clear answer to the debate since the various motivations can be all seen with some level of agreement&lt;/p&gt;

&lt;p&gt;Thanks for reading&lt;/p&gt;

&lt;p&gt;/Carlo Alberto&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;[1] https://dzone.com/articles/ssdlc-101-what-is-the-secure-software-development&lt;/li&gt;
  &lt;li&gt;[2] https://www.csoonline.com/article/3259882/has-responsible-disclosure-won-the-debate.html&lt;/li&gt;
  &lt;li&gt;[3] https://www.zdnet.com/article/lastpass-bug-leaks-credentials-from-previous-site/&lt;/li&gt;
  &lt;li&gt;[4] https://www.csoonline.com/article/2121631/microsoft–responsible-vulnerability-disclosure-protects-users.html&lt;/li&gt;
  &lt;li&gt;[5] https://www.troyhunt.com/kids-pass-just-reminded-us-how-hard-responsible-disclosure-is/&lt;/li&gt;
  &lt;li&gt;[6] https://www.recordedfuture.com/meltdown-spectre-vulnerabilities/&lt;/li&gt;
  &lt;li&gt;[7] https://www.schneier.com/blog/archives/2007/01/debating_full_d.html&lt;/li&gt;
  &lt;li&gt;[8] https://zerodium.com/program.html&lt;/li&gt;
  &lt;li&gt;[9] https://www.zdnet.com/article/shadow-brokers-latest-file-drop-shows-nsa-targeted-windows-pcs-banks/&lt;/li&gt;
  &lt;li&gt;[10] https://www.zdnet.com/article/why-the-fixed-windows-eternalblue-exploit-wont-die/&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 29 Sep 2019 00:00:00 +0200</pubDate>
        <link>https://carloalbertoscola.it//2019/security/vulnerability/Full-and-Responsible-vulnerability-disclosure/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2019/security/vulnerability/Full-and-Responsible-vulnerability-disclosure/</guid>
        
        
        <category>security</category>
        
        <category>vulnerability</category>
        
      </item>
    
      <item>
        <title>What is Subdomain Takeover and how to defend.</title>
        <description>&lt;h1 id=&quot;-subdomain-takeover-and-how-to-avoid-it-&quot;&gt;&lt;strong&gt;&lt;center&gt; SubDomain Takeover and how to avoid it. &lt;/center&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;how-to-spot-unused-subdomains&quot;&gt;&lt;strong&gt;&lt;center&gt;How to spot unused subdomains&lt;/center&gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Note, this is a very high level introduction and overview of what a subdomain takeover is, with some examples happened against known websites.&lt;/p&gt;

&lt;h3 id=&quot;what-is-dns-zone-delegation&quot;&gt;What is DNS Zone Delegation&lt;/h3&gt;

&lt;p&gt;DNS is a  hierarchy structure made of a series of delegations: from the root (&lt;strong&gt;.&lt;/strong&gt;) zone, to (&lt;strong&gt;.com&lt;/strong&gt;) zone (alias &lt;strong&gt;Top Level Domain&lt;/strong&gt; or &lt;strong&gt;TLD&lt;/strong&gt;), to (&lt;strong&gt;example.com&lt;/strong&gt;) zone. How are all the zones linked? Delegation.&lt;/p&gt;

&lt;p&gt;In fact the &lt;strong&gt;.com&lt;/strong&gt; &lt;em&gt;delegate&lt;/em&gt; the authority of &lt;strong&gt;example.com&lt;/strong&gt; to its own &lt;em&gt;zone&lt;/em&gt;.&lt;/p&gt;
&lt;figure&gt;
&lt;img style=&quot;display: block; margin: auto;&quot; src=&quot;/assets/zone-delegation-dns.gif&quot; /&gt;
&lt;figcaption&gt;Figure 1. from &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc771640(v=ws.11)&quot;&gt;here &lt;/a&gt;&lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;p&gt;DNS provide options to divide name-spaces into one or more zones, which can be stored or replicated to others DNS servers. If you want to create additional zones keep in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Do you want to delegate part of DNS management to another location?&lt;/li&gt;
  &lt;li&gt;Do you want to distribute traffic, load balance, have redundancy and ultimately to improve resolutions?&lt;/li&gt;
  &lt;li&gt;Do you want to extend name-spaces by adding multiple subdomains at once?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember that for each new zone that you create, you need delegation records in other zones that point to the authoritative DNS servers for the new zone.&lt;/p&gt;

&lt;p&gt;When a standard primary zone is first created, all the resource record information is stored as a text file on a single DNS server. This server acts as the primary master for the zone. Zone information can be replicated to other DNS servers to improve fault tolerance and server performance.&lt;/p&gt;

&lt;h2 id=&quot;subdomain-to-a-new-zone&quot;&gt;Subdomain to a new zone&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://bestrockers.ddns.net/res/zone-deleg.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;Figure 1.&lt;/em&gt;&lt;/strong&gt; shows a DNS hierarchy for a new &lt;strong&gt;&lt;em&gt;example.microsoft.com&lt;/em&gt;&lt;/strong&gt; domain zone (&lt;strong&gt;ns.1.us.example.microsoft.com&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;To make authoritative DNS servers know about the new delegated zone, two DNS resource record are required:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A name-server NS RR to advertise that &lt;strong&gt;&lt;a href=&quot;http://ns.1.us.example.microsoft.com&quot;&gt;ns.1.us.example.microsoft.com&lt;/a&gt;&lt;/strong&gt; is an authoritative DNS server for the delegated domain.&lt;/li&gt;
  &lt;li&gt;A host (A or AAAA) RR to necessarily resolve the name to its IP address.
Ref: https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc771640(v=ws.11)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;the-subdomain-takeover&quot;&gt;&lt;strong&gt;The Subdomain Takeover&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;It is considered a high severity threat and boils down to the registration of a domain by somebody else (with bad intentions) in order to gain control over one or more (sub)domains. This attack vector could lead to authentication bypass for example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://hackerone.com/reports/172137&quot;&gt;Authentication bypass on sso.ubnt.com via subdomain takeover of ping.ubnt.com&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is not a standard vulnerability, but a chain of two more exotic vulnerabilities leading to a full authentication bypass of your SSO login system at &lt;strong&gt;sso.ubnt.com&lt;/strong&gt; (via account.ubnt.com). The root cause of this authentication bypass is two-fold:&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;Subdomain &lt;strong&gt;ping.ubnt.com&lt;/strong&gt; was pointing to Amazon Cloudfront CDN, but the hostname was not registered there anymore. This allowed me to fully takeover this domain. It is now serving content of my own webserver, both over http and https.&lt;/li&gt;
    &lt;li&gt;The session cookie of your SSO subdomain &lt;strong&gt;sso.ubnt.com&lt;/strong&gt; is (deliberately?) shared with all &lt;strong&gt;https://*.ubnt.com&lt;/strong&gt; subdomains through its “domain=.ubnt.com” attribute. This allows leakage of this high-value session cookie to the overtaken subdomain &lt;strong&gt;https://ping.ubnt.com&lt;/strong&gt; in all modern browsers.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;

&lt;p&gt;Let’s say a business (e-commerce) is using &lt;strong&gt;&lt;a href=&quot;http://example.com&quot;&gt;example.com&lt;/a&gt;&lt;/strong&gt; as primary domain. E-commerce providers (e.g. Shopify, BigCommerce, Magento, Yokart, Big Kartel) will give you a domain for your store like &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;http://shopexample.ecommerceplatform.com&quot;&gt;shopexample.ecommerceplatform.com&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; but you want to use your own domain for example &lt;strong&gt;shop.example.com.&lt;/strong&gt; You have two options.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A &lt;strong&gt;301/302 HTTP redirect&lt;/strong&gt; from &lt;a href=&quot;http://shop.example.com&quot;&gt;shop.example.com&lt;/a&gt; to the domain of the ecommerce platform but will replace the URL in the browser URL bar.&lt;/li&gt;
  &lt;li&gt;A &lt;strong&gt;CNAME DNS record&lt;/strong&gt; that delegate DNS resolution directly to the e-commerce provider. Here the URL in the bar remain unchanged.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;if one year later you dismiss the subscription, it can happen to &lt;strong&gt;forget to update or simply remove the CNAME record in your DNS zone file.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;remove-the-cname-record-to-avoid-subdomain-takeover&quot;&gt;&lt;strong&gt;Remove the CNAME record to avoid Subdomain Takeover&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;When you don’t remove the CNAME record from your DNS zone file, &lt;strong&gt;anybody&lt;/strong&gt; can register a new store in the same e-commerce platform suppliers environment &lt;strong&gt;and therefore aim to takeover &lt;a href=&quot;http://shop.example.com/&quot;&gt;shop.example.com&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Rule N.1:  Check DNS configurations for subdomains pointing at services not in use.&lt;/p&gt;

&lt;h2 id=&quot;cloud-providers-and-cdns&quot;&gt;Cloud providers and CDNs&lt;/h2&gt;

&lt;p&gt;Example. Amazon CloudFront (CDN service) works with the concept of “distributions” (set of static files hosted on the Amazon Cloudfront Edge servers.). After creating a new distribution a new domain name is randomly generated like &lt;em&gt;&lt;a href=&quot;http://r42opslbajrw244.cloudfront.net&quot;&gt;r42opslbajrw244.cloudfront.net&lt;/a&gt; but:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;No 1:1 mapping, no dedicated IP address for every distribution but m:n mapping (virtual hosting in Edge servers). HTTP Host Header tells the server which hostname to serve.&lt;/p&gt;

&lt;p&gt;If you want to use &lt;a href=&quot;http://shop.example.com&quot;&gt;shop.example.com&lt;/a&gt; then a CNAME record like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;shop.example.com.	600	IN	CNAME	r42opslbajrw244.cloudfront.net.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;with an Alternate Domain Name set on Cloudfront for shop.example.com&lt;/p&gt;

&lt;h1 id=&quot;what-does-this-mean&quot;&gt;WHAT DOES THIS MEAN?&lt;/h1&gt;

&lt;p&gt;If an attacker can spot a subdomain unused with improper (but still valid) DNS configuration, he can register a new domain with the same name and being pointed to the “takeovered” one. He can trick users to visit the domain as they will not know if they are surfing an illegitimate website, an an attacker can easily steal an &lt;strong&gt;authentication cookie&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;usagov-vulnerable-to-subdomain-takeover&quot;&gt;&lt;a href=&quot;http://usa.gov/&quot;&gt;USA.gov&lt;/a&gt; vulnerable to Subdomain Takeover&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;suspicious subdomain &lt;a href=&quot;http://api.usa.gov/&quot;&gt;api.usa.gov&lt;/a&gt; with 404 HTTP code&lt;/li&gt;
  &lt;li&gt;the &lt;a href=&quot;http://api.usa.gov/&quot;&gt;api.usa.gov&lt;/a&gt; points to CNAME record &lt;a href=&quot;http://api-usa-gov.domains.api.data.gov/&quot;&gt;api-usa-gov.domains.api.data.gov&lt;/a&gt; which in turn has A records pointing to AWS servers.&lt;/li&gt;
  &lt;li&gt;subdomain not registered in GitHub pages anymore.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ref: &lt;a href=&quot;https://blog.sweepatic.com/usa-secured-by-sweepatic/&quot;&gt;https://blog.sweepatic.com/usa-secured-by-sweepatic/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;subdomain-enumeration&quot;&gt;&lt;strong&gt;Subdomain Enumeration&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;how-can-we-spot-subdomains&quot;&gt;How can we spot subdomains?&lt;/h3&gt;

&lt;p&gt;Subdomain enumeration is an important part of the reconnaissance phase in the &lt;strong&gt;cyber kill chain.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Subdomain enumeration is the process of finding valid (resolvable) subdomains for one or more domain(s). Unless the DNS server exposes a full DNS zone (via &lt;a href=&quot;https://cr.yp.to/djbdns/axfr-notes.html&quot;&gt;AFXR&lt;/a&gt; or a “mechanism for replicating DNS data across DNS servers”), it is really hard to obtain a list of existing subdomains.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dictionary of common names (no strange names)&lt;/li&gt;
  &lt;li&gt;crawl second level domain to find links to subdomains (google dorks is faster)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Facebook Certificate Transparency&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.facebook.com/tools/ct&quot;&gt;https://developers.facebook.com/tools/ct&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;let you subscribe to every change in a domain /subdomain certificate&lt;/p&gt;

&lt;h3 id=&quot;tools&quot;&gt;&lt;strong&gt;Tools&lt;/strong&gt;&lt;/h3&gt;

&lt;h4 id=&quot;dns-zone-transfer-very-uncommon-nowadays&quot;&gt;DNS Zone Transfer (very uncommon nowadays)&lt;/h4&gt;

&lt;p&gt;AXFR request directly on the DNS server:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dig @ns.example.com example=.com AXFR
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The best practice advises administrators to allow AXFR requests only from authorized DNS servers, so the above technique will probably not work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NSEC walking attack&lt;/strong&gt;, which enumerates DNSSEC-signed zones. (&lt;a href=&quot;https://nmap.org/nsedoc/scripts/dns-nsec-enum.html&quot;&gt;https://nmap.org/nsedoc/scripts/dns-nsec-enum.html&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;google-dorks&quot;&gt;Google Dorks&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;site:example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;rapid7-dns-dataset&quot;&gt;Rapid7 DNS dataset&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://opendata.rapid7.com/sonar.fdns_v2/&quot;&gt;https://opendata.rapid7.com/sonar.fdns_v2/&lt;/a&gt; provide a large dataset of domains found on the internet.&lt;/p&gt;

&lt;p&gt;To skim and search for:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zcat snapshop.json.gz | 
jq -r 'if (.name | test(&quot;\\.example\\.com$&quot;)) then .name else empty end'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;jq&lt;/strong&gt; (&lt;a href=&quot;https://stedolan.github.io/jq/&quot;&gt;https://stedolan.github.io/jq/&lt;/a&gt;) is like &lt;strong&gt;sed&lt;/strong&gt; for large json data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or just use —&amp;gt; &lt;a href=&quot;https://dnsdumpster.com/&quot;&gt;https://dnsdumpster.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;subject-alternative-name&quot;&gt;Subject Alternative Name&lt;/h2&gt;
&lt;p&gt;Some tools for finding subdomains:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://censys.io/&quot;&gt;Censys.io&lt;/a&gt; —&amp;gt;  &lt;a href=&quot;https://censys.io/certificates?q=.example.com&quot;&gt;https://censys.io/certificates?q=.example.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://crt.sh/&quot;&gt;Crt.sh&lt;/a&gt; —&amp;gt; &lt;a href=&quot;https://crt.sh/?q=%25.example.com&quot;&gt;https://crt.sh/?q=%.example.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aboul3la/Sublist3r&quot;&gt;Sublist3r&lt;/a&gt; —&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;python [sublist3r.py](http://sublist3r.py/) -d [example.com](http://example.com/)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Refs at &lt;a href=&quot;https://blog.sweepatic.com/art-of-subdomain-enumeration/&quot;&gt;https://blog.sweepatic.com/art-of-subdomain-enumeration/&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;More coming soon! Stay cool! and safe ;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please feel free to make any comment! If anything is unclear, just write in the comment and I will update the post!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Carlo Alberto&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Sep 2019 00:00:00 +0200</pubDate>
        <link>https://carloalbertoscola.it//2019/web/security/SubDomain-Takeover/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2019/web/security/SubDomain-Takeover/</guid>
        
        
        <category>web</category>
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>Network Function Virtualization, Middleboxes and Cloud Load Balancing</title>
        <description>&lt;h1 class=&quot;no_toc&quot; id=&quot;nfv-cloud-and-middleboxes&quot;&gt;&lt;strong&gt;&lt;center&gt;NFV, Cloud and Middleboxes&lt;/center&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 class=&quot;no_toc&quot; id=&quot;in-data-plane-recovery&quot;&gt;&lt;strong&gt;&lt;center&gt;In-data-plane recovery&lt;/center&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 class=&quot;no_toc&quot; id=&quot;-research-papers-review-and-summary-&quot;&gt;&lt;center&gt; Research papers review and summary &lt;/center&gt;&lt;/h3&gt;
&lt;h3 class=&quot;no_toc&quot; id=&quot;-part-2--here-link-to-part-1--&quot;&gt;&lt;center&gt; PART 2.  &lt;a href=&quot;/2019/network/sdn/software-defined-networking-introduction/&quot;&gt;Here Link to part 1.&lt;/a&gt;  &lt;/center&gt;&lt;/h3&gt;
&lt;p&gt;In &lt;strong&gt;&lt;a href=&quot;/2019/network/sdn/python/software-defined-networking-nfv-example-with-pox-click-openflow/&quot;&gt;this post&lt;/a&gt;&lt;/strong&gt; there is a practical step-by-step project with POX SDN, OpenFlow, Click and NFV.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt;
&lt;div id=&quot;inline_toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#what-about-middleboxes&quot; id=&quot;markdown-toc-what-about-middleboxes&quot;&gt;&lt;strong&gt;What about MIDDLEBOXES?&lt;/strong&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#contributions&quot; id=&quot;markdown-toc-contributions&quot;&gt;Contributions&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#outsourcing-middleboxes-to-the-cloud-any-benefits&quot; id=&quot;markdown-toc-outsourcing-middleboxes-to-the-cloud-any-benefits&quot;&gt;&lt;strong&gt;Outsourcing Middleboxes to the cloud, any benefits?&lt;/strong&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#contributions-1&quot; id=&quot;markdown-toc-contributions-1&quot;&gt;Contributions&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-network-function-virtualization-platform&quot; id=&quot;markdown-toc-a-network-function-virtualization-platform&quot;&gt;&lt;strong&gt;A Network Function Virtualization Platform&lt;/strong&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#contributions-2&quot; id=&quot;markdown-toc-contributions-2&quot;&gt;Contributions&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cloud-load-balancing&quot; id=&quot;markdown-toc-cloud-load-balancing&quot;&gt;&lt;strong&gt;Cloud load balancing&lt;/strong&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#contributions-3&quot; id=&quot;markdown-toc-contributions-3&quot;&gt;Contributions&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#connectivity-recovery-directly-in-the-data-plane&quot; id=&quot;markdown-toc-connectivity-recovery-directly-in-the-data-plane&quot;&gt;&lt;strong&gt;Connectivity recovery directly in the Data-Plane&lt;/strong&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#contributions-4&quot; id=&quot;markdown-toc-contributions-4&quot;&gt;Contributions&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#here-link-to-part-1&quot; id=&quot;markdown-toc-here-link-to-part-1&quot;&gt;&lt;strong&gt;Here link to PART 1&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#references&quot; id=&quot;markdown-toc-references&quot;&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;hr /&gt;

&lt;div&gt;
&lt;span class=&quot;read-time-txt&quot;&gt;Reading time:&lt;/span&gt;
&lt;span class=&quot;read-time-val&quot;&gt;


  9 mins

&lt;/span&gt;
	 
&lt;p class=&quot;read-time-date&quot;&gt;
	&lt;script&gt;
	var today = new Date();
	weekday = [&quot;Sunday&quot;, &quot;Monday&quot;,&quot;Tuesday&quot;, &quot;Wednesday&quot;,&quot;Thursday&quot;, &quot;Friday&quot;,&quot;Saturday&quot;];
	mlist = [ &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot; ];
	var time = today.getHours() + &quot;:&quot; + today.getMinutes();
	var d = weekday[today.getDay()] + &quot; &quot; +today.getDate() + &quot; &quot; + mlist[today.getMonth()] + &quot; &quot; + today.getFullYear();
	document.write(d + &quot;  &quot; + time);
	&lt;/script&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;what-about-middleboxes&quot;&gt;&lt;strong&gt;What about MIDDLEBOXES?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Networks need middleboxes like IDS, Firewalls, Concentrator, Proxy for further packet processing, fact is that interconnecting and manually configuring the routing policies is &lt;strong&gt;hard and error prone&lt;/strong&gt;. An SDN approach could greatly improve the flexibility but does not offer the required L2/L3 methods out-of-the-box.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SIMPLE&lt;/strong&gt;’s &lt;a class=&quot;citation&quot; href=&quot;#simple&quot;&gt;[1]&lt;/a&gt; aim is to &lt;strong&gt;simplify the policy enforcement&lt;/strong&gt; for an efficient &lt;strong&gt;traffic steering&lt;/strong&gt; in the network. It faces some challenges like &lt;em&gt;composition&lt;/em&gt;, &lt;em&gt;load balancing&lt;/em&gt; and &lt;em&gt;packet modifications&lt;/em&gt;. Packets in the network need to follow specific middleboxes paths, they can flow in different direction and can &lt;strong&gt;raise ambiguous forwarding decisions&lt;/strong&gt;, also Middleboxes can modify part of packets, making it harder for the SDN to determine the right paths.&lt;/p&gt;

&lt;p&gt;This is what SIMPLE addresses with the use of a &lt;strong&gt;unified resource management&lt;/strong&gt; together with a dynamic packet handler which automatically adapts rules to middleboxes packets modifications.&lt;/p&gt;

&lt;p&gt;SIMPLE is composed of &lt;em&gt;ResMgr&lt;/em&gt; which takes the network as input and outputs a set of of rules, the &lt;em&gt;DynHandler&lt;/em&gt; which keeps mappings between packets and a &lt;em&gt;RuleGen&lt;/em&gt; which actually generate the configurations. It is important to note that all the operations are resource limited by the amount of CPU, memory and especially switches TCAM flow table size. In fact the optimization decomposition is part of the challenges SIMPLE try to address with an &lt;strong&gt;offline pruning stage followed by a more frequent online LP calculation&lt;/strong&gt; when traffic pattern changes. SIMPLE showed to have very low controller overhead but can gain over 6 times more performances on load balancing compared with today implementations.&lt;/p&gt;

&lt;h4 id=&quot;contributions&quot;&gt;Contributions&lt;/h4&gt;
&lt;p&gt;The aim of the paper is to propose &lt;strong&gt;a way to relieve network operators from thinking where to apply policies and instead focusing on what&lt;/strong&gt;. In fact SIMPLE &lt;strong&gt;does not change anything in the middleboxes&lt;/strong&gt;, it is only allowed to configure the SDN switches.&lt;/p&gt;

&lt;p&gt;The basic policy element here is the &lt;em&gt;PolicyChain&lt;/em&gt; which is the set of requirements for a specific traffic class that must undergo a specific middleboxes path. Great work is done by the &lt;em&gt;DynHandler&lt;/em&gt; to map incoming/outgoing packets using &lt;em&gt;payload similarity&lt;/em&gt; and &lt;em&gt;flow correlation&lt;/em&gt; techniques (achieving 95% of marching accuracy). This can happen because first few packets of each new flow are sent to the DynHandler for evaluation.&lt;/p&gt;

&lt;p&gt;The ambiguous forwarding is greatly solved with the use of &lt;strong&gt;&lt;em&gt;SwitchTunnel&lt;/em&gt;&lt;/strong&gt; together with a &lt;em&gt;ProcState&lt;/em&gt; and &lt;em&gt;Tag&lt;/em&gt; element. Even though these approach are not new, here they are firstly applied to middleboxes. These allow switches to understand in which “state” a packet is and deal with the right forwarding decision (ex: when a packet has to go backwards two or more times to the same switch).&lt;/p&gt;

&lt;p&gt;Failures and Policy changes are dealt with the pre-computation of a set of configurations (like a &lt;strong&gt;fast-reroute&lt;/strong&gt;).&lt;/p&gt;

&lt;h2 id=&quot;outsourcing-middleboxes-to-the-cloud-any-benefits&quot;&gt;&lt;strong&gt;Outsourcing Middleboxes to the cloud, any benefits?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;In large networks today the &lt;strong&gt;number of middleboxes deployed is very high&lt;/strong&gt;, expensive to manage and brings difficult manual policy management. Middleboxes are used for security reasons like IDS, Firewalls, performance improving like Proxies and caching and finally for reducing bandwidth usage costs with WAN optimizers. Hardware has to be replaced on average every five years and costs can rise very high depending on the network scale, &lt;strong&gt;for example for a network of 2850 routers, around 1940 middleboxes have been counted&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The paper shows &lt;strong&gt;APLOMB&lt;/strong&gt; &lt;a class=&quot;citation&quot; href=&quot;#midd-outsourc&quot;&gt;[2]&lt;/a&gt;, a way of outsourcing such middlebox burden to the cloud along with advantages and disadvantages.
Middleboxes are often required some properties like &lt;strong&gt;being on-path&lt;/strong&gt;, choke points and local to an enterprise, but with outsourcing these requirements can be shifted.&lt;/p&gt;

&lt;figure&gt;
    &lt;img style=&quot;display: block; margin: auto; width: 60%; padding-top:25px&quot; src=&quot;/assets/aplomb1.png&quot; /&gt;
&lt;figcaption&gt;Figure 8. Fraction of network administrators who estimated misconfiguration, overload, or physical/electrical failure as the most common cause of middlebox failure. Figure from &lt;a href=&quot;https://www.semanticscholar.org/paper/Making-middleboxes-someone-else's-problem%3A-network-Sherry-Hasan/742c42f5cd7c1f195fa83c8c1611ee7e62c9c81f/figure/1&quot;&gt;here &lt;/a&gt; &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;p&gt;APLOMB aims to have the &lt;strong&gt;same functional equivalence as traditional deployments&lt;/strong&gt;, adding no complexity at the enterprise while, most importantly, &lt;strong&gt;maintaining an acceptable performance/latency overhead.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Paper shows latency differences between three approaches for relying traffic to Cloud Providers, but the DNS is chosen over the IP redirection because allows flows to be routed towards and from the same CP (Cloud Provider) POP.&lt;/p&gt;

&lt;p&gt;Substantially the CP provides the enterprise DNS resolution service and traffic from the Internet immediately reach the CP, and is then tunneled towards the enterprise. One or multiple (for scaling and load balancing) APLOMB gateways are deployed at the enterprise which are the endpoints connecting to the CP.&lt;/p&gt;

&lt;figure&gt;
    &lt;img style=&quot;display: block; margin: auto; width: 70%; padding-top:25px&quot; src=&quot;/assets/aplomb-dns.png&quot; /&gt;
&lt;figcaption&gt;Figure 9. DNS-based redirection minimizes latency and allows providers to control PoP selection for each request. Figure from &lt;a href=&quot;https://www.semanticscholar.org/paper/Making-middleboxes-someone-else's-problem%3A-network-Sherry-Hasan/742c42f5cd7c1f195fa83c8c1611ee7e62c9c81f/figure/7&quot;&gt;here &lt;/a&gt; &lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;p&gt;Evaluations have shown that on average 60% of the middleboxes can be outsourced with less than 5ms latency and low bandwidth increase.&lt;/p&gt;

&lt;h4 id=&quot;contributions-1&quot;&gt;Contributions&lt;/h4&gt;
&lt;p&gt;The paper points out an analysis whether outsourcing the deployment of middleboxes from large networks is feasible, convenient and simple. In fact it provides a study of pros and cons applied to &lt;strong&gt;57 real world deployments&lt;/strong&gt; along with a complete implementation and evaluation.&lt;/p&gt;

&lt;p&gt;The use of CP for middleboxes outsourcing &lt;strong&gt;may bring benefits to all sized businesses&lt;/strong&gt;, because the cost for maintaining and over-provisioning such infrastructure is quite high, especially for small and home offices.&lt;/p&gt;

&lt;p&gt;Paper shows &lt;strong&gt;different designs of traffic redirection&lt;/strong&gt; available and evaluate logical correctness and latency of each one, in fact APLOMB chose to use DNS redirection along with &lt;strong&gt;compression support in the APLOMB+ gateway&lt;/strong&gt; for better bandwidth usage.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Smart Redirection&lt;/em&gt; is a great feature introduced were to reduce latency, the path is not chosen to be the best from POP to the enterprise, instead it is &lt;em&gt;destination dependent&lt;/em&gt; and computed as e2e best latency path from user to POP to the enterprise.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Cloud controller&lt;/em&gt; acts as control plane and has a central role of optimizing redirection strategies, pushing policies to Middleboxes and dynamically scaling capacity in order to meet usage demands.&lt;/p&gt;

&lt;h2 id=&quot;a-network-function-virtualization-platform&quot;&gt;&lt;strong&gt;A Network Function Virtualization Platform&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The paper &lt;a class=&quot;citation&quot; href=&quot;#metron&quot;&gt;[3]&lt;/a&gt; presents &lt;strong&gt;&lt;em&gt;Metron&lt;/em&gt;&lt;/strong&gt;, a &lt;em&gt;Network Function Virtualization&lt;/em&gt; platform that allows to achieve very &lt;strong&gt;high resource utilization&lt;/strong&gt; in commodity server hardware and &lt;strong&gt;very high throughput&lt;/strong&gt; while inspecting traffic.&lt;/p&gt;

&lt;p&gt;It achieves so by &lt;strong&gt;offloading&lt;/strong&gt; part of the &lt;strong&gt;computation to the network device&lt;/strong&gt;, using &lt;strong&gt;smart tagging&lt;/strong&gt; for classifying traffic classes and utilizing those tags for quick &lt;strong&gt;hardware dispatching&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Indeed one of the biggest problem is when a packet arrives, &lt;em&gt;how to locate the core responsible for processing it&lt;/em&gt;. This would cause &lt;strong&gt;costly inter-core communication&lt;/strong&gt; in the case the wrong core is chosen so packet has to be transferred from a core’s L2/L3 cache to another core’s L2/L3 cache and that is what Metron solves.&lt;/p&gt;

&lt;p&gt;Metron allows packet to always stay in the same cache, raising the maximum speed to the cache’s highest one. Packet classification also greatly simplify the load balancing, introducing a quick way to split traffic among different classes or cores, in fact if there is overload the controller (&lt;em&gt;ONOS&lt;/em&gt;) can re-balance the traffic classes.&lt;/p&gt;

&lt;figure&gt;
    &lt;img style=&quot;display: block; margin: auto; width: 70%; padding-top:25px&quot; src=&quot;/assets/metron.png&quot; /&gt;
&lt;figcaption&gt;Figure 10. Metron NFV Service Chain. From Source, to Tagging to Hardware Dispatching. Figure from &lt;a href=&quot;https://www.kth.se/blogs/tcc/2018/04/metron-presentation-with-video-at-nsdi-2018-nfv-service-chains-at-the-true-speed-of-the-underlying-hardware/&quot;&gt;here &lt;/a&gt; &lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;p&gt;Data Plane follows a master/slave architecture where the master is an agent that interact with HW and the controller, then there is the TAG module with dynamically associates tags to traffic classes to control load distribution and advertise to the controller. As in the Control Plane instead, Metron combines all the pkt processing graphs into a &lt;em&gt;Service Chain&lt;/em&gt; with NFs.&lt;/p&gt;

&lt;p&gt;In case of failures Metron has always a &lt;strong&gt;backup configuration precomputed&lt;/strong&gt;, stored and replicated to each controller which can apply immediately.&lt;/p&gt;

&lt;p&gt;Finally, Metron is able to fully inspect traffic at 40Gbps and 100Gbps with low latency outperforming state of the art current NFV like OpenBox and EC2.&lt;/p&gt;

&lt;h4 id=&quot;contributions-2&quot;&gt;Contributions&lt;/h4&gt;
&lt;p&gt;A key point in Metron is that &lt;strong&gt;it cuts away all the expensive inter-core communication allowing a huge increase in overall performances&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In fact using smart tagging allows to very efficiently dispatch the packets to the right core thus eliminating the need of a dispatcher running on its own thread, this way some important work is relayed to the NIC.&lt;/p&gt;

&lt;p&gt;There are way to achieve this like “augmenting the NIC with a software layer” (EC2) or with a series of pipeline each one attributed to one core or with RSS flow hashing but none of these guarantees that the core receiving the packet will also be the one processing it.&lt;/p&gt;

&lt;p&gt;This is why &lt;strong&gt;for the first time Metron leverages the NIC capabilities&lt;/strong&gt;, offloading the traffic classification so that packets are tagged as soon as possible. (with SNF)&lt;/p&gt;

&lt;p&gt;About the statistic gathering throughout the network, instead of polling each device, adding delay and bandwidth and causing interrupts, Metron uses a smart approach called “&lt;em&gt;power of two random choices&lt;/em&gt;” where it actually just asks to two random devices and take the least loaded. These stats along with others from key locations allow Metron to &lt;strong&gt;dynamically scale resources&lt;/strong&gt;, duplicating instances of NFs and splitting flows among them.&lt;/p&gt;

&lt;h2 id=&quot;cloud-load-balancing&quot;&gt;&lt;strong&gt;Cloud load balancing&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The paper &lt;a class=&quot;citation&quot; href=&quot;#ananta&quot;&gt;[4]&lt;/a&gt; proposes &lt;strong&gt;ANANTA&lt;/strong&gt;, a Layer 4 load balancing and NAT software architecture able to satisfy multi tenant cloud requirements scaling-out web services and running on commodity servers.&lt;/p&gt;

&lt;p&gt;It has been proposed to achieve that level of reliability, scaling and performance and isolation needed in today cloud’s datacenter.  Essentially &lt;strong&gt;Ananta divides the load balancer into a decentralized horizontally scalable data plane and a consensus-based reliable control plane&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This architecture has been used by Microsoft Azure cloud with success &lt;strong&gt;achieving more than 100Gbps throughput for a single IP&lt;/strong&gt; and an aggregated one reaching 1Tbps.&lt;/p&gt;

&lt;p&gt;There are three tiers in the data plane: first the packet arrives at routers, here via ECMP (L3) load is randomly distributed to &lt;em&gt;MUX&lt;/em&gt; devices, second MUX provide a connection-level (L4) load balancing spreading load to the servers, third the virtual switch in each server provide stateful NAT.&lt;/p&gt;

&lt;p&gt;There is a controller &lt;strong&gt;Ananta Manager&lt;/strong&gt; (AM), one or more &lt;strong&gt;Multiplexer&lt;/strong&gt; (MUX) and the &lt;strong&gt;Host Agent&lt;/strong&gt; (HA) in each server. Each server has assigned a private Direct IP (DIP) and each service a Public Virtual IP (VIP).&lt;/p&gt;

&lt;figure&gt;
    &lt;img style=&quot;display: block; margin: auto; width: 80%; padding-top:25px&quot; src=&quot;/assets/ananta.png&quot; /&gt;
&lt;figcaption&gt;Figure 11. Ananta Data Plane Tiers. Figure from &lt;a href=&quot;https://www.semanticscholar.org/paper/Ananta%3A-cloud-scale-load-balancing-Patel-Bansal/5b999d36d5230eca01532b357c7cf338a5e0d641/figure/0&quot;&gt;here &lt;/a&gt; &lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;p&gt;The Manager is critical for configuring Host Agents and MUXs but also because provides port allocation for outbound SNAT to the Host Agent. The &lt;strong&gt;MUX is a BGP speaker&lt;/strong&gt; which advertise itself to the Manager for routes towards its DIPs. And the Host Agent manages DSR and NAT along with FastPath and VM health monitoring.&lt;/p&gt;

&lt;h4 id=&quot;contributions-3&quot;&gt;Contributions&lt;/h4&gt;
&lt;p&gt;The paper identifies the most important requirements and overcome them introducing Ananta, being able to provide cloud-scale solution for load balancing.&lt;/p&gt;

&lt;p&gt;A key difference from Ananta and other load balancer systems is that here &lt;strong&gt;Data/Control plane processing is in part offloaded to the end systems&lt;/strong&gt; relieving the network from load and more difficult state management.&lt;/p&gt;

&lt;p&gt;Ananta makes use of &lt;strong&gt;&lt;em&gt;Direct Server Return&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;DSR&lt;/strong&gt; to relieve Load balancers (MUX) from the useless work of processing the packets back to destination. Indeed the packet leaves the Host Agent with the destination IP already set so that it can reach the client without passing through the MUX.&lt;/p&gt;

&lt;figure&gt;
    &lt;img style=&quot;display: block; margin: auto; width: 60%; padding-top:25px&quot; src=&quot;/assets/ananta2.png&quot; /&gt;
&lt;figcaption&gt;Figure 12. The Ananta Architecture. Ananta consists of three components — Ananta Manager, Ananta Mux and Host Agent. Each component is independently scalable. Manager coordinates state across Agents and Muxes. Mux is responsible for packet forwarding for inbound packets. Agent implements NAT, which allows all outbound traffic to bypass Mux. Agents are co-located with destination servers. Figure from &lt;a href=&quot;https://www.semanticscholar.org/paper/Ananta%3A-cloud-scale-load-balancing-Patel-Bansal/5b999d36d5230eca01532b357c7cf338a5e0d641/figure/4&quot;&gt;here &lt;/a&gt; &lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;p&gt;Furthermore using a Virtual IP allows easy enforcement and management of ACL lists and make it easier to handle disaster recovery or upgrades since it can be dynamically mapped to another instance. Ananta makes use of BGP between Manager and MUXs which allows automatic failure detection and recovery.&lt;/p&gt;

&lt;p&gt;Importantly, the network scales as it increases because much work is done by hosts and MUX are horizontally scalable.&lt;/p&gt;

&lt;h2 id=&quot;connectivity-recovery-directly-in-the-data-plane&quot;&gt;&lt;strong&gt;Connectivity recovery directly in the Data-Plane&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The paper &lt;a class=&quot;citation&quot; href=&quot;#blink&quot;&gt;[5]&lt;/a&gt; proposes &lt;strong&gt;BLINK&lt;/strong&gt; a completely new approach for dealing with &lt;strong&gt;network failures&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It recovers from failures leveraging TCP signals directly within the data plane  with no expensive calls to the control plane&lt;/strong&gt;. It does take advantage from the key intuition that TCP flows experience a predictable behavior in case of disruption (retransmission).&lt;/p&gt;

&lt;p&gt;BLINK first &lt;strong&gt;selects TCP flows to track&lt;/strong&gt; (limited amount due to memory constraints) then &lt;strong&gt;detect major disruptions&lt;/strong&gt; (if majority of flows experience retransmission) and in the end &lt;strong&gt;recover connectivity&lt;/strong&gt; (mainly applying backup path) all in the data plane.&lt;/p&gt;

&lt;p&gt;BLINK is able to recover in &lt;strong&gt;sub-second&lt;/strong&gt; through fast rerouting and quick activation of backup path and is thus able to solve problem of the long convergence time for &lt;strong&gt;remote&lt;/strong&gt; failures (frequent and slow to repair) which used to invoke the control plane to let the topology converge (BGP updates).&lt;/p&gt;

&lt;p&gt;Challenges to achieve this are multiple and between them we see memory constraints (sampling), rerouting must apply only on major disruptions and must ignore temporary or casual retransmissions (noisy signals) and the impossibility to know the root cause of those failures (forwarding correctness).&lt;/p&gt;

&lt;p&gt;BLINK is implemented in Python and tested on a Tofino hardware switch and provide a good balance between detection and robustness to noisy signals offering on the average a fast sub-second recover. Importantly BLINK is &lt;strong&gt;able to be insensitive to normal congestion events&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;contributions-4&quot;&gt;Contributions&lt;/h4&gt;
&lt;p&gt;The paper exposes a completely new approach to recover from failures directly in the data plane leveraging TCP signaling. In fact it introduces a new framework for fast rerouting (sub-seconds) for both local and &lt;em&gt;remote&lt;/em&gt; failures.&lt;/p&gt;

&lt;p&gt;BLINK &lt;strong&gt;avoids memory problems&lt;/strong&gt; with a &lt;em&gt;Flow selector&lt;/em&gt; which keeps track of the 64 most active flows evicting the non active, and also the active ones after a certain amount of time.&lt;/p&gt;

&lt;p&gt;Blink importantly allows to &lt;em&gt;quickly recover&lt;/em&gt; from loops and blackholes by &lt;strong&gt;checking connectivity of each backup path before and after being applied&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Blinks leverage TCP congestion knowledge about RTO to set the right timer (default 2 sec) for flows eviction and avoid noisy signals causing useless temporary re-routing.&lt;/p&gt;

&lt;p&gt;BLINK make use of a logic &lt;em&gt;pipeline&lt;/em&gt; for processing the various stages which are Selection, Detection and ReRouting.&lt;/p&gt;

&lt;h2 id=&quot;here-link-to-part-1&quot;&gt;&lt;strong&gt;&lt;a href=&quot;/2019/network/sdn/software-defined-networking-introduction/&quot;&gt;Here link to PART 1&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/h2&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;div style=&quot;word-wrap: break-word&quot;&gt;
&lt;span id=&quot;simple&quot;&gt;[1]Z. A. Qazi, C.-C. Tu, L. Chiang, R. Miao, V. Sekar, and M. Yu, “SIMPLE-fying Middlebox Policy Enforcement Using SDN,” in &lt;i&gt;Proceedings of the ACM SIGCOMM 2013 Conference on SIGCOMM&lt;/i&gt;, New York, NY, USA, 2013, pp. 27–38, doi: 10.1145/2486001.2486022 [Online]. Available at: http://doi.acm.org/10.1145/2486001.2486022&lt;/span&gt;


&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div style=&quot;word-wrap: break-word&quot;&gt;
&lt;span id=&quot;midd-outsourc&quot;&gt;[2]J. Sherry, S. Hasan, C. Scott, A. Krishnamurthy, S. Ratnasamy, and V. Sekar, “Making Middleboxes Someone else’s Problem: Network Processing As a Cloud Service,” in &lt;i&gt;Proceedings of the ACM SIGCOMM 2012 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communication&lt;/i&gt;, New York, NY, USA, 2012, pp. 13–24, doi: 10.1145/2342356.2342359 [Online]. Available at: http://doi.acm.org/10.1145/2342356.2342359&lt;/span&gt;


&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div style=&quot;word-wrap: break-word&quot;&gt;
&lt;span id=&quot;metron&quot;&gt;[3]G. P. Katsikas, T. Barbette, D. Kostić, R. Steinert, and G. Q. M. Jr., “Metron: NFV Service Chains at the True Speed of the Underlying Hardware,” in &lt;i&gt;15th USENIX Symposium on Networked Systems Design and Implementation (NSDI 18)&lt;/i&gt;, Renton, WA, 2018, pp. 171–186 [Online]. Available at: https://www.usenix.org/conference/nsdi18/presentation/katsikas&lt;/span&gt;


&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div style=&quot;word-wrap: break-word&quot;&gt;
&lt;span id=&quot;ananta&quot;&gt;[4]P. Patel &lt;i&gt;et al.&lt;/i&gt;, “Ananta: Cloud Scale Load Balancing,” &lt;i&gt;ACM SIGCOMM Computer Communication Review&lt;/i&gt;, vol. 43, Aug. 2013, doi: 10.1145/2486001.2486026. &lt;/span&gt;


&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div style=&quot;word-wrap: break-word&quot;&gt;
&lt;span id=&quot;blink&quot;&gt;[5]T. Holterbach, E. C. Molero, M. Apostolaki, A. Dainotti, S. Vissicchio, and L. Vanbever, “Blink: Fast Connectivity Recovery Entirely in the Data Plane,” in &lt;i&gt;16th USENIX Symposium on Networked Systems Design and Implementation (NSDI 19)&lt;/i&gt;, Boston, MA, 2019, pp. 161–176 [Online]. Available at: https://www.usenix.org/conference/nsdi19/presentation/holterbach&lt;/span&gt;


&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;
</description>
        <pubDate>Fri, 19 Jul 2019 00:00:00 +0200</pubDate>
        <link>https://carloalbertoscola.it//2019/network/sdn/network-function-virtualization-cloud-load-balancing-middleboxes/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2019/network/sdn/network-function-virtualization-cloud-load-balancing-middleboxes/</guid>
        
        
        <category>network</category>
        
        <category>sdn</category>
        
      </item>
    
      <item>
        <title>An introduction to Software Defined Networking</title>
        <description>&lt;h1 class=&quot;no_toc&quot; id=&quot;the-new-way-to-do-networking-with-sdn&quot;&gt;&lt;strong&gt;&lt;center&gt;The &quot;new&quot; way to do networking with SDN&lt;/center&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 class=&quot;no_toc&quot; id=&quot;sdn-applications-analysis-and-scaling-&quot;&gt;&lt;strong&gt;&lt;center&gt;SDN applications, analysis and scaling &lt;/center&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 class=&quot;no_toc&quot; id=&quot;-research-papers-review-and-summary-&quot;&gt;&lt;center&gt; Research papers review and summary. &lt;/center&gt;&lt;/h3&gt;
&lt;h3 class=&quot;no_toc&quot; id=&quot;-part-1---here-link-to-part-2&quot;&gt;&lt;center&gt; PART 1 - &lt;a href=&quot;/2019/network/sdn/network-function-virtualization-cloud-load-balancing-middleboxes/&quot;&gt;Here link to PART 2&lt;/a&gt;&lt;/center&gt;&lt;/h3&gt;
&lt;p&gt;In &lt;strong&gt;&lt;a href=&quot;/2019/network/sdn/python/software-defined-networking-nfv-example-with-pox-click-openflow/&quot;&gt;this post&lt;/a&gt;&lt;/strong&gt; there is a practical step-by-step project with POX SDN, OpenFlow, Click and NFV.&lt;/p&gt;

&lt;h3 class=&quot;no_toc&quot; id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt;
&lt;div id=&quot;inline_toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#the-arrival-of-sdn-and-openflow&quot; id=&quot;markdown-toc-the-arrival-of-sdn-and-openflow&quot;&gt;&lt;strong&gt;The arrival of SDN and OpenFlow&lt;/strong&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#contributions&quot; id=&quot;markdown-toc-contributions&quot;&gt;Contributions&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-implement-sdn&quot; id=&quot;markdown-toc-how-to-implement-sdn&quot;&gt;&lt;strong&gt;How to implement SDN?&lt;/strong&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#contributions-1&quot; id=&quot;markdown-toc-contributions-1&quot;&gt;Contributions&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-test-and-debug-sdn-applications&quot; id=&quot;markdown-toc-how-to-test-and-debug-sdn-applications&quot;&gt;&lt;strong&gt;How to test and debug SDN applications?&lt;/strong&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#header-space-analysis&quot; id=&quot;markdown-toc-header-space-analysis&quot;&gt;&lt;strong&gt;Header Space Analysis&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#contributions-2&quot; id=&quot;markdown-toc-contributions-2&quot;&gt;Contributions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#a-nice-way-to-test-openflow-applications&quot; id=&quot;markdown-toc-a-nice-way-to-test-openflow-applications&quot;&gt;&lt;strong&gt;A NICE Way to Test OpenFlow Applications&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#contributions-3&quot; id=&quot;markdown-toc-contributions-3&quot;&gt;Contributions&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-scale-sdn-applications-at-large&quot; id=&quot;markdown-toc-how-to-scale-sdn-applications-at-large&quot;&gt;&lt;strong&gt;How to scale SDN applications at large?&lt;/strong&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#contributions-4&quot; id=&quot;markdown-toc-contributions-4&quot;&gt;Contributions&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-sdx---software-defined-internet-exchange&quot; id=&quot;markdown-toc-the-sdx---software-defined-internet-exchange&quot;&gt;&lt;strong&gt;The SDX - Software Defined Internet Exchange&lt;/strong&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#contributions-5&quot; id=&quot;markdown-toc-contributions-5&quot;&gt;Contributions&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#here-link-to-part-2&quot; id=&quot;markdown-toc-here-link-to-part-2&quot;&gt;&lt;strong&gt;Here link to PART 2&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#references&quot; id=&quot;markdown-toc-references&quot;&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;hr /&gt;

&lt;div&gt;
&lt;span class=&quot;read-time-txt&quot;&gt;Reading time:&lt;/span&gt;
&lt;span class=&quot;read-time-val&quot;&gt;


  12 mins

&lt;/span&gt;
	 
&lt;p class=&quot;read-time-date&quot;&gt;
	&lt;script&gt;
	var today = new Date();
	weekday = [&quot;Sunday&quot;, &quot;Monday&quot;,&quot;Tuesday&quot;, &quot;Wednesday&quot;,&quot;Thursday&quot;, &quot;Friday&quot;,&quot;Saturday&quot;];
	mlist = [ &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot; ];
	var time = today.getHours() + &quot;:&quot; + today.getMinutes();
	var d = weekday[today.getDay()] + &quot; &quot; +today.getDate() + &quot; &quot; + mlist[today.getMonth()] + &quot; &quot; + today.getFullYear();
	document.write(d + &quot;  &quot; + time);
	&lt;/script&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;the-arrival-of-sdn-and-openflow&quot;&gt;&lt;strong&gt;The arrival of SDN and OpenFlow&lt;/strong&gt;&lt;/h3&gt;
&lt;figure&gt;
    &lt;img style=&quot;display: block; margin: auto; width: 80%; padding-top:25px&quot; src=&quot;/assets/sdn-draw.jpeg&quot; /&gt;
    &lt;figcaption&gt;Figure from &lt;a href=&quot;https://www.starwindsoftware.com/blog/how-to-deploy-and-manage-software-defined-networking-using-scvmm-2016-part-iii&quot;&gt;here &lt;/a&gt;&lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;p&gt;Improving networks protocols and deploying new features or applications is very hard on traditional networks. The time needed for designing to implementing changes is extremely long and costly. Today network functions can be virtualized and aggregated into one single machine acting as &lt;em&gt;controller&lt;/em&gt;. The control plane on routers and switches is decoupled from the data plane and put into another device. Here the concept of SDNs comes with many pros: higher &lt;em&gt;flexibility&lt;/em&gt;, better &lt;em&gt;scaling&lt;/em&gt;, and &lt;em&gt;ease of implementation and maintenance&lt;/em&gt; from developers thus reducing cost for hardware. The key idea is that &lt;strong&gt;network devices now only implements basic primitives&lt;/strong&gt; and constantly talk with the &lt;strong&gt;Domain Controller&lt;/strong&gt; to push statistics and pull routing information. The protocol utilized to push and set rules into the “dumb” switches is called &lt;strong&gt;OpenFlow&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the paper  &lt;a class=&quot;citation&quot; href=&quot;#onix&quot;&gt;[1]&lt;/a&gt;, jumping back into the 2010, &lt;strong&gt;&lt;em&gt;ONIX&lt;/em&gt;&lt;/strong&gt; is explained as a &lt;em&gt;control platform&lt;/em&gt; exposing simple API and introducing a &lt;em&gt;Network Information Base (&lt;strong&gt;NIB&lt;/strong&gt;)&lt;/em&gt; similar to the RIB. There are four basic components in ONIX: the &lt;em&gt;physical infrastructure&lt;/em&gt; (switches and routers), &lt;em&gt;connectivity infrastructure&lt;/em&gt; (used as a management network), &lt;em&gt;Onix distributed system&lt;/em&gt; (single instance / cluster) and the &lt;em&gt;Control logic&lt;/em&gt; (implemented on top of API) and failures can happen on each one of these parts. It is built on &lt;em&gt;NOX&lt;/em&gt; and distributed among multiple servers. The API allow read/write data object &lt;em&gt;state&lt;/em&gt; into/from the NIB which is the main focus point of the system.&lt;/p&gt;

&lt;figure&gt;
    &lt;img style=&quot;display: block; margin: auto; width: 80%; padding-top:25px&quot; src=&quot;/assets/onix.png&quot; /&gt;
    &lt;figcaption&gt;Figure 1. Onix Infrastructure - from &lt;a href=&quot;https://muratbuffalo.blogspot.com/2010/12/onix-distributed-control-platform-for.html&quot;&gt;here &lt;/a&gt;&lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;The NIB is the complete network graph&lt;/strong&gt; containing each device, link, routes and attributes all put into &lt;em&gt;Entities&lt;/em&gt;.&lt;br /&gt;
Onix allows easy scaling through &lt;strong&gt;Partitioning and Aggregation&lt;/strong&gt;, replicating the controller, making switches only contact a subset of them and making each controller manage only a subset of the whole NIB.&lt;/p&gt;

&lt;p&gt;When there is a change in the NIB, it will translate the change into an OpenFlow message and then push to the affected device. For this, import/export modules sit behind the NIB waiting for polls or changes.&lt;/p&gt;

&lt;p&gt;Another feature of ONIX is the possibility to store data in two different ways, through a SQL database for stable states and to a DHT for dynamic states.&lt;/p&gt;

&lt;h4 id=&quot;contributions&quot;&gt;Contributions&lt;/h4&gt;
&lt;p&gt;ONIX doesn’t introduce anything totally new, in fact it derives some work from &lt;em&gt;Ethane&lt;/em&gt;, &lt;em&gt;SANE&lt;/em&gt;, &lt;em&gt;RCP&lt;/em&gt; and &lt;em&gt;NOX&lt;/em&gt;. But those did not address reliability and flexibility as ONIX does but instead presented the idea of a physically separated control plane.&lt;/p&gt;

&lt;p&gt;Indeed among the top contributions of ONIX, we can see the use of &lt;strong&gt;general APIs and flexible distribution primitives&lt;/strong&gt; which allow designers to work on a pre-tested and established base and implement control application with all the flexibility they need.&lt;/p&gt;

&lt;p&gt;APIs allow read/write state to any element in the network which corresponds to data-objects in the NIB. Since switches have narrower requirements along with a limited quantity of RAM and CPU, most of the work can be done on platforms that don’t have such limitations such as the Domain Controller.&lt;/p&gt;

&lt;p&gt;Here ONIX presents two way of storing state information: a &lt;strong&gt;persistent SQL transactional database&lt;/strong&gt; for slowly changing state and a &lt;strong&gt;memory-only DHT&lt;/strong&gt; for dynamic and mostly inconsistent state. ONIX allow developers to choose their own trade-off, for example: more consistency and durability or more efficiency.&lt;/p&gt;

&lt;h2 id=&quot;how-to-implement-sdn&quot;&gt;&lt;strong&gt;How to implement SDN?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;SDNs application development does not offer great flexibility in terms of modularity which is instead the focus of the paper &lt;a class=&quot;citation&quot; href=&quot;#pyretic&quot;&gt;[2]&lt;/a&gt;. It introduces a new language and abstractions for &lt;strong&gt;building modular applications&lt;/strong&gt; on top of SDNs. &lt;strong&gt;&lt;em&gt;Pyretic&lt;/em&gt;&lt;/strong&gt; allows packets to be processed &lt;em&gt;sequentially&lt;/em&gt; or &lt;em&gt;concurrently&lt;/em&gt;, thus producing different results for different use cases. It gives developers great building blocks and &lt;em&gt;high-level policy functions&lt;/em&gt; with extreme shortness of code and readability. Physical switches can now be virtually merged into single devices (many-to-one) or instead single physical switches can be logically divided into multiple virtual switch handling different modules (one-to-many).&lt;/p&gt;
&lt;figure&gt;
&lt;img style=&quot;display: block; margin: auto; width: 80%; padding-top:25px&quot; src=&quot;/assets/pyretic.png&quot; /&gt;
    &lt;figcaption&gt;Figure 2. Some primitive examples from Pyretic&lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;p&gt;Monitoring, Firewall and Load balancing examples are shown in the paper which use different features of the language like static policy language (called NetCore) which includes &lt;em&gt;primitive actions&lt;/em&gt; (drop, flood, passthrough ..), &lt;em&gt;predicates&lt;/em&gt; (act on subset of packets), &lt;em&gt;policies&lt;/em&gt; and &lt;em&gt;queries&lt;/em&gt;. 
In Pyretic, a policy receives a packet as input and returns a multiset of localized packets as output and packets in order to be processed need to be “lifted” from physical switches to the virtual instances. This up/down process is achieved with the use of &lt;strong&gt;virtual tags&lt;/strong&gt; and &lt;strong&gt;headers&lt;/strong&gt; specifying input/output ports and switches name. This allows developers to better abstract a &lt;strong&gt;derived&lt;/strong&gt; network from the &lt;strong&gt;underlying&lt;/strong&gt; one.
Finally the high level of abstraction provides an elegant mechanism to implement different networks topologies and writing self-contained modules.&lt;/p&gt;

&lt;h4 id=&quot;contributions-1&quot;&gt;Contributions&lt;/h4&gt;

&lt;p&gt;Software Defined Networking has limited support for modular components design and programming, in fact the paper target is to show and explain a new way of composing SDNs with multiple components. &lt;strong&gt;Modularity is the key&lt;/strong&gt;, it allows developers to not implement monolithic applications with API (like in ONIX) and just focus on high level policies. The paper presents two way of handling packets, a &lt;strong&gt;&lt;em&gt;sequential composition&lt;/em&gt;&lt;/strong&gt; and a &lt;strong&gt;&lt;em&gt;parallel composition&lt;/em&gt;&lt;/strong&gt;. It also proposes “Network object” which constrain the modules and allow information hiding and protection.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Pyretic Language&lt;/strong&gt; shown here is a step further in the development of SDNs with the concept of modular and extensible programming. Here the &lt;strong&gt;packets are represented as dictionaries&lt;/strong&gt;, and the addition of &lt;strong&gt;virtual headers&lt;/strong&gt; is made simple and allows fine-grained modularity and policy development.&lt;/p&gt;

&lt;p&gt;Other control platform such &lt;strong&gt;&lt;em&gt;NOX&lt;/em&gt;&lt;/strong&gt; used to offer low-level interfaces, but composition isolation and virtualization are plus added by Pyretic and programmers do not need to resolve conflicts by hand.&lt;/p&gt;

&lt;p&gt;Pyretic is able to build sophisticated controller applications for large networks with the use of a simple language as Python. Details about Pyretic here &lt;a class=&quot;citation&quot; href=&quot;#programming-with-pyretic&quot;&gt;[3]&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-test-and-debug-sdn-applications&quot;&gt;&lt;strong&gt;How to test and debug SDN applications?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Two papers go through the testing and debugging of SDN applications:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“&lt;em&gt;Header Space Analysis: Static Checking For Networks&lt;/em&gt;”&lt;/li&gt;
  &lt;li&gt;“&lt;em&gt;A NICE Way to Test OpenFlow Applications&lt;/em&gt;”&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;header-space-analysis&quot;&gt;&lt;strong&gt;Header Space Analysis&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;In the old times network devices were very simple with just the role of forwarding packets, today there is a large number of protocols, encapsulation methods and policies to keep in mind. This makes debugging problems very hard and long to resolve and that is one reason why the paper &lt;a class=&quot;citation&quot; href=&quot;#hsa&quot;&gt;[4]&lt;/a&gt; exposes &lt;strong&gt;Header Space Analysis&lt;/strong&gt; framework for a &lt;strong&gt;static analysis&lt;/strong&gt; of production networks.&lt;/p&gt;

&lt;p&gt;The key idea is that the framework is protocol agnostic, allowing to test different environment with different header formats and syntax without reinventing the wheel. &lt;strong&gt;Hassel&lt;/strong&gt; doesn’t care about the semantic, it just matches series of {0,1} in the space &lt;em&gt;L&lt;/em&gt; of the packet headers, since the data part has been proven to be irrelevant for the calculations. With the use of &lt;strong&gt;transfer functions&lt;/strong&gt;, the framework is able to map, simulate and test the network for &lt;em&gt;forwarding loops&lt;/em&gt; (finite and infinite) and &lt;em&gt;configuration errors&lt;/em&gt;.&lt;/p&gt;

&lt;figure&gt;
&lt;img style=&quot;display: block; margin: auto; width: 60%; padding-top:25px&quot; src=&quot;/assets/hsa1.png&quot; /&gt;
&lt;figcaption&gt;Figure 3. (a) Changes to a flow as it passes through two boxes with transfer function TA and TB . (b) Composing transfer functions to model end to end behavior of a network. Figure from &lt;a href=&quot;https://www.semanticscholar.org/paper/Header-Space-Analysis%3A-Static-Checking-for-Networks-Kazemian-Varghese/19114b7a2f5243a47e80590cc11a2d8ec5b96308&quot;&gt;here &lt;/a&gt; &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The framework &lt;strong&gt;geometrically models network boxes and applications&lt;/strong&gt; like firewall and NAT with transfer functions which operates through the use of algebra &lt;strong&gt;primitive operations&lt;/strong&gt; (intersection, union, complementation and difference). Loops can be detected &lt;strong&gt;injecting packet&lt;/strong&gt; in the network and looking if the same packet come back to the injection port. &lt;strong&gt;Static analysis&lt;/strong&gt; can be applied for reachability checking to verify if packets can logically reach a destination and if a destination can possibly receive packet from a determined source using the &lt;em&gt;range inverse&lt;/em&gt; computation.&lt;/p&gt;

&lt;p&gt;Hassel is implemented in Python 2.6 along with a parser for Cisco IOS configuration output that &lt;strong&gt;automatically generate transfer functions and model of the router&lt;/strong&gt;. The implementation also employs optimizations that allowed a 19x to 400x speed increment.&lt;/p&gt;

&lt;p&gt;Tests on the Stanford network showed that the tool has been of great usefulness in detecting loops and configuration mistakes.&lt;/p&gt;

&lt;h4 id=&quot;contributions-2&quot;&gt;Contributions&lt;/h4&gt;

&lt;p&gt;The idea of &lt;strong&gt;&lt;em&gt;transfer functions&lt;/em&gt;&lt;/strong&gt; used by Hassel is very similar to the ASE Mapping in axiomatic routing. Here instead, Hassel does not try to understand protocols and packet headers, &lt;strong&gt;it treats everything like a point {0,1} in space large &lt;em&gt;L&lt;/em&gt;&lt;/strong&gt;, being &lt;em&gt;L&lt;/em&gt; the header length. In fact Hassel introduces different new terms to define a domain for the analysis like Header and Network Space along with the transfer functions. The Transfer functions “move” packets from one port to another, “transforming” the packet at each step.&lt;/p&gt;

&lt;p&gt;Another important feature is the possibility to &lt;em&gt;slice&lt;/em&gt; the network in different part (like MPLS, VLANs and FlowVisor), and test each one for security isolation and leaks. This is done by detecting if a possible function output of a domain ends up in another un-allowed domain, for example if a packet from one VLAN can pass to another VLAN while processing and rewriting its headers.&lt;/p&gt;

&lt;figure&gt;
&lt;img style=&quot;display: block; margin: auto; width: 60%; padding-top:25px&quot; src=&quot;/assets/hsa-slice.png&quot; /&gt;
&lt;figcaption&gt;Figure 4.  Detecting slice leakage. Although slice a and b have disjoint slice reservation on S1 and S2, but slice a’s reservation on S1 can leak to slice b’s reservation os S2 after it is rewritten by slice a’s transfer function rules. Figure from &lt;a href=&quot;https://www.semanticscholar.org/paper/Header-Space-Analysis%3A-Static-Checking-for-Networks-Kazemian-Varghese/19114b7a2f5243a47e80590cc11a2d8ec5b96308&quot;&gt;here &lt;/a&gt; &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;A great contribution of Hassel is the fact that it made it &lt;strong&gt;easier to spot network violations&lt;/strong&gt; with network transfer function in a static and non-risky way. In fact the implementation was proven to find real mistakes in the Stanford network in a considerable short time.&lt;/p&gt;

&lt;h4 id=&quot;a-nice-way-to-test-openflow-applications&quot;&gt;&lt;strong&gt;A NICE Way to Test OpenFlow Applications&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;With the increasing adoption of SDN technology, asynchronous and distributed systems become difficult to test for certain class of bugs. This is where &lt;strong&gt;NICE&lt;/strong&gt; or &lt;em&gt;No bugs In Controller Execution&lt;/em&gt; tries to fill the gap &lt;a class=&quot;citation&quot; href=&quot;#nice&quot;&gt;[5]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NICE is a tool for testing &lt;strong&gt;unmodified controller programs&lt;/strong&gt; on the NOX platform. It makes use of two important techniques: &lt;strong&gt;model checking&lt;/strong&gt; and &lt;strong&gt;symbolic execution&lt;/strong&gt;.&lt;/p&gt;

&lt;figure&gt;
&lt;img style=&quot;display: block; margin: auto; width: 60%; padding-top:25px&quot; src=&quot;/assets/nice1.png&quot; /&gt;
&lt;figcaption&gt;Figure 5. Given an OpenFlow program, a network topology, and correctness properties, NICE performs a statespace search and outputs traces of property violations. Figure from &lt;a href=&quot;https://www.semanticscholar.org/paper/A-NICE-Way-to-Test-OpenFlow-Applications-Canini-Venzano/04b319357d6bab89ec9575f4b044d7609aa4296a/figure/0&quot;&gt;here &lt;/a&gt; &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In order to test an app, it is needed to &lt;em&gt;model&lt;/em&gt; the system acquiring the possible &lt;em&gt;states&lt;/em&gt; which could be infinite. &lt;strong&gt;Model checking gather all the possible states&lt;/strong&gt;, but being the output too large, &lt;strong&gt;symbolic execution is coupled to test only the relevant code paths&lt;/strong&gt;. Model checking explore system states  and model the execution with &lt;em&gt;components&lt;/em&gt;, &lt;em&gt;channels&lt;/em&gt;, &lt;em&gt;components states&lt;/em&gt; and &lt;em&gt;transitions&lt;/em&gt;. It define “class of packets” and chooses a “representative packet” to be the tester for that specific state case, defining this way different &lt;em&gt;domain specific search strategies&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;NICE sends packet at different events interleaving, simulating as close as possible the real world execution scenario. Controller programs are viewed as set of event handlers that create transitions (changes in global var settings). Symbolic execution instead does not model the system space but rather focuses on &lt;strong&gt;identifying relevant inputs&lt;/strong&gt; but it’s still not sufficient “per se”.&lt;/p&gt;

&lt;p&gt;The combination of the two is what allows NICE to scale and uncover tricky bugs in potentially interminable possible states. If a transition violates a certain correctness property (these are configurable), than NICE records the state and log the error.&lt;/p&gt;

&lt;h4 id=&quot;contributions-3&quot;&gt;Contributions&lt;/h4&gt;
&lt;p&gt;A significant problem in SDN applications is the &lt;strong&gt;delay on rule install&lt;/strong&gt; across different switches which &lt;strong&gt;cause unintended behavior&lt;/strong&gt; and performance degradation. Challenges that NICE try to solve are in the range of large space of inputs like switches states, input packets and event ordering.&lt;/p&gt;

&lt;figure&gt;
&lt;img style=&quot;display: block; margin: auto; width: 60%; padding-top:25px&quot; src=&quot;/assets/nice.png&quot; /&gt;
&lt;figcaption&gt;Figure 6. An example of OpenFlow network traversed by a packet. In a plausible scenario, due to delays between controller and switches, the packet does not encounter an installed rule in the second switch. Figure from &lt;a href=&quot;https://www.semanticscholar.org/paper/A-NICE-Way-to-Test-OpenFlow-Applications-Canini-Venzano/04b319357d6bab89ec9575f4b044d7609aa4296a/figure/0&quot;&gt;here &lt;/a&gt; &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;An important contribution of NICE is its ability to &lt;strong&gt;generate streams of packets depending on controller state&lt;/strong&gt; in order to test the program and uncover forwarding loops and black holes. Its important to note that NICE relieves work from the developer, asking only to provide network topology and hosts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NICE couples symbolic execution with model checking in order to lower the number of states and focus on the ones that can create meaningful transitions.&lt;/strong&gt; This allow to test applications without worrying about the huge system state space scalability problems. Furthermore NICE provides a set of &lt;em&gt;correctness properties&lt;/em&gt; with their own testing implementation which allows developers to quickly test and build custom modules.&lt;/p&gt;

&lt;p&gt;In fact NICE has proven to find different class of bugs in standard unmodified controller programs.&lt;/p&gt;

&lt;h2 id=&quot;how-to-scale-sdn-applications-at-large&quot;&gt;&lt;strong&gt;How to scale SDN applications at large?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;OpenFlow imposes &lt;strong&gt;excessive overheads&lt;/strong&gt; on the controller when it comes to &lt;em&gt;high performance networks&lt;/em&gt;, thing that introduces unacceptable latencies and restricts system performances. The visibility over all the flows is simply un-achievable in High Performance networks. &lt;strong&gt;Openflow is inherently not scalable&lt;/strong&gt; and its design has two steps that involve the controller and create too much heavy load on it: &lt;em&gt;flows setup&lt;/em&gt; and &lt;em&gt;statistic gathering&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The paper exposes &lt;strong&gt;&lt;em&gt;DevoFlow&lt;/em&gt;&lt;/strong&gt; &lt;a class=&quot;citation&quot; href=&quot;#devoflow&quot;&gt;[6]&lt;/a&gt;, which is a slightly modified version of OpenFlow which aims to overcome such disadvantages. In fact it gives back to routers the forwarding decisions on most flows. 
Paper shows an analysis of trade-offs between centralized management and costs, and shows DevoFlows new mechanisms. &lt;strong&gt;Its goal is to keep as many flow entry in data plane as possible&lt;/strong&gt; (passing on control plane is expensive), while always maintaining enough visibility over the network.&lt;/p&gt;

&lt;p&gt;Central control gives a lot of good points like: &lt;em&gt;near optimal traffic management&lt;/em&gt;, &lt;em&gt;simplified policy development&lt;/em&gt; and simplicity and future-proof of switches but it creates overhead both in hardware resources, communication load and delay and latency which become the bottleneck.&lt;/p&gt;

&lt;p&gt;Devoflow introduces &lt;em&gt;rule cloning&lt;/em&gt; and &lt;em&gt;local actions&lt;/em&gt; which aims to relieves TCAM usage and controller overload. Also, multipath is supported with little difference from ECMP, here the paths are not constrained to be of the same cost to be chosen.&lt;/p&gt;

&lt;p&gt;Finally evaluations shows that DevoFlow can improve throughput of 32% with Clos and 55% with HyperX networks which is a great increase .&lt;/p&gt;

&lt;h4 id=&quot;contributions-4&quot;&gt;Contributions&lt;/h4&gt;
&lt;p&gt;The important takeaway from DevoFlow is the fact to &lt;strong&gt;give back to routers routing decision&lt;/strong&gt; on most of the flows called &lt;em&gt;microflows&lt;/em&gt; while only the significant ones, the &lt;em&gt;elephant flows&lt;/em&gt; are managed by the controller.&lt;/p&gt;

&lt;p&gt;Paper shows pro and cons of traditional OpenFlow centralized management and compares with DevoFlow devolving control and statistic collection. Here its important to point out the &lt;strong&gt;huge difference in bandwidth&lt;/strong&gt; between line card speed and ASICs-CPUs which is therefore limited to 17Mbps compared to 300Gbps of the line card.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stats gathering and flow setup compete for the limited bandwidth.&lt;/strong&gt; DevoFlows introduces &lt;em&gt;rule cloning&lt;/em&gt; in order to augment action of wildcard rules, saving them to the data plane thus relieving TCAM memory. &lt;strong&gt;Hedera&lt;/strong&gt; consider 5 secs to be the good pull time but for HPN it must be less than 500ms. &lt;strong&gt;Maestro&lt;/strong&gt; multi-thread controller can install rules twice as fast than NOX but DevoFlow introduces different statistic collection mechanisms like &lt;em&gt;sampling&lt;/em&gt;, &lt;em&gt;triggers&lt;/em&gt; and &lt;em&gt;approximation counters&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ultimately DevoFlows uses &lt;strong&gt;&lt;em&gt;oblivious routing&lt;/em&gt;&lt;/strong&gt; which distributes fairly path probability in correlation of the link bandwidth, for example two links A (10Gbps) and B (1Gbps) will have different probability of being chosen, 10/11 for A and 1/11 for B, which is the exact perfect balancing.&lt;/p&gt;

&lt;p&gt;In fact it was showed to achieve “94% of the throughput that dynamic routing does on the worst case”.&lt;/p&gt;

&lt;h2 id=&quot;the-sdx---software-defined-internet-exchange&quot;&gt;&lt;strong&gt;The SDX - Software Defined Internet Exchange&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;One of the reason this paper is trying to address is the limited way of todays network of being capable of forwarding packets. In fact, it is &lt;strong&gt;based on destination IP prefixes&lt;/strong&gt; which does not offer flexibility and functionalities like a more useful matching towards header fields or BGP attributes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Software defined Internet Exchange&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;(SDX)&lt;/em&gt;&lt;/strong&gt; &lt;a class=&quot;citation&quot; href=&quot;#sdx&quot;&gt;[7]&lt;/a&gt; is a good solution to the problem, allowing peers to run SDN application, ensuring system scalability and avoiding BGP routes conflicts. Indeed paper addresses major problems of BGP like the one mentioned, a difficult and indirect way of express policies (AS path, local pref, etc) and the impossibility to have more control over end-end flows instead of just neighbors.&lt;/p&gt;

&lt;figure&gt;
    &lt;img style=&quot;display: block; margin: auto; width: 100%; padding-top:25px&quot; src=&quot;/assets/sdx.png&quot; /&gt;
&lt;figcaption&gt;Figure 7. SDX programming abstractions. Figure from &lt;a href=&quot;https://www.semanticscholar.org/paper/SDX%3A-a-software-defined-internet-exchange-Gupta-Vanbever/1942aff3bb24d4ff9c1e8688b1104a767f0bc346/figure/0&quot;&gt;here &lt;/a&gt; &lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;p&gt;Furthermore the approach &lt;strong&gt;must be scalable&lt;/strong&gt;, &lt;strong&gt;deployable&lt;/strong&gt; and providing a &lt;strong&gt;good programming abstraction&lt;/strong&gt;. SDX also provide TE inbound support, at the central location AS can install rules and control traffic according to IP/port.&lt;/p&gt;

&lt;p&gt;Anycast is supported for load balancing and SDX can also redirect flows to middleboxes when possible DOS are detected. &lt;strong&gt;Pyretic&lt;/strong&gt; is the language used to write policies, and SDX works by gathering them from ASs, augmenting and then translating into flow rules. The process is multi-stage and involves a &lt;strong&gt;route server&lt;/strong&gt; which actually calculate best path for each prefix and re-advertise the routes. Augmenting policies involves an explosion in size, but it can be largely reduced by grouping prefixes into &lt;strong&gt;FEC&lt;/strong&gt; and tagging different type of traffic directly on Border Routers.&lt;/p&gt;

&lt;h4 id=&quot;contributions-5&quot;&gt;Contributions&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;The main goal of SDX is to provide each participant (physical or remote) the illusion of a SDN switch&lt;/strong&gt; which simplifies policies creation and management in multiple ways.&lt;/p&gt;

&lt;p&gt;The paper also identifies class of applications that can be deployed one of which is “&lt;em&gt;Application specific peering&lt;/em&gt;” that allows ASs to exchange traffic only for a subset of application classes. ex (only youtube traffic) and SDX easily integrate this by installing rules for group of flows.&lt;/p&gt;

&lt;p&gt;Importantly SDX allow ASs &lt;strong&gt;isolation&lt;/strong&gt; while aggregating participants policies so that each one can only act on  its own traffic. SDX also ensure consistency among BGP routes with the use of filters and no loops can be created.&lt;/p&gt;

&lt;p&gt;The paper also points out that prefixes tend to be stable , BGP routes only affects small part of forwarding table and BGP route changes occur in bursts and are followed by long periods. These aspects have greatly helped to better think and improve the policy compilation processes.&lt;/p&gt;

&lt;h2 id=&quot;here-link-to-part-2&quot;&gt;&lt;strong&gt;&lt;a href=&quot;/2019/network/sdn/network-function-virtualization-cloud-load-balancing-middleboxes/&quot;&gt;Here link to PART 2&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/h2&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;div style=&quot;word-wrap: break-word&quot;&gt;
&lt;span id=&quot;onix&quot;&gt;[1]T. Koponen, M. Casado, and N. Gude, “Onix: A distributed control platform for large-scale production networks,” &lt;i&gt;Proceedings of the 9th USENIX Symposium on Operating Systems Design and Implementation&lt;/i&gt;, Jan. 2010. &lt;/span&gt;


&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div style=&quot;word-wrap: break-word&quot;&gt;
&lt;span id=&quot;pyretic&quot;&gt;[2]C. Monsanto, J. Reich, N. Foster, J. Rexford, and D. Walker, “Composing Software Defined Networks,” in &lt;i&gt;10th USENIX Symposium on Networked Systems Design and Implementation (NSDI 13)&lt;/i&gt;, Lombard, IL, 2013, pp. 1–13 [Online]. Available at: https://www.usenix.org/conference/nsdi13/technical-sessions/presentation/monsanto&lt;/span&gt;


&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div style=&quot;word-wrap: break-word&quot;&gt;
&lt;span id=&quot;programming-with-pyretic&quot;&gt;[3]J. Reich, C. Monsanto, N. Foster, J. Rexford, and D. Walker, “Modular SDN programming with pyretic,” &lt;i&gt;USENIX Login&lt;/i&gt;, vol. 38, pp. 128–134, Jan. 2013. &lt;/span&gt;


&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div style=&quot;word-wrap: break-word&quot;&gt;
&lt;span id=&quot;hsa&quot;&gt;[4]P. Kazemian, G. Varghese, and N. McKeown, “Header Space Analysis: Static Checking for Networks,” in &lt;i&gt;Presented as part of the 9th USENIX Symposium on Networked Systems Design and Implementation (NSDI 12)&lt;/i&gt;, San Jose, CA, 2012, pp. 113–126 [Online]. Available at: https://www.usenix.org/conference/nsdi12/technical-sessions/presentation/kazemian&lt;/span&gt;


&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div style=&quot;word-wrap: break-word&quot;&gt;
&lt;span id=&quot;nice&quot;&gt;[5]M. Canini, D. Venzano, P. Peresini, D. Kostic, and J. Rexford, “A NICE Way to Test OpenFlow Applications,” in &lt;i&gt;Presented as part of the 9th USENIX Symposium on Networked Systems Design and Implementation (NSDI 12)&lt;/i&gt;, San Jose, CA, 2012, pp. 127–140 [Online]. Available at: https://www.usenix.org/conference/nsdi12/technical-sessions/presentation/canini&lt;/span&gt;


&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div style=&quot;word-wrap: break-word&quot;&gt;
&lt;span id=&quot;devoflow&quot;&gt;[6]A. R. Curtis, J. Mogul, J. Tourrilhes, P. Yalagandula, P. Sharma, and S. Banerjee, “DevoFlow: Scaling Flow Management for High-Performance Networks,” in &lt;i&gt;Proceedings of the ACM SIGCOMM 2011 Conference, SIGCOMM’11&lt;/i&gt;, 2011, vol. 41, pp. 254–265, doi: 10.1145/2018436.2018466. &lt;/span&gt;


&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;div style=&quot;word-wrap: break-word&quot;&gt;
&lt;span id=&quot;sdx&quot;&gt;[7]A. Gupta &lt;i&gt;et al.&lt;/i&gt;, “SDX: A Software Defined Internet Exchange,” in &lt;i&gt;Proceedings of the 2014 ACM Conference on SIGCOMM&lt;/i&gt;, New York, NY, USA, 2014, pp. 551–562, doi: 10.1145/2619239.2626300 [Online]. Available at: http://doi.acm.org/10.1145/2619239.2626300&lt;/span&gt;


&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;
</description>
        <pubDate>Fri, 05 Jul 2019 00:00:00 +0200</pubDate>
        <link>https://carloalbertoscola.it//2019/network/sdn/software-defined-networking-introduction/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2019/network/sdn/software-defined-networking-introduction/</guid>
        
        
        <category>network</category>
        
        <category>sdn</category>
        
      </item>
    
      <item>
        <title>SDN &amp; NFV with POX and Click Modular Router</title>
        <description>&lt;h1 id=&quot;pox-controller-and-click-in-practice&quot;&gt;&lt;strong&gt;&lt;center&gt;POX Controller and Click in practice&lt;/center&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;-how-to-create-a-simple-sdn-and-nfv-application&quot;&gt;&lt;center&gt; How to create a simple SDN and NFV application&lt;/center&gt;&lt;/h2&gt;

&lt;p&gt;This is the first project I did for learning &lt;em&gt;Software Defined Networking&lt;/em&gt; and &lt;em&gt;Network Function Virtualization&lt;/em&gt;. 
It makes use of &lt;strong&gt;&lt;a href=&quot;http://mininet.org/&quot;&gt;Mininet&lt;/a&gt;&lt;/strong&gt; for network virtualization, &lt;strong&gt;&lt;a href=&quot;https://github.com/noxrepo/pox&quot;&gt;POX&lt;/a&gt;&lt;/strong&gt; for the python SDN Controller application and &lt;strong&gt;&lt;a href=&quot;https://github.com/kohler/click&quot;&gt;Click Modular Router&lt;/a&gt;&lt;/strong&gt; for networking functions like Load Balancing, IDS and NAPT.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;How to setup a topology with Mininet.&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;How to program POX SDN controller and Switches with OpenFlow.&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;How to integrate network functions with Click.&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bestrocker221/ik2220-SDN-NFV&quot; target=&quot;_blank&quot;&gt;
    &lt;img class=&quot;github-img&quot; src=&quot;/assets/github.ico&quot; href=&quot;https://github.com/bestrocker221/ik2220-SDN-NFV&quot; target=&quot;_blank&quot; /&gt;
    Here is the link to the Github repo containing the project.
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;topology&quot;&gt;&lt;strong&gt;Topology&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img style=&quot;display: block; margin: auto;&quot; src=&quot;/assets/topo-min.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;services&quot;&gt;&lt;strong&gt;Services&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;These services will run &lt;strong&gt;&lt;em&gt;Click&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;lb1&lt;/strong&gt;: will serve DNS requests and load balance them towards the three &lt;strong&gt;ds&lt;/strong&gt; servers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;lb2&lt;/strong&gt;: will serve WEB requests and load balance them towards the three &lt;strong&gt;ws&lt;/strong&gt; servers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ids&lt;/strong&gt;: is an Intrusion Detection System which will do basic filtering on HTTP requests and direct the suspicious ones to the inspector machine, while others will go through to the lb2.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;napt&lt;/strong&gt;: is the Network Address and Port Translator, will translate addresses from the private network 10.0.0.0/24 to 100.0.0.0/24.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These will run POX &lt;strong&gt;&lt;em&gt;l2.learning&lt;/em&gt;&lt;/strong&gt; modules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Fw1&lt;/strong&gt; and &lt;strong&gt;Fw2&lt;/strong&gt; are firewalls filtering traffic from/to the Demilitarized Zone and Private Zone.&lt;/li&gt;
  &lt;li&gt;All the others &lt;strong&gt;sw&lt;/strong&gt; are simple L2 Learning switches.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-mininet-topology&quot;&gt;&lt;strong&gt;1. Mininet Topology&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Mininet allows to virtualize a network adding hosts, switches and links as you prefer.&lt;/p&gt;

&lt;h3 id=&quot;how-to-run-mininet&quot;&gt;How to run mininet:&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;In Mininet you just need a single python file.&lt;/li&gt;
  &lt;li&gt;Define your Topology class extending &lt;strong&gt;Topo&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Start the mininet with your topology and a controller.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before launching the mininet script, check ovs-ctl is running, otherwise:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /usr/share/openvswitch/scripts/ovs-ctl start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a mininet example&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python2
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mininet.net&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mininet&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mininet.cli&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLI&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mininet.topo&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Topo&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mininet.node&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RemoteController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OVSSwitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyTopology&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Topo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Topo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# All the elements are basically L2 switches
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;sw1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addSwitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sw1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dpid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int2dpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Add Hosts
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addHost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;h1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100.0.0.10/24&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Add Links
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sw1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;#Create link
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Importantly every mininet object has a DPID which we can set and can refer later.&lt;/p&gt;

&lt;p&gt;Then in the main: (we use a local controller)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;topo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyTopology&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ctrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RemoteController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6633&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mininet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;topo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OVSSwitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;autoSetMacs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;autoStaticArp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;##################
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# Launch services and tests here
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;###########
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;CLI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can launch services in mininet hosts like this:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ws1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;python3 -m http.server 80 &amp;amp;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CLI(net)&lt;/code&gt; allows to have an interactive shell on the mininet environment while it is running.&lt;/p&gt;

&lt;p&gt;You can run commands easily.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mininet&amp;gt; h1 ping h2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the inline command &lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;net.stop()&lt;/code&gt; will gracefully stop the network.&lt;/p&gt;

&lt;p&gt;If you want to clean the system from the last mininet run, execute:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mn &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;2-pox-controller&quot;&gt;&lt;strong&gt;2. POX Controller&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The controller has the role of setting up rules in the OpenFlow switches whenever they encounter a packet for which no routing decision can be made.&lt;/p&gt;

&lt;p&gt;The POX controller handles persistent connections from OpenFlow enabled switches, and has a handler for each state of the connection.&lt;/p&gt;

&lt;p&gt;For example, each event will fire the appropriate callback:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;_handle_ConnectionUp&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;_handle_ConnectionDown&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;_handle_PacketIn&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;_handle_PortStatus&lt;/li&gt;
  &lt;li&gt;_handle_FlowRemoved&lt;/li&gt;
  &lt;li&gt;_handle_ErrorIn&lt;/li&gt;
  &lt;li&gt;_handle_BarrierIn&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will focus on the first three: when a SW will first connect, when it will disconnect, and whenever a packet is forwarded from the SW to the Controller.&lt;/p&gt;

&lt;p&gt;In this case we use the already present &lt;em&gt;l2 forwarding&lt;/em&gt; module which implements standard switch behavior with &lt;em&gt;flood and learn&lt;/em&gt; mechanism. We extend that module for the two firewalls adding the rules to block/allow traffic based on port/destination address.&lt;/p&gt;

&lt;h3 id=&quot;main-controller-file&quot;&gt;&lt;strong&gt;Main controller file&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The main controller application can be like this:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/bin/python2
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pox.core&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;forwarding.l2_learning&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# importing MY modules
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;myproj.myfw&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyFw2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyFw1&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;myproj.l2_custom&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l2_learning_custom&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;myproj.clickElem&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;click_device&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fw_list_dpid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;click_dpid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;71&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;74&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;private_ip_hosts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10.0.0.50&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;10.0.0.51&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;srv_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100.0.0.20&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;100.0.0.21&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;100.0.0.22&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;web&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100.0.0.40&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;100.0.0.41&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;100.0.0.42&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# registering the two firewalls
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registerNew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyFw1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fw_list_dpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srv_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registerNew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyFw2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fw_list_dpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;private_ip_hosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srv_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# registering click elements (napt, ids and lb)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registerNew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click_device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;click_dpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Except firewalls, click elements all the others are l2 learning switches
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registerNew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l2_learning_custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;click_dpid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fw_list_dpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the DPID list we can set which registered module handle which element. In fact, &lt;code class=&quot;highlighter-rouge&quot;&gt;click_device&lt;/code&gt; class will handle DPID 71,72,73,74.&lt;/p&gt;

&lt;p&gt;The class &lt;em&gt;l2_learning_custom&lt;/em&gt; takes as argument a list of DPID to ignore, so works in reverse as the others.&lt;/p&gt;

&lt;p&gt;Registering a new element will allow each component to manage every incoming switch connection, so a way to distinguish which switch is connecting is to use each DPID as a filter.&lt;/p&gt;

&lt;p&gt;Ex: If Fw1 has to manage the DPID 51, then when &lt;code class=&quot;highlighter-rouge&quot;&gt;_handle_ConnectionUp&lt;/code&gt; is raised, we can continue only if the &lt;code class=&quot;highlighter-rouge&quot;&gt;event.dpid&lt;/code&gt; is 51.&lt;/p&gt;

&lt;h3 id=&quot;custom-component-and-openflow-rule-install&quot;&gt;&lt;strong&gt;Custom component and OpenFlow rule install&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Here we see the base &lt;code class=&quot;highlighter-rouge&quot;&gt;MyFirewall&lt;/code&gt; class. It will install the rules to the switches as soon as they come up and connect to the controller.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pox.core&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pox.lib.addresses&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPAddr&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;forwarding.l2_learning&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pox.openflow.libopenflow_01&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pox.lib.packet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PKT&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyFirewall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fw_dpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srv_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# we need to attach this class as listener
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openflow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addListeners&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fwdpid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fw_dpid&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srv_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srv_list&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#   Common rules to both firewalls 1 &amp;amp; 2
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_handle_ConnectionUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# just handle the switches with the wanted DPID
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dpid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fwdpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# save the connection object
&lt;/span&gt;            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Firewall &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d : &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s has come up.&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dpid_to_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;########## INSTALL THE RULES ON THE SWITCH ##########
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;web_server&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srv_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;web&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# generating TCP rules for communication to web servers
&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;# from out (public/private zone) to inner
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ofp_flow_mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ofp_action_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ofp_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;in_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;dl_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PKT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ethernet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_TYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;nw_proto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PKT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipv4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCP_PROTOCOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;nw_dst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;web_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# src=internal IP
&lt;/span&gt;                            &lt;span class=&quot;n&quot;&gt;tp_dst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;priority&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ALLOWING TCP 80 in FW {} to {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; 
                                            &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;web_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;# From inner web services to the outer (public/private zone)
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ofp_flow_mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ofp_action_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ofp_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;in_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;dl_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PKT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ethernet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IP_TYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;nw_proto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PKT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipv4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCP_PROTOCOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;nw_src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;web_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# src=internal IP
&lt;/span&gt;                            &lt;span class=&quot;n&quot;&gt;tp_src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;priority&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ALLOWING TCP 80 in FW {} from {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                                            &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;web_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

                &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# send out all the collected generated rules to the switch
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# then act as normal L2 Switch
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;LearningSwitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You have to install a rule &lt;strong&gt;for each direction of the flow&lt;/strong&gt;, indeed two rules are needed.&lt;/p&gt;

&lt;p&gt;NOTE: remember to set the right priorities for the right rule ordering.&lt;/p&gt;

&lt;p&gt;Each rule has an:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;action&lt;/strong&gt;: for example &lt;em&gt;ofp_action_output&lt;/em&gt; will send pkt to the &lt;em&gt;port&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;match&lt;/strong&gt;: will match pkt based on protocol, ports, and type&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;priority&lt;/strong&gt;: higher priority takes over&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then I expanded the MyFirewall class to add functionalities unique to each firewall fw1/fw2.&lt;/p&gt;

&lt;h3 id=&quot;how-to-run-pox-controller&quot;&gt;&lt;strong&gt;How to run POX Controller&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;You can start the controller with:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;python2 pox.py my_controller samples.pretty_log log.level &lt;span class=&quot;nt&quot;&gt;--DEBUG&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;you add the modules you want to run, here we added &lt;em&gt;pretty_log&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;how-to-check-active-flows&quot;&gt;&lt;strong&gt;How to check active flows&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Once you run a basic topology and a controller you can check at any time active flows with:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# view flows&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl show
&lt;span class=&quot;c&quot;&gt;# view flow details&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-ofctl dump-flows s1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;3-click-programming&quot;&gt;&lt;strong&gt;3. Click programming&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;With Click we can program mininet Switches with our own Virtualized Network Functions, without the need of any controller.  Here we see some basic examples.&lt;/p&gt;

&lt;h3 id=&quot;what-is-click-the-click-modular-router&quot;&gt;&lt;strong&gt;What is Click&lt;/strong&gt; (&lt;a href=&quot;https://pdos.csail.mit.edu/papers/click:tocs00/paper.pdf&quot;&gt;The Click Modular Router&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;Click Modular Router is a fast C++ router implementation with its own driver for handling traffic which provide extremely efficient routing and packet processing. Click allows to build highly customizable router functions, with extreme ease of deployment and gives an extensible language to do it.&lt;/p&gt;

&lt;p&gt;This way routers can be implemented in linux hardware in a more efficient way, in fact Click achieves a very high forwarding rate per second. To do so Click gets rid of the interrupt driven architecture in favor of polling, avoiding expensive context switch and memory accesses.&lt;/p&gt;

&lt;p&gt;In Click there are &lt;em&gt;Elements&lt;/em&gt; with &lt;em&gt;input&lt;/em&gt; and &lt;em&gt;output&lt;/em&gt; ports. For example &lt;code class=&quot;highlighter-rouge&quot;&gt;FromDevice(eth0)&lt;/code&gt; gets all the packets from the &lt;em&gt;eth0&lt;/em&gt; interface.&lt;/p&gt;

&lt;p&gt;In click you attach element with &lt;code class=&quot;highlighter-rouge&quot;&gt;-&amp;gt;&lt;/code&gt;. Infact &lt;code class=&quot;highlighter-rouge&quot;&gt;FromDevice(eth0)-&amp;gt;Print&lt;/code&gt; is an example. For each element, you must link each input and output port, no spare ports are allowed.&lt;/p&gt;

&lt;p&gt;See for example: (Image from Click white paper &lt;a href=&quot;https://pdos.csail.mit.edu/papers/click:tocs00/paper.pdf&quot;&gt;here&lt;/a&gt;)
&lt;img style=&quot;display: block; margin: auto;&quot; src=&quot;/assets/click-example.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kohler/click/wiki&quot;&gt;Here there is the official wiki for Click&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-click-network-address-port-translator&quot;&gt;&lt;strong&gt;A Click Network Address Port Translator&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Create a plain file, &lt;code class=&quot;highlighter-rouge&quot;&gt;napt.click&lt;/code&gt; for example.&lt;/p&gt;

&lt;p&gt;First we have to get the input and output port of the switch. (only shown from one side, the same is for the internal interface).&lt;/p&gt;

&lt;p&gt;NOTE: you first have to get the interface names which are generated by Mininet.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// setup ifaces
from_ext  :: FromDevice($ext_if, METHOD LINUX, SNIFFER false);
to_ext  :: ToDevice($ext_if, METHOD LINUX);

to_ext_queue :: Queue(1024) -&amp;gt; to_ext;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to be able to send out on the same interface from multiple sources we need to set up a &lt;code class=&quot;highlighter-rouge&quot;&gt;Queue&lt;/code&gt; object which can take multiple inputs, otherwise we are restricted to just one.&lt;/p&gt;

&lt;p&gt;Then we differentiate the traffic, ARP requests, response and normal IP traffic with a &lt;code class=&quot;highlighter-rouge&quot;&gt;Classifier&lt;/code&gt; which match on specific bits. (4th argument means “all the others”)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// ARPR, ARR , IP Classifiers, other traffic
from_ext -&amp;gt; ext_cl :: Classifier(12/0806 20/0001, 12/0806 20/0002, 12/0800, -);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then the instantiated &lt;code class=&quot;highlighter-rouge&quot;&gt;ext_cl&lt;/code&gt; Classifier will have 4 output ports which will need to be dealt with.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// respond to ARP queries for the router external interface

ext_cl[0] -&amp;gt; ARPResponder(DmZ) -&amp;gt; Print(&quot;ARP_R_ext&quot;) -&amp;gt; to_ext_queue ;
ext_cl[1] -&amp;gt; [1]arp :: ARPQuerier(DmZ);

//Discard non-IP, non-ARP packets 
ext_cl[3] -&amp;gt; Print(&quot;DISCARDING NON IP PACKET&quot;) -&amp;gt; to_drop1 -&amp;gt; Discard;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ext_cl[0]: here arrives an ARP query, so the &lt;code class=&quot;highlighter-rouge&quot;&gt;ARPResponder&lt;/code&gt; will reply with the indicated values and &lt;code class=&quot;highlighter-rouge&quot;&gt;Print&lt;/code&gt; it, then the response will be sent back to the same interface.&lt;/li&gt;
  &lt;li&gt;ext_cl[1]: here arrives ARP responses, so the role of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ARPQuerier&lt;/code&gt; is to save the value locally.&lt;/li&gt;
  &lt;li&gt;ext_cl[3]: discard every other NON IP packet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we classify the IP traffic:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Classifying IP traffic
ext_cl[2] -&amp;gt;  Strip(14) -&amp;gt; CheckIPHeader
    -&amp;gt; ext_ipc :: IPClassifier(
    // ping from out to gateway
        icmp &amp;amp;&amp;amp; icmp type echo and dst $sw_ext_ip,
    // tcp udp traffic from ext to inside
        dst $sw_ext_ip and (tcp or udp),
    // ping response
        proto icmp &amp;amp;&amp;amp; icmp type echo-reply,
    // others
        -
    );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From here we can deal singularly with TCP or UDP packets, ICMP packets or anything else.&lt;/p&gt;

&lt;p&gt;For example we want to be able to respond to ICMP echo requests with:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// send back pings gw to outside
ext_ipc[0] -&amp;gt; Print(&quot;ICMP ECHO FROM EXT-&amp;gt;GW&quot;)
    -&amp;gt; ICMPPingResponder
    -&amp;gt; to_ext_arp_queue ;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here it finally comes the network translation part with an &lt;code class=&quot;highlighter-rouge&quot;&gt;IPRewriter&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rw :: IPRewriter(pattern $sw_ext_ip 1024-65534 - - 0 1);

rw[0] -&amp;gt; to_ext_arp_queue;
rw[1] -&amp;gt; to_in_arp_queue;

// FROM INTERNAL

int_ipc[1] -&amp;gt; Print(&quot;IP from INT to EXT&quot;) -&amp;gt; [0]rw;

// FROM EXTERNAL

ext_ipc[1] -&amp;gt; Print(&quot;IP from EXT to INT&quot;) -&amp;gt; [0]rw;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here the Rewriter takes as input the IP address to rewrite to and a range of ports, all fields are optional and you can decide. Lastly, 0 and 1 are the output device ports. In fact here we are translating packets IP address with the external facing router IP and sending them to the external interface which is &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;src(10.0.0.90) –&amp;gt; napt –&amp;gt; src(100.0.0.1)&lt;/p&gt;

&lt;p&gt;When the packets come back, the Rewriter keeps its mappings and will rewrite the same packet and send it to the internal network from the port &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You have to send the TCP and UDP packets ( &lt;code class=&quot;highlighter-rouge&quot;&gt;ext_ipc[1]&lt;/code&gt; ) to the port &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; of the Rewriter.&lt;/p&gt;

&lt;p&gt;And now you have your basic NAPT. Check the full examples on the github repo.&lt;/p&gt;

&lt;p&gt;To run click (with example interfaces) :&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /usr/local/bin/click &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; napt.click &lt;span class=&quot;nv&quot;&gt;int_if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ids-eth3 &lt;span class=&quot;nv&quot;&gt;ext_if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ids-eth1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can pass arguments like that, and each argument will be saved in its own variable.&lt;/p&gt;

&lt;h2 id=&quot;how-to-manage-click-from-pox-sdn-controller&quot;&gt;&lt;strong&gt;How to manage Click from POX SDN controller&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We manage to run each &lt;code class=&quot;highlighter-rouge&quot;&gt;.click&lt;/code&gt; file when the designated Mininet switch object will connect to the POX Controller. From there we can distinguish each one with its own DPID and launch the appropriate Click file.&lt;/p&gt;

&lt;p&gt;In POX I registered a new component called &lt;code class=&quot;highlighter-rouge&quot;&gt;clickElem&lt;/code&gt; which will handle the  connecting devices we want to run click on. A list of click elements DPIDs will be given as input.&lt;/p&gt;

&lt;p&gt;Within the &lt;code class=&quot;highlighter-rouge&quot;&gt;_handle_ConnectionUp&lt;/code&gt; event handler:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dpid&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clicks_dpids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ignoring connection from {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Connection from CLICK: [{}] - {} &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# start click modules
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;../nfv&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# launch lb1 (DNS side)
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dpid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;71&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sudo /usr/local/bin/click -f &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;click_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/lb.click int_if=lb1-eth2 ...&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# launch lb2 (HTTP side)
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dpid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sudo /usr/local/bin/click -f &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;click_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/lb.click int_if=lb2-eth2 ... &quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# launch ids
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dpid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sudo /usr/local/bin/click -f &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;click_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/ids.click int_if=ids-eth3 ... &quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# launch napt
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dpid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;74&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sudo /usr/local/bin/click -f &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;click_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/nat.click int_if=napt-eth2 ... &quot;&lt;/span&gt;
    
&lt;span class=&quot;c1&quot;&gt;# launch the process
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[{}] RUN: {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shlex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;click_proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;run&quot;&gt;&lt;strong&gt;Run&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;start-the-mininet-topology&quot;&gt;Start the Mininet Topology&lt;/h3&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make topo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;start-the-pox-sdn-controller&quot;&gt;Start the POX SDN Controller&lt;/h3&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;close-everything-and-clean&quot;&gt;Close everything and clean&lt;/h3&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 28 May 2019 00:00:00 +0200</pubDate>
        <link>https://carloalbertoscola.it//2019/network/sdn/python/software-defined-networking-nfv-example-with-pox-click-openflow/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2019/network/sdn/python/software-defined-networking-nfv-example-with-pox-click-openflow/</guid>
        
        
        <category>network</category>
        
        <category>sdn</category>
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Fault-Tolerant IP routing with Cisco HSRP. [Part 2]</title>
        <description>&lt;h1 id=&quot;how-to-configure-cisco-routers-with-hsrp&quot;&gt;&lt;strong&gt;&lt;center&gt;How to configure Cisco routers with HSRP.&lt;/center&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;fault-tolerant-ip-routing&quot;&gt;&lt;strong&gt;&lt;center&gt;Fault-Tolerant IP routing&lt;/center&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;backup-and-virtual-gateways&quot;&gt;&lt;center&gt;Backup and virtual gateways&lt;/center&gt;&lt;/h3&gt;
&lt;h4 id=&quot;hot-standby-router-protocol-hsrp&quot;&gt;&lt;center&gt;Hot Standby Router Protocol (HSRP)&lt;/center&gt;&lt;/h4&gt;

&lt;p&gt;If you haven’t read, here is the part 1 of the guide where we can see how to set up OSPF, BGP and Multicast in the network. [&lt;a href=&quot;/2019/notes/network/cisco/BGP-OSPF-network-routing/&quot;&gt;Link to PART 1&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here we will focus only on how to provide fault tolerance IP routing&lt;/strong&gt; from both the server and the host networks. Each subnet will connect physically to the two routers, one being the &lt;strong&gt;active&lt;/strong&gt; and the other being &lt;strong&gt;stand-by&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Three are the protocols mostly used for fault tolerance:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Gateway Load Balancing Protocol (GLBP)&lt;/li&gt;
  &lt;li&gt;Hot Standby Router Protocol (HSRP)&lt;/li&gt;
  &lt;li&gt;Virtual Router Redundancy Protocol (VRRP)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Having a &lt;em&gt;backup path&lt;/em&gt; is extremely important in order to satisfy SLA and avoid any downtime to whole networks due to a single link failure. HSRP provides a quick way to recover a faulty link or router malfunctioning and allows other nodes to be quickly and transparently redirected to the standby router which immediately will become the active one.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;display: block; margin: auto;&quot; src=&quot;/assets/hsrp.jpg&quot; /&gt;&lt;/p&gt;
&lt;center&gt; Figure 1. HSRP Virtual Router (from Cisco). &lt;/center&gt;

&lt;p&gt;HSRP allows multiple routers on a single LAN to share a &lt;strong&gt;virtual IP&lt;/strong&gt; and MAC address which is configured as the default gateway on the hosts. By sharing an IP address and a MAC (Layer 2) address, two or more routers can act as a single “virtual” router. They answer to ARP requests for the virtual IP.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;More here &lt;a href=&quot;https://www.cisco.com/c/en/us/td/docs/switches/lan/catalyst3560/software/release/12-2_52_se/configuration/guide/3560scg/swhsrp.html&quot;&gt;Cisco - Configuring HSRP&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;network-equipment--virtual&quot;&gt;Network Equipment  (virtual)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;4 Cisco 7301 routers&lt;/li&gt;
  &lt;li&gt;2 HP2524 switches (one is for server network and one for client network)&lt;/li&gt;
  &lt;li&gt;Virtual Machines (both on server and client network)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;network-topology&quot;&gt;Network Topology&lt;/h2&gt;
&lt;p&gt;The network topology we are going to recreate is described as follow:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/routers_setup_lab_gns3.png&quot; alt=&quot;lab setup&quot; /&gt;&lt;/p&gt;
&lt;center&gt; Figure 2. Full Network topology. &lt;/center&gt;

&lt;h3 id=&quot;client-and-server-network-availability&quot;&gt;Client and Server network availability&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;RTC&lt;/strong&gt; and &lt;strong&gt;RTD&lt;/strong&gt; are responsible of providing a backup link for both the client and server networks in case of failure. &lt;a href=&quot;https://www.cisco.com/c/en/us/support/docs/ip/hot-standby-router-protocol-hsrp/9234-hsrpguidetoc.html&quot;&gt;&lt;em&gt;Hot Standby Router Protocol&lt;/em&gt; or  &lt;strong&gt;HSRP&lt;/strong&gt;&lt;/a&gt; is used in both networks.&lt;/p&gt;

&lt;p&gt;HSRP is simpler than &lt;em&gt;Gateway Load Balancing Protocol&lt;/em&gt; (&lt;strong&gt;GLBP&lt;/strong&gt;) which runs on layer 3 and only has an active router to answer &lt;em&gt;ARP&lt;/em&gt; requests for the standby IP with a virtual MAC address. GLBP works on layer 2 and provides multiple virtual MAC addresses which could provide load balancing for huge networks. This is not needed here.&lt;/p&gt;

&lt;p&gt;We will have for servers subnet network (10.5.10.0/24)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;RTC&lt;/strong&gt; with 10.5.10.1 being the &lt;strong&gt;Active&lt;/strong&gt; Router&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;RTD&lt;/strong&gt; with 10.5.10.2 being the &lt;strong&gt;Stand-By&lt;/strong&gt; Router&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;VIRTUAL&lt;/strong&gt; gateway has the 10.5.10.3 IP address.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will have for clients subnet network (10.5.15.0/24)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;RTD&lt;/strong&gt; with 10.5.15.1 being the &lt;strong&gt;Active&lt;/strong&gt; Router&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;RTC&lt;/strong&gt; with 10.5.15.2 being the &lt;strong&gt;StandBy&lt;/strong&gt; Router&lt;/li&gt;
  &lt;li&gt;the &lt;strong&gt;VIRTUAL&lt;/strong&gt; gateway has the 10.5.15.3 IP address.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;HSRP provides high network availability by providing redundancy for IP traffic from hosts on networks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When a router is down, the other quickly become active and start routing traffic on the behalf of the virtual IP. The two routers periodically send control messages to check “health” status, if one fails, the other assumes control. How?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Devices running HSRP send and receive multicast UDP-based hello packets to detect router failure and to designate active and standby routers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;timers-value&quot;&gt;Timers value&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;hellotime&lt;/strong&gt;: between routers the &lt;em&gt;hellotime&lt;/em&gt; interval is &lt;strong&gt;3 seconds&lt;/strong&gt; by default. That means the time before other routers declare the active router to be down.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;holdtime&lt;/strong&gt;: the time  before the active or standby router is declared to be down, default is &lt;strong&gt;10 seconds&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;routers-configuration&quot;&gt;&lt;strong&gt;Routers Configuration&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;rtc&quot;&gt;&lt;strong&gt;RTC&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;interface gigabitEthernet 0/0
    ip address 10.5.10.1 255.255.255.0
    standby version 2
    standby 10 ip 10.5.10.3
    standby 10 priority 200
    standby 10 preempt
    no shut

interface fastEthernet 1/0
    ip address 10.5.15.2 255.255.255.0
    standby version 2
    standby 15 ip 10.5.15.3
    no shut

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;rtd&quot;&gt;&lt;strong&gt;RTD&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;interface gigabitEthernet 0/0
    ip address 10.5.15.1 255.255.255.0
    standby version 2
    standby 15 ip 10.5.15.3
    standby 15 priority 200
    standby 15 preempt
    no shut

interface fastEthernet 1/0
    ip address 10.5.10.2 255.255.255.0
    standby version 2
    standby 10 ip 10.5.10.3
    no shut
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On Hosts the VIRTUAL IP must be set as &lt;strong&gt;default gateway&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This configuration will allow IP fault tolerance.
For more detailed explanation look at the cisco documentation &lt;a href=&quot;https://www.cisco.com/c/en/us/td/docs/switches/lan/catalyst3560/software/release/12-2_52_se/configuration/guide/3560scg/swhsrp.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please feel free to make any comment! If anything is unclear, just write in the comment and I will update the post! Thanks for reading!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Apr 2019 00:00:00 +0200</pubDate>
        <link>https://carloalbertoscola.it//2019/notes/network/cisco/hsrp-cisco-router-configuration-part-two/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2019/notes/network/cisco/hsrp-cisco-router-configuration-part-two/</guid>
        
        <category>network</category>
        
        <category>routing</category>
        
        <category>cisco</category>
        
        
        <category>notes</category>
        
        <category>network</category>
        
        <category>cisco</category>
        
      </item>
    
      <item>
        <title>How to configure FreeRADIUS 3 with MySQL and EAP-TTLS</title>
        <description>&lt;h1 id=&quot;-complete-guide-on-how-to-set-up-freeradius-3x-with-mysql-backend-database-&quot;&gt;&lt;strong&gt;&lt;center&gt; Complete guide on how to set up FreeRADIUS 3.X with MySQL backend database &lt;/center&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;-eap-ttls-and-mysql--tls-database-communication-&quot;&gt;&lt;center&gt; EAP-TTLS and MySQL  TLS database communication &lt;/center&gt;&lt;/h2&gt;
&lt;h3 id=&quot;8021x-authentication-authorization-accounting&quot;&gt;&lt;center&gt;802.1X Authentication Authorization Accounting&lt;/center&gt;&lt;/h3&gt;
&lt;h4 id=&quot;-alpine-linux-lightweight-docker-container-&quot;&gt;&lt;center&gt; Alpine Linux lightweight Docker container &lt;/center&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img style=&quot;display: block; margin: auto;&quot; src=&quot;/assets/freeRADIUS.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Today we are going to explain how to set up a &lt;strong&gt;FreeRADIUS 3&lt;/strong&gt; server for  &lt;em&gt;Authentication&lt;/em&gt;, &lt;em&gt;Authorization&lt;/em&gt; and &lt;em&gt;Accounting&lt;/em&gt; (&lt;strong&gt;AAA&lt;/strong&gt;) along with a MySQL database for credentials storage and accounting logs accessed only through encrypted TLS connections. We will show how to set up FreeRADIUS with the secure &lt;strong&gt;EAP-TTLS&lt;/strong&gt; (Tunneled TLS) communication.&lt;/p&gt;

&lt;h2 id=&quot;what-is-freeradius&quot;&gt;What is &lt;strong&gt;&lt;em&gt;FreeRADIUS&lt;/em&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;FreeRADIUS is the most popular and most widely deployed open source RADIUS server. It supports all the most common client authentication protocols and its fast and scalable. It supports also Two Factor Authentication&lt;/p&gt;

&lt;p&gt;FreeRADIUS can be used for WiFi client authentication as well as with any other system that require client authentication as for example OpenVPN server.&lt;/p&gt;

&lt;p&gt;Each user will have a credential in the form
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;username&amp;gt;@&amp;lt;domain&amp;gt;&lt;/code&gt; and a respective password.&lt;/p&gt;

&lt;p&gt;For this tutorial let’s assume we have the &lt;code class=&quot;highlighter-rouge&quot;&gt;acme.com&lt;/code&gt; domain and a &lt;code class=&quot;highlighter-rouge&quot;&gt;test@acme.com&lt;/code&gt; user.&lt;/p&gt;

&lt;h3 id=&quot;how-does-radius-works&quot;&gt;How does RADIUS works?&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;A client will connect to a &lt;strong&gt;&lt;em&gt;Network Access Server&lt;/em&gt;&lt;/strong&gt; (NAS) first. This could be a router providing Wireless access. The client will not have any connectivity, the router is allowing only RADIUS traffic.&lt;/li&gt;
  &lt;li&gt;The router acting as a NAS will receive a &lt;code class=&quot;highlighter-rouge&quot;&gt;Access Request&lt;/code&gt; message from the client and will forward it to the RADIUS server.&lt;/li&gt;
  &lt;li&gt;The RADIUS Server will check the credentials and send back a response that could be &lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Accept&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Reject&lt;/code&gt; or a &lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Challenge&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The NAS will forward the response to the client, and if the authentication succeed, it will then open the communication to the internal network.
&lt;img style=&quot;display: block; margin: auto;&quot; src=&quot;/assets/radius.png&quot; /&gt;
Ref: &lt;a href=&quot;https://www.cisco.com/c/en/us/support/docs/security-vpn/remote-authentication-dial-user-service-radius/12433-32.html&quot;&gt;How does RADIUS work? by Cisco&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;eap-ttls-and-pap&quot;&gt;&lt;strong&gt;EAP-TTLS&lt;/strong&gt; and &lt;strong&gt;PAP&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;We will setup FreeRADIUS with EAP-TTLS. This means each client connecting to the NAS will first establish a secure TLS tunnel. This is called First Phase. In the Second Phase the client will send his credentials in cleartext*  with &lt;strong&gt;Password Authentication Protocol&lt;/strong&gt; (&lt;strong&gt;PAP&lt;/strong&gt;) but since those are sent over the TLS channel, none can read it and none can eavesdrop which user is trying to authenticate to the NAS.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;*The password is not actually sent in cleartext but it is rather hashed with the key shared between the NAS and the RADIUS Server. Still is not considered secure but since it is sent over an encrypted channel, that makes the mitigation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;mysql-initialization&quot;&gt;&lt;strong&gt;&lt;em&gt;MySQL&lt;/em&gt;&lt;/strong&gt; initialization&lt;/h2&gt;
&lt;p&gt;MySQL is used to keep track of clients login attempts, connection times and other accounting features and it will store the user credentials.&lt;/p&gt;

&lt;p&gt;First of all you need a MySQL Database running, then you have to create the tables needed for FreeRADIUS.&lt;/p&gt;

&lt;p&gt;Here is the FreeRADIUS SQL schema:&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;structure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'radacct'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radacct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;radacctid&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auto_increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;acctsessionid&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;acctuniqueid&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;nasipaddress&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;nasportid&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;nasporttype&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;acctstarttime&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;acctupdatetime&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;acctstoptime&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;acctinterval&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;acctsessiontime&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;acctauthentic&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;connectinfo_start&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;connectinfo_stop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;acctinputoctets&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;acctoutputoctets&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;calledstationid&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;callingstationid&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;acctterminatecause&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;servicetype&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;framedprotocol&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;framedipaddress&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radacctid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;UNIQUE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acctuniqueid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acctuniqueid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;framedipaddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;framedipaddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acctsessionid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acctsessionid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acctsessiontime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acctsessiontime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acctstarttime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acctstarttime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acctinterval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acctinterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acctstoptime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acctstoptime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nasipaddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nasipaddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INNODB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;structure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'radcheck'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radcheck&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auto_increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'=='&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;253&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;structure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'radgroupcheck'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radgroupcheck&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auto_increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;groupname&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'=='&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;253&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groupname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;structure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'radgroupreply'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radgroupreply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auto_increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;groupname&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'='&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;253&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groupname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;structure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'radreply'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radreply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auto_increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'='&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;253&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;structure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'radusergroup'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radusergroup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;groupname&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;priority&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;structure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'radpostauth'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radpostauth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auto_increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;authdate&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INNODB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;structure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'nas'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nas&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auto_increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;nasname&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;shortname&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'other'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ports&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'secret'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;community&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'RADIUS Client'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nasname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nasname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To execute just run:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;-prootpass&lt;/span&gt; radius &amp;lt; schema.sql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;assuming you already created the &lt;code class=&quot;highlighter-rouge&quot;&gt;radius&lt;/code&gt; database.&lt;/p&gt;

&lt;p&gt;And then we are going to create a user “radius” with the right privileges.&lt;/p&gt;

&lt;p&gt;Here we create the user &lt;strong&gt;&lt;em&gt;radius&lt;/em&gt;&lt;/strong&gt; with password &lt;strong&gt;&lt;em&gt;donotuseme&lt;/em&gt;&lt;/strong&gt; (if you want to restrict connections from a specific IP address only, you specify the IP instead of &lt;strong&gt;*&lt;/strong&gt;):&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;administrator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RADIUS&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'radius'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PASSWORD&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'radius'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'*'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'donotuseme'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'radius'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'*'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql_native_password&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'donotuseme'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SQL&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'radius'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accounting&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radacct&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'radius'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radpostauth&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'radius'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Insert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FreeRADIUS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credential&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radcheck&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;test@acme.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;SSHA2-256-Password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;:=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;ag6J2U52nmn7gkQM2h4eXEYQnHON7W9DyyGKxUSiAsFzYWx0c2FsdHNhbHQ=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the second part of the SQL code we are going to insert a valid RADIUS user credential for a valid REALM (&lt;em&gt;@acme.com&lt;/em&gt; we will get to this later) and generate a &lt;strong&gt;SHA256 salted password&lt;/strong&gt; compatible with FreeRADIUS.&lt;/p&gt;

&lt;p&gt;To do so I created a Python script &lt;strong&gt;&lt;a href=&quot;https://gist.github.com/bestrocker221/f506eee8ccadc60cab71d5f633b7cc07&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;. Just change “test” to the password you want to hash, and use a random salt. (I set the salt size limit to 12 charaters)&lt;/p&gt;

&lt;p&gt;For example the password ‘test’ becomes &lt;code class=&quot;highlighter-rouge&quot;&gt;ag6J2U52nmn7gkQM2h4eXEYQnHON7W9DyyGKx-
USiAsFzYWx0c2FsdHNhbHQ=&lt;/code&gt;
and we are going to save it as &lt;strong&gt;SSHA2-256-Password&lt;/strong&gt; in the database.&lt;/p&gt;

&lt;h3 id=&quot;mysql-tls-connection-setup&quot;&gt;&lt;strong&gt;MySQL TLS connection setup&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Now we are setting up MySQL to encrypt each communication with TLS 1.2 and rejecting every cleartext connection.&lt;/p&gt;

&lt;p&gt;This is my &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/my.cnf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# This group is read both both by the client and the server
# use it for options that affect everything
[client-server]

# This group is read by the server
[mysqld]
ssl-cipher=TLSv1.2
ssl-ca=/mysql-certs/ca.crt
ssl-cert=/mysql-certs/mysql.acme.com.crt
ssl-key=/mysql-certs/mysql.acme.com.pem
require_secure_transport=ON

# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0

datadir=/var/lib/mysql
bind-address=0.0.0.0
log-error=/var/log/mysql/error.log
skip-log-bin
log-output=FILE
general-log=1
general_log_file=/var/log/mysql/general.log

port=3306
user=mysql
socket=/run/mysqld/mysqld.sock
pid-file=/run/mysqld/mysqld.pid
default_authentication_plugin=mysql_native_password

[client]
ssl-cipher=TLSv1.2
ssl-ca=/mysql-certs/ca.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Off course make sure to copy your certificates under &lt;code class=&quot;highlighter-rouge&quot;&gt;/mysql-certs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;require_secure_transport=ON&lt;/code&gt; directive makes sure to reject every unencrypted connection request.&lt;/p&gt;

&lt;p&gt;And we are done with the MySQL part. If you want I wrote a Docker Container with this complete setup. At the end of the tutorial the link.&lt;/p&gt;

&lt;h2 id=&quot;freeradius-3-configuration&quot;&gt;&lt;strong&gt;FreeRadius 3 configuration&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;First install the FreeRADIUS packages required: (alpine linux)&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apk add freeradius openssl freeradius-mysql freeradius-eap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then the files we are going to modify are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;/etc/raddb/clients.conf&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;/etc/raddb/sites-available/default&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;/etc/raddb/sites-available/inner-tunnel&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;/etc/raddb/mods-available/sql&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;/etc/raddb/mods-available/eap&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;strong&gt;&lt;em&gt;It’s super easy to break the server with wrong configuration, so each time you modify something, make sure the server is starting correctly.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To run radius in debug mode: &lt;code class=&quot;highlighter-rouge&quot;&gt;radiusd -X&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;etcraddbclientconf-configuration-file&quot;&gt;&lt;strong&gt;/etc/raddb/client.conf&lt;/strong&gt; configuration file&lt;/h3&gt;
&lt;p&gt;Here you need to specify the clients allowed to send requests to the RADIUS server. Most of the times we want to configure a router as &lt;strong&gt;NAS&lt;/strong&gt; or &lt;em&gt;Network Access Server&lt;/em&gt; so that WiFi clients connecting will communicate to the RADIUS server via the router.&lt;/p&gt;

&lt;p&gt;Add these lines at the end of the file:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RADIUS_SECRET&lt;/code&gt; is a shared password that will be set also on the router.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ipaddr&lt;/code&gt; is the IP subnet of the router.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;client router_nas {
      ipaddr = 192.168.10.0/24
      secret = RADIUS_SECRET
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;etcraddbdefault-configuration-file&quot;&gt;&lt;strong&gt;/etc/raddb/default&lt;/strong&gt; configuration file&lt;/h3&gt;
&lt;p&gt;Under the &lt;code class=&quot;highlighter-rouge&quot;&gt;authorize {}&lt;/code&gt; section:&lt;/p&gt;

&lt;p&gt;Uncomment these lines&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eap {
               ok = return
               updated = return
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Under &lt;code class=&quot;highlighter-rouge&quot;&gt;authenticate {}&lt;/code&gt; section make sure to uncomment:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Under the &lt;code class=&quot;highlighter-rouge&quot;&gt;accounting {}&lt;/code&gt; section uncomment the sql line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Under the &lt;code class=&quot;highlighter-rouge&quot;&gt;session {}&lt;/code&gt; uncomment the &lt;code class=&quot;highlighter-rouge&quot;&gt;sql&lt;/code&gt; line.&lt;/p&gt;

&lt;p&gt;Under the &lt;code class=&quot;highlighter-rouge&quot;&gt;post-auth {}&lt;/code&gt; section uncomment the &lt;code class=&quot;highlighter-rouge&quot;&gt;sql&lt;/code&gt; line.&lt;/p&gt;

&lt;p&gt;Under the &lt;code class=&quot;highlighter-rouge&quot;&gt;post-auth {}&lt;/code&gt; section, under the &lt;code class=&quot;highlighter-rouge&quot;&gt;Post-Auth-Type REJECT {}&lt;/code&gt; uncomment the &lt;code class=&quot;highlighter-rouge&quot;&gt;sql&lt;/code&gt; line.&lt;/p&gt;

&lt;h3 id=&quot;etcraddbsites-availableinner-tunnel&quot;&gt;&lt;strong&gt;/etc/raddb/sites-available/inner-tunnel&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This is a virtual server that handles &lt;em&gt;only&lt;/em&gt; inner tunnel requests for EAP-TTLS and PEAP types.&lt;/p&gt;

&lt;p&gt;Under &lt;code class=&quot;highlighter-rouge&quot;&gt;authorize {}&lt;/code&gt; make sure both &lt;code class=&quot;highlighter-rouge&quot;&gt;sql&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;eap {..}&lt;/code&gt; are uncommented.&lt;/p&gt;

&lt;p&gt;Under &lt;code class=&quot;highlighter-rouge&quot;&gt;authenticate {}&lt;/code&gt; make sure &lt;code class=&quot;highlighter-rouge&quot;&gt;eap&lt;/code&gt; is uncommented.&lt;/p&gt;

&lt;p&gt;Under &lt;code class=&quot;highlighter-rouge&quot;&gt;session {}&lt;/code&gt; make sure &lt;code class=&quot;highlighter-rouge&quot;&gt;sql&lt;/code&gt; is uncommented.&lt;/p&gt;

&lt;p&gt;Under &lt;code class=&quot;highlighter-rouge&quot;&gt;post-auth {}&lt;/code&gt; make sure &lt;code class=&quot;highlighter-rouge&quot;&gt;sql&lt;/code&gt; is uncommented as well as in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Post-Auth-Type REJECT {}&lt;/code&gt; subsection.&lt;/p&gt;

&lt;h3 id=&quot;etcraddbmods-availablesql&quot;&gt;&lt;strong&gt;/etc/raddb/mods-available/sql&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This is the configuration file for the SQL module.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sql {
        
        driver = &quot;rlm_sql_mysql&quot;

        mysql {
               # If any of the files below are set, TLS encryption is enabled
               tls {
                       ca_file = &quot;/etc/raddb/ca.crt&quot;
                       # If you want to use client certificates for MySQL TLS
                       certificate_file = &quot;/etc/raddb/rad_client.crt&quot;
                       private_key_file = &quot;/etc/raddb/rad_client.pem&quot;
               }

               # If yes, (or auto and libmysqlclient reports warnings are
               # available), will retrieve and log additional warnings from
               # the server if an error has occured. Defaults to 'auto'
               warnings = yes
        }
        dialect = &quot;mysql&quot;

        # Connection info:
        server = &quot;RADIUS_SERVER_IP&quot;
        port = 3306
        login = &quot;radius&quot;
        password = &quot;RADIUS_USR_PASSWORD&quot;
    
        # Database table configuration for everything except Oracle
        radius_db = &quot;radius&quot;
        
        read_clients = &quot;yes&quot;
        sql_user_name = &quot;%{User-Name}&quot;

        
        # If you want both stop and start records logged to the
        # same SQL table, leave this as is.  If you want them in
        # different tables, put the start table in acct_table1
        # and stop table in acct_table2
        acct_table1 = &quot;radacct&quot;
        acct_table2 = &quot;radacct&quot;

        # Allow for storing data after authentication
        postauth_table = &quot;radpostauth&quot;

        # Tables containing 'check' items
        authcheck_table = &quot;radcheck&quot;
        groupcheck_table = &quot;radgroupcheck&quot;

        # Tables containing 'reply' items
        authreply_table = &quot;radreply&quot;
        groupreply_table = &quot;radgroupreply&quot;

        # Table to keep group info
        usergroup_table = &quot;radusergroup&quot;

        # Remove stale session if checkrad does not see a double login
        delete_stale_sessions = yes

        pool {
                start = ${thread[pool].start_servers}

                #  Minimum number of connections to keep open
                min = ${thread[pool].min_spare_servers}

                #  Maximum number of connections
                max = ${thread[pool].max_servers}

                #  Spare connections to be left idle
                spare = ${thread[pool].max_spare_servers}

                #  Number of uses before the connection is closed
                uses = 0

                #  The number of seconds to wait after the server tries
                #  to open a connection, and fails.  During this time,
                #  no new connections will be opened.
                retry_delay = 30

                # The lifetime (in seconds) of the connection
                lifetime = 0

                #  idle timeout (in seconds).  A connection which is
                #  unused for this length of time will be closed.
                idle_timeout = 60
        }

        # Table to keep radius client info
        client_table = &quot;nas&quot;

        # This entry should be used for the default instance (sql {})
        # of the SQL module.
        group_attribute = &quot;SQL-Group&quot;

        # Read database-specific queries
        $INCLUDE ${modconfdir}/${.:name}/main/${dialect}/queries.conf
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To &lt;strong&gt;enable the SQL module&lt;/strong&gt; make sure &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/raddb/mods-enabled/sql&lt;/code&gt; is existing, otherwise:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /etc/raddb/mods-available/sql /etc/raddb/mods-enabled/sql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;etcraddbmods-availableeap&quot;&gt;&lt;strong&gt;/etc/raddb/mods-available/eap&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Among the other options, the ones that need to be changed are:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eap {
    ...

    default_eap_type = ttls

    ...

    tls-config tls-common {
        private_key_file = /etc/raddb/radius.acme.com.key
        certificate_file = /etc/raddb/radius.acme.com.crt
        ca_file = /etc/raddb/ca.crt

        #  For DH cipher suites to work, you have to
        #  run OpenSSL to create the DH file first:
        #       openssl dhparam -out certs/dh 2048
        dh_file = /etc/raddb/dh.pem
        
        random_file = /dev/urandom

        cipher_list = &quot;HIGH&quot;
        cipher_server_preference = yes
        tls_min_version = &quot;1.2&quot;
        ecdh_curve = &quot;secp384r1&quot;
    }

    ...

    ttls {
        # make sure these lines are the same

        tls = tls-common

        virtual_server = &quot;inner-tunnel&quot;

    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Off course copy the respective certificates to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/raddb/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To &lt;strong&gt;enable the EAP module&lt;/strong&gt; make sure &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/raddb/mods-enabled/eap&lt;/code&gt; is existing, otherwise:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /etc/raddb/mods-available/eap /etc/raddb/mods-enabled/eap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Assuming you have the current latest OPENSSL version installed. If FreeRADIUS is giving some security error related to openssl you need to add &lt;code class=&quot;highlighter-rouge&quot;&gt;allow_vulnerable_openssl = &quot;CVE-2016-6309&quot;&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/raddb/radiusd.conf&lt;/code&gt; under the &lt;code class=&quot;highlighter-rouge&quot;&gt;security {}&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;We have now finished with the settings. As said above, after each file configuration change, restart the FreeRADIUS server and check that everything is running without errors.&lt;/p&gt;

&lt;h2 id=&quot;testing&quot;&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;You can run FreeRADIUS in debug mode and start to test it.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;radiusd &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can test the basic PAP authentication (without EAP-TTLS) with:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;radtest &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;@acme.com &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;192.168.5.12 0 testing123 &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Assuming:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.5.12&lt;/code&gt; is the FreeRADIUS IP address&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;testing123&lt;/code&gt; is the shared password&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test@acme.com&lt;/code&gt; is a user stored in the database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you can try to configure the Router to use EAP for WiFi client authentication. Always look at the logs in the FreeRADIUS server and try to understand what is going on.&lt;/p&gt;

&lt;h3 id=&quot;testing-eap-ttls&quot;&gt;&lt;strong&gt;Testing EAP-TTLS&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;wpa-supplicant&lt;/strong&gt; is supplying the &lt;strong&gt;&lt;em&gt;eapol_test&lt;/em&gt;&lt;/strong&gt; program to test RADIUS EAP.&lt;/p&gt;

&lt;p&gt;Create a file, &lt;code class=&quot;highlighter-rouge&quot;&gt;eapol-tls.conf&lt;/code&gt; for example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;network={
     ssid=&quot;SSID_OF_THE_WIFI_NETWORK&quot;
     key_mgmt=WPA-EAP
     eap=TTLS
     identity=&quot;test@acme.com&quot;
     anonymous_identity=&quot;anonymous&quot;
     password=&quot;INSERT_THE_USER_PASSWORD&quot;
     phase2=&quot;auth=PAP&quot;

     eapol_flags=3
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And run it with:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;eapol_test &lt;span class=&quot;nt&quot;&gt;-a192&lt;/span&gt;.168.5.12 &lt;span class=&quot;nt&quot;&gt;-p1812&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-stest&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ceapol-tls&lt;/span&gt;.conf &lt;span class=&quot;nt&quot;&gt;-r0&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-stesting123&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where for example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.5.12&lt;/code&gt; is the FreeRADIUS server IP address&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1812&lt;/code&gt; is the default port&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; is the password&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;eapol-tls.conf&lt;/code&gt; is the config file for the test&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;testing123&lt;/code&gt; is the shared key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If everything has been set up correctly you should be able to see &lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Accept&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Congratulations! Now you can continue setting up the Router with your new FreeRADIUS server!&lt;/p&gt;

&lt;h2 id=&quot;github-repository&quot;&gt;GitHub Repository&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bestrocker221/freeRADIUS-alpine&quot; target=&quot;_blank&quot;&gt;
    &lt;img class=&quot;github-img&quot; src=&quot;/assets/github.ico&quot; href=&quot;https://github.com/bestrocker221/freeRADIUS-alpine&quot; target=&quot;_blank&quot; /&gt;
    Here is the link to the Github &lt;strong&gt;freeRADIUS + MySQL&lt;/strong&gt; repository.
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please feel free to make any comment! If anything is unclear, just write in the comment and I will update the post!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Last modified:&lt;/em&gt; 31 May 2019&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Feb 2019 00:00:00 +0100</pubDate>
        <link>https://carloalbertoscola.it//2019/network/security/linux/freeradius-3-setup-mysql-eap-ttls/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2019/network/security/linux/freeradius-3-setup-mysql-eap-ttls/</guid>
        
        
        <category>network</category>
        
        <category>security</category>
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Enabling SSL on NGINX reverse proxy towards non-SSL apache</title>
        <description>&lt;h1 id=&quot;enabling-ssl-on-nginx-reverse-proxy-towards-non-ssl-apache&quot;&gt;&lt;strong&gt;Enabling SSL on NGINX reverse proxy towards non-SSL apache&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;nginx-and-apache-prestashop-docker-containers&quot;&gt;NGINX and APACHE Prestashop Docker containers&lt;/h2&gt;
&lt;center&gt; Last modified: 17 January 2019 &lt;/center&gt;

&lt;p&gt;My Setup is as follow:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;NGINX web facing proxy (docker container) that accepts connections on port 80/443.&lt;/li&gt;
  &lt;li&gt;APACHE internal web server (docker container) hosting the Prestashop website&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prestashop 1.7.3 is installed in an internal server with APACHE.&lt;/p&gt;

&lt;p&gt;NGINX is the main web proxy which forwards encrypted requests to internal UNENCRYPTED server running APACHE (also docker containers).&lt;/p&gt;

&lt;p&gt;So the setup is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INTERNET –(SSL)–&amp;gt; NGINX —(NON-SSL)—&amp;gt;INTERNAL SERVER (apache)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is &lt;strong&gt;useless&lt;/strong&gt; to set up TLS also on the apache web server, it would be redundant and would add more load on the server.&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The problem is that I cannot enable SSL on Prestashop directly on the internal Apache web server which hosts the code. Apache uses port 80 and would get redirection loops towards the proxy server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Without enabling SSL on prestashop, it doesnt rewrite URLs to the correct https scheme.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My actual _nginx.conf:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
        listen      80 reuseport;
        server_name  localhost &amp;lt;domain&amp;gt;;
        
        
        modsecurity off;
        modsecurity_rules_file /etc/nginx/modsecurity.d/include.conf;
        server_tokens off;

        add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;

        rewrite ^ https://&amp;lt;domain&amp;gt;$request_uri? permanent;

    }

    server {
        listen       443 ssl default_server http2;
        server_name  &amp;lt;domain&amp;gt;;

        ssl_certificate      certs/cert.pem;
        ssl_certificate_key  certs/privkey.pem;

        ssl_session_cache    shared:SSL:10m;
        ssl_session_timeout  15m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        ssl_protocols TLSv1.2;
        ssl_ecdh_curve secp384r1;

        ssl_stapling on;
        ssl_stapling_verify on;

#       add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header Referrer-Policy &quot;strict-origin&quot; always;
        add_header X-XSS-Protection &quot;1; mode=block&quot;;
        add_header Content-Security-Policy &quot;upgrade-insecure-requests;  ... ;


        location / {
            resolver 127.0.0.11 valid=30s;

            proxy_pass   http://APACHE_PRIVATE_IP;
            proxy_http_version 1.1;           

            #proxy_set_header Host APACHE_PRIVATE_IP;
            proxy_set_header Host  &amp;lt;domain&amp;gt;;
            index index.html index.php;

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;            
            
            root APACHE_ROOT_DIR/htdocs/DOMAIN;
            proxy_bind  MODSEC_INT_IP;
            proxy_pass_request_headers      on;
        }
    }


}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note:&lt;/p&gt;

&lt;p&gt;If you also need &lt;a href=&quot;https://github.com/SpiderLabs/ModSecurity&quot;&gt;&lt;strong&gt;&lt;em&gt;ModSecurity Web Application Firewall&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;, you just need to install first the rules (&lt;a href=&quot;https://coreruleset.org/&quot;&gt;OWASP core ruleset&lt;/a&gt;) and then use these two lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;modsecurity on;
modsecurity_rules_file /etc/nginx/modsecurity.d/include.conf;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;solution&quot;&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;On NGINX using&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rewrite ^ https://&amp;lt;DOMAIN&amp;gt;$request_uri? permanent;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First:  I need prestashop to create &lt;strong&gt;https&lt;/strong&gt; links instead of &lt;strong&gt;http&lt;/strong&gt; link though the function &lt;strong&gt;&lt;em&gt;BaseLink&lt;/em&gt;&lt;/strong&gt; so i changed “http” to “https” in the last row:&lt;/p&gt;

&lt;p&gt;File: &lt;em&gt;classes/Link.php&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public function getBaseLink($idShop = null, $ssl = null, $relativeProtocol = false)
    {
   ﻿     static $force_ssl = true;  /*CHANGED null to true */

        if ($ssl === null) {
            if ($force_ssl === null) {
                $force_ssl = (Configuration::get('PS_SSL_ENABLED') &amp;amp;&amp;amp; Configuration::get('PS_SSL_ENABLED_EVERYWHERE'));
            }
            $ssl = $force_ssl;
        }
﻿
        if (Configuration::get('PS_MULTISHOP_FEATURE_ACTIVE') &amp;amp;&amp;amp; $idShop !== null) {
            $shop = new Shop($idShop);
        } else {
            $shop = Context::getContext()-&amp;gt;shop;
        }

        if ($relativeProtocol) {
            $base = '//'.($ssl &amp;amp;&amp;amp; $this-&amp;gt;ssl_enable ? $shop-&amp;gt;domain_ssl : $shop-&amp;gt;domain);
        } else {
            $base = (($ssl &amp;amp;&amp;amp; $this-&amp;gt;ssl_e﻿nable) ? 'https://'.$shop-&amp;gt;domain_ssl : 'https://'.$shop-&amp;gt;domain); /*CHANGED second http to https */
        }

        return $base.$shop-&amp;gt;getBaseURI();
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I just forced PS to use https whether it is activated or not.&lt;/p&gt;

&lt;p&gt;Now the back office works flawlessly but the front end get loop redirection because apache sees HTTP requests instead of HTTPS ones and so send a Location header to the HTTPS site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now you just need to make apache believe those are HTTPS requests even if those are actually HTTP so add these lines in NGINX reverse proxy nginx.conf:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;proxy_set_header X-Scheme https;
proxy_set_header X-Forwarded-Proto https;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and everything works!&lt;/p&gt;

&lt;h3 id=&quot;prestashop-forum&quot;&gt;Prestashop Forum&lt;/h3&gt;
&lt;p&gt;My question with related answer is also on the official Prestashop forum &lt;a href=&quot;https://www.prestashop.com/forums/topic/890871-solvedenabling-ssl-on-nginx-reverse-proxy-towards-non-ssl-apache&quot;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Jan 2019 00:00:00 +0100</pubDate>
        <link>https://carloalbertoscola.it//2019/web/security/prestashop-ssl-NGINX-reverse-proxy-to-non-ssl-apache/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2019/web/security/prestashop-ssl-NGINX-reverse-proxy-to-non-ssl-apache/</guid>
        
        
        <category>web</category>
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>A Cisco routing lab network with GNS3. [Part 1]</title>
        <description>&lt;h1 id=&quot;-how-to-configure-cisco-routers-with-routing-protocols-&quot;&gt;&lt;center style=&quot;font-weight: bold&quot;&gt; How to configure Cisco routers with routing protocols. &lt;/center&gt;&lt;/h1&gt;
&lt;h2 id=&quot;bgp-ospf-hsrp-and-multicast-routing-part-1&quot;&gt;BGP, OSPF, HSRP and Multicast routing. &lt;strong&gt;[PART 1]&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;lets-set-up-a-virtual-router-environment-from-scratch&quot;&gt;Let’s set up a virtual router environment from scratch!&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Last modified:&lt;/em&gt; 18 June 2019&lt;/p&gt;

&lt;p&gt;Hello everybody, in this post we are going to learn step by step how to setup a fully functioning network environment with the help of &lt;a href=&quot;https://www.gns3.com/&quot;&gt;&lt;em&gt;Graphical Network Simulator-3&lt;/em&gt;&lt;/a&gt; (&lt;strong&gt;GNS3&lt;/strong&gt;). This exercise aims to be helpful with the study of network routing protocols.&lt;/p&gt;

&lt;p&gt;We are going to create an ISP basic network.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Network topology explanation&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Routing protocol choices&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fault tolerant routing&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Multicast routing&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The full code configuration of the four Cisco routers is found at the end of the page.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Table of Acronyms&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;BGP&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Border Gateway Protocol&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;OSPF&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Open Shortest Path First&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;RIP&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Routing Information Protocol&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;AS&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Autonomous System&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;HSRP&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Hot Standby Router Protocol&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;PIM&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Protocol Independent Multicast&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;RP&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Rendezvous Point&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;network-equipment--virtual&quot;&gt;Network Equipment  (virtual)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;4 Cisco 7301 routers&lt;/li&gt;
  &lt;li&gt;2 HP2524 switches (one is for server network and one for client network)&lt;/li&gt;
  &lt;li&gt;Virtual Machines (both on server and client network)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-network-topology-&quot;&gt;&lt;center style=&quot;font-weight: bold&quot;&gt; Network Topology &lt;/center&gt;&lt;/h2&gt;
&lt;p&gt;The network topology we are going to recreate is described as follow:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/routers_setup_lab_gns3.png&quot; alt=&quot;network topology routers autonomous systems&quot; /&gt;&lt;/p&gt;
&lt;center&gt; Figure 1. Full Network topology. &lt;/center&gt;
&lt;p&gt;Let’s explain the topology in details.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;strong&gt;AS13&lt;/strong&gt; is our competence &lt;em&gt;Autonomous System&lt;/em&gt; and we can consider it as managed by our ISP called &lt;em&gt;isp5&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AS2&lt;/strong&gt; is considered the router connected to the backbone network, providing connectivity.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AS14&lt;/strong&gt; is considered an other ISP’s border router.&lt;/li&gt;
  &lt;li&gt;AS14 is also considered a &lt;strong&gt;Peering ISP&lt;/strong&gt;, meaning in case of network failures, traffic can flow from one ISP to the other to allow Internet reachability.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inside our &lt;strong&gt;AS13&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;RTA and RTB&lt;/strong&gt; are &lt;strong&gt;area border routers&lt;/strong&gt;. They are both &lt;strong&gt;e-BGP&lt;/strong&gt; (to the outside) and &lt;strong&gt;i-BGP&lt;/strong&gt; (to the inside) peers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;RTA&lt;/strong&gt; is e-BGP peering with AS2. &lt;strong&gt;RTB&lt;/strong&gt; is e-BGP peering with AS14. Internally, RTA and RTB are i-BGP peers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;RTC and RTD&lt;/strong&gt; provide fault tolerant access to server and client networks respectively.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;dynamic-ip-routing&quot;&gt;&lt;strong&gt;Dynamic IP routing&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;For the internal routing, Open Shortest Path First or &lt;strong&gt;OSPF&lt;/strong&gt; version 2 will be used. &lt;strong&gt;RTA&lt;/strong&gt; and &lt;strong&gt;RTB&lt;/strong&gt; will also advertise the &lt;em&gt;default route&lt;/em&gt; through OSPF.&lt;/p&gt;

&lt;p&gt;Border Gateway Protocol or &lt;strong&gt;BGP&lt;/strong&gt; is used for external routing &lt;strong&gt;AS13-AS2&lt;/strong&gt; and &lt;strong&gt;AS13-AS14&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;To direct the traffic we will set BGP &lt;strong&gt;local preferences&lt;/strong&gt; for routes from AS2 and AS14.&lt;/li&gt;
  &lt;li&gt;RTA and RTB will advertise AS13’s OSPF paths to AS2 and AS14.&lt;/li&gt;
  &lt;li&gt;Routes coming from AS2 will have &lt;strong&gt;higher&lt;/strong&gt; local preference value and will be the preferred ones.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The link &lt;strong&gt;RTA-AS2&lt;/strong&gt; is called &lt;em&gt;primary link&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The link &lt;strong&gt;RTB-AS14&lt;/strong&gt; is called &lt;em&gt;private link&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ospf-configuration&quot;&gt;&lt;strong&gt;OSPF Configuration&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Let’s assume each router has its interfaces already configured with the IP addresses shown in the Figure 1.&lt;/p&gt;

&lt;p&gt;Firstly for each router we set up the &lt;code class=&quot;highlighter-rouge&quot;&gt;router-id&lt;/code&gt; correspondent to the router loopback address with: (RTA’s OSPF mode example)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;router-id 10.5.4.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In &lt;strong&gt;RTA&lt;/strong&gt;’s OSPF setting, we will use “&lt;em&gt;default-information originate always metric 20&lt;/em&gt;” to distribute default route to RTC and RTD. This default route points to RTA. RTB will not apply this default route since it is also a border router.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;RTB&lt;/strong&gt;’s OSPF setting, we will use “&lt;em&gt;default-information originate always metric 200&lt;/em&gt;” to distribute default route to RTC and RTD. This default route points to RTB. RTA will not apply this default route since it is also a border router.&lt;/p&gt;

&lt;p&gt;[Note] &lt;strong&gt;RTA&lt;/strong&gt;’s metric 20 &amp;lt; &lt;strong&gt;RTB&lt;/strong&gt;’s metric 200.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why? Because we want to route traffic to the peering ISP &lt;strong&gt;only&lt;/strong&gt; if some failures happen on the primary link.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then &lt;strong&gt;RTC&lt;/strong&gt; and &lt;strong&gt;RTD&lt;/strong&gt; will choose &lt;strong&gt;RTA&lt;/strong&gt; as default route destination but NOTE, in &lt;strong&gt;RTC&lt;/strong&gt; and &lt;strong&gt;RTD&lt;/strong&gt;’s routing table, the default route only shows the &lt;strong&gt;next-hop&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If the primary link is down, &lt;strong&gt;RTC&lt;/strong&gt; and &lt;strong&gt;RTD&lt;/strong&gt; will send the packets outside only through &lt;strong&gt;RTB&lt;/strong&gt;. &lt;strong&gt;RTB&lt;/strong&gt; will then forward the packets to the outside using the private link. If RTA is down, &lt;strong&gt;RTC&lt;/strong&gt; and &lt;strong&gt;RTD&lt;/strong&gt; will choose &lt;strong&gt;RTB&lt;/strong&gt; as default route destination.&lt;/p&gt;

&lt;h3 id=&quot;rta-ospf-configuration&quot;&gt;RTA OSPF Configuration&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;router ospf 1
    router-id 10.5.4.1
    network 10.5.1.0 0.0.0.3 area 0
    network 10.5.0.0 0.0.0.3 area 0
    network 10.5.4.1 0.0.0.0 area 0
    default-information originate always metric 20
    exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;[for newcomers]
&lt;code class=&quot;highlighter-rouge&quot;&gt;network &amp;lt;ip-address&amp;gt; &amp;lt;wildcard-mask&amp;gt; area &amp;lt;area-id&amp;gt;&lt;/code&gt; : Defines an interface on which OSPF runs and defines the area ID for that interface.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For each router we are telling OSPF to advertise the ip and the netmask reachable by the router to the selected &lt;em&gt;area&lt;/em&gt; (in this case 0, backbone).&lt;/p&gt;

&lt;p&gt;After this step each router should be able to discover and communicate to each other.&lt;/p&gt;

&lt;p&gt;For every possible information about OSPF commands and configuration the &lt;a href=&quot;https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/iproute_ospf/configuration/xe-16/iro-xe-16-book/iro-cfg.html&quot;&gt;Cisco OSPF official guide&lt;/a&gt; is a must read.&lt;/p&gt;

&lt;p&gt;Other routers OSPF configurations are at the end of the article.&lt;/p&gt;
&lt;h2 id=&quot;bgp-configuration&quot;&gt;&lt;strong&gt;BGP configuration&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Firstly for each router we set up the &lt;code class=&quot;highlighter-rouge&quot;&gt;router-id&lt;/code&gt; correspondent to the router loopback address with:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bgp router-id 10.5.4.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In &lt;strong&gt;RTA&lt;/strong&gt;’s BGP setting, we aggregate the addresses to 10.5.0.0/20 (since our network is using this segment we don’t want to advertise multiple useless routes, just the main one is necessary to reach AS13). We also redistribute our OSPF route in BGP (or we could add RTA’s nearby network 10.5.0.0/30 and 10.5.1.0/30). 
This is done with: (RTA)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aggregate-address 10.5.0.0 255.255.240.0 summary-only
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In &lt;strong&gt;RTA&lt;/strong&gt;’s routing table, we also add a static route to &lt;strong&gt;RTB&lt;/strong&gt;’s Loopback address for network 10.5.5.0/30. Since we use aggregate-address in RTA’s BGP setting, it will include 10.5.5.0/30. Actually RTA does not know where &lt;strong&gt;RTB&lt;/strong&gt;’s Loopback is at all. RTB will not advertise that network to OSPF or BGP.
This is done with: (RTA)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip route 10.5.5.0 255.255.255.252 10.5.4.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In addition, we are also using Loopback of RTA and RTB to establish the BGP TCP connections. This avoids failed interfaces and links with the help of OSPF routing.&lt;/p&gt;

&lt;h3 id=&quot;bgp-neighbors&quot;&gt;BGP neighbors&lt;/h3&gt;
&lt;p&gt;Next we set up the BGP peering with AS2 and AS14.&lt;/p&gt;

&lt;p&gt;In RTA we will set up AS2 as &lt;strong&gt;E-BGP&lt;/strong&gt; peer and RTB as &lt;strong&gt;I-BGP&lt;/strong&gt; peer.&lt;/p&gt;

&lt;p&gt;We set up the neighboring to the destination IP as:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;neighbor 10.0.32.1 remote-as 2
neighbor 10.5.4.2 remote-as 13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next we set up the &lt;strong&gt;next-hop-self&lt;/strong&gt; bgp attribute.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;neighbor 10.5.4.2 next-hop-self
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When a new route from an e-bgp peer is learned from RTA, the internal peer (RTB) will learn the prefix through i-bgp. If RTB does not have a route towards that IP, RTB will not be able to forward packets.
The &lt;strong&gt;next-hop-self&lt;/strong&gt; BGP attribute allow the internal bgp peer (RTB) to set the RTA address as ‘&lt;em&gt;next-hop&lt;/em&gt;’ for routes learned from i-bgp. This way RTB will forward packets to RTA, and than it is RTA responsibility to forward out those packets.&lt;/p&gt;

&lt;p&gt;BGP gives us an option to change the source of packets sent. In this case we can use Loopback interface as source of BGP packets sent between these neighbors. This way if one of the paths fails, the other will be used. Moreover by using loopback interface as update source, the benefit is that the BGP session won’t go down when physical interface goes down.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;neighbor 10.5.4.2 update-source loopback 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally to redistribute OSPF routes into BGP:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;redistribute ospf 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;complete-bgp-configuration-of-router-rta&quot;&gt;Complete BGP configuration of Router RTA&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;router bgp 13
    bgp router-id 10.5.4.1
    aggregate-address 10.5.0.0 255.255.240.0 summary-only
    redistribute ospf 1
    neighbor 10.0.32.1 remote-as 2
    neighbor 10.0.32.1 route-map PREF_FROM_AS2 in
    neighbor 10.5.4.2 remote-as 13
    neighbor 10.5.4.2 next-hop-self
    neighbor 10.5.4.2 update-source loopback 1
    no auto-summary
    no synchronization
    exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;fault-tolerant-ip-routing&quot;&gt;&lt;strong&gt;Fault-tolerant IP routing&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;from-as13-to-the-internet&quot;&gt;From AS13 To the Internet&lt;/h3&gt;
&lt;p&gt;We are going to set up our &lt;strong&gt;AS13&lt;/strong&gt; area with one back up link.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;When the link &lt;strong&gt;&lt;em&gt;RTA-AS2&lt;/em&gt;&lt;/strong&gt; is operating without errors, all the AS13’s traffic will be routed to the Internet through the link RTA-AS2 with the use of &lt;strong&gt;BGP&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;When the link &lt;strong&gt;&lt;em&gt;RTA-AS2&lt;/em&gt;&lt;/strong&gt; is down, for whatever reason, all traffic will be routed to the backup link &lt;strong&gt;&lt;em&gt;RTB-AS14&lt;/em&gt;&lt;/strong&gt;. From there, the peering ISP will forward the traffic correctly to the AS2.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When the link to AS2 is down, after a timer timeout, &lt;strong&gt;RTB&lt;/strong&gt; will spread its BGP route to OSPF so that the &lt;em&gt;default route&lt;/em&gt; to AS2 will be through AS14.&lt;/p&gt;

&lt;h3 id=&quot;how-to-setup-primary-and-secondary-link&quot;&gt;How to setup primary and secondary link&lt;/h3&gt;
&lt;p&gt;To set default route to RTA, and back up route to RTB for outgoing connections to outside we first create a &lt;code class=&quot;highlighter-rouge&quot;&gt;route-map&lt;/code&gt; for &lt;strong&gt;incoming&lt;/strong&gt; routes in BGP config mode: (RTA)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;neighbor 10.0.32.1 route-map PREF_FROM_AS2 in
exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;“PREF_FROM_AS2” is the name of the route-map.
It means “all the routes coming (&lt;strong&gt;in&lt;/strong&gt;) from AS2”.&lt;/p&gt;

&lt;p&gt;then we define the route-map this way: (RTA)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;route-map PREF_FROM_AS2 permit 20
set local-preference 300
exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While in RTB the local preference is lower:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;neighbor 10.5.5.1 route-map PREF_FROM_AS14 in  
exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;route-map PREF_FROM_AS14 permit 10
set local-preference 200
exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;multicast-routing&quot;&gt;&lt;strong&gt;Multicast Routing&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;RTC’s loopback1 will act as PIM &lt;em&gt;Rendezvous Point&lt;/em&gt; &lt;strong&gt;RP&lt;/strong&gt;. In addition, we will not enable PIM on RTA and RTB’s fa1/1 interfaces 
avoiding multicast protocol to affect other AS.&lt;/p&gt;

&lt;p&gt;To set up PIM on an interface:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip pim sparse-mode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To set the RP:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip pim rp-address 10.5.4.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We set up the PIM RP close to the server network, since the servers usually mostly provide the multicast services.&lt;/p&gt;

&lt;h3 id=&quot;complete-rta-router-configuration&quot;&gt;&lt;strong&gt;Complete RTA router configuration&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This config is ready to be copy-pasted in the router config mode.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conf t
hostname RTA
ip multicast-routing 

interface fastEthernet 1/1
ip address 10.0.32.2 255.255.255.252
no shut

interface gigabitEthernet 0/2
ip address 10.5.1.1 255.255.255.252
ip ospf cost 2
ip pim sparse-mode 
no shut

interface gigabitEthernet 0/0
ip address 10.5.0.1 255.255.255.252
ip pim sparse-mode 
no shut

interface loopback 1
ip address 10.5.4.1 255.255.255.255
no shut

exit

ip pim rp-address 10.5.4.3

router ospf 1
router-id 10.5.4.1
network 10.5.1.0 0.0.0.3 area 0
network 10.5.0.0 0.0.0.3 area 0
network 10.5.4.1 0.0.0.0 area 0
default-information originate always metric 20
exit

route-map PREF_FROM_AS2 permit 20
set local-preference 300
exit

router bgp 13
bgp router-id 10.5.4.1
no network 10.0.32.0 mask 255.255.255.252
aggregate-address 10.5.0.0 255.255.240.0 summary-only
redistribute ospf 1
neighbor 10.0.32.1 remote-as 2
neighbor 10.0.32.1 route-map PREF_FROM_AS2 in
neighbor 10.5.4.2 remote-as 13
neighbor 10.5.4.2 next-hop-self
neighbor 10.5.4.2 update-source loopback 1
no auto-summary
no synchronization
exit

ip route 10.5.5.0 255.255.255.252 10.5.4.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;complete-rtb-router-configuration&quot;&gt;&lt;strong&gt;Complete RTB router configuration&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This config is ready to be copy-pasted in the router config mode.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conf t
hostname RTB
ip multicast-routing 

interface gigabitEthernet 0/1
ip address 10.5.5.2 255.255.255.252
no shut

interface gigabitEthernet 0/2
ip address 10.5.2.2 255.255.255.252
ip pim sparse-mode
no shut

interface gigabitEthernet 0/0
ip address 10.5.0.2 255.255.255.252
ip pim sparse-mode
no shut

interface loopback 1
ip address 10.5.4.2 255.255.255.255
no shut

exit

ip pim rp-address 10.5.4.3

router ospf 1
router-id 10.5.4.2
network 10.5.2.0 0.0.0.3 area 0
network 10.5.0.0 0.0.0.3 area 0
network 10.5.4.2 0.0.0.0 area 0
default-information originate always metric 200
exit

route-map PREF_FROM_AS14 permit 10
set local-preference 200
exit

router bgp 13
bgp router-id 10.5.4.2
neighbor 10.5.5.1 remote-as 14
neighbor 10.5.5.1 route-map PREF_FROM_AS14 in
neighbor 10.5.4.1 remote-as 13
neighbor 10.5.4.1 next-hop-self
neighbor 10.5.4.1 update-source loopback 1
redistribute ospf 1
aggregate-address 10.5.0.0 255.255.240.0 summary-only
no auto-summary
no synchronization
exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the second part of this guide we will see how to set up a redundant, fault tolerant, always available link for the client and server networks. We will setup &lt;a href=&quot;https://www.cisco.com/c/en/us/support/docs/ip/hot-standby-router-protocol-hsrp/9234-hsrpguidetoc.html&quot;&gt;&lt;em&gt;Hot Standby Router Protocol&lt;/em&gt; or  &lt;strong&gt;HSRP&lt;/strong&gt;&lt;/a&gt; in both &lt;strong&gt;RTD&lt;/strong&gt; and &lt;strong&gt;RTC&lt;/strong&gt; towards the client and server networks.&lt;/p&gt;

&lt;p&gt;The remaining router configs are also listed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please feel free to make any comment! If anything is unclear, just write in the comment and I will update the post!Thanks for reading!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Jan 2019 00:00:00 +0100</pubDate>
        <link>https://carloalbertoscola.it//2019/notes/network/cisco/BGP-OSPF-network-routing/</link>
        <guid isPermaLink="true">https://carloalbertoscola.it//2019/notes/network/cisco/BGP-OSPF-network-routing/</guid>
        
        <category>network</category>
        
        <category>routing</category>
        
        <category>cisco</category>
        
        <category>bgp</category>
        
        <category>ospf</category>
        
        <category>multicast</category>
        
        
        <category>notes</category>
        
        <category>network</category>
        
        <category>cisco</category>
        
      </item>
    
  </channel>
</rss>
